!function e(t,n,r){function o(u,c){if(!n[u]){if(!t[u]){var i="function"==typeof require&&require;if(!c&&i)return i(u,!0);if(a)return a(u,!0);var l=new Error("Cannot find module '"+u+"'");throw l.code="MODULE_NOT_FOUND",l}var f=n[u]={exports:{}};t[u][0].call(f.exports,function(e){var n=t[u][1][e];return o(n?n:e)},f,f.exports,e,t,n,r)}return n[u].exports}for(var a="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}var o=e("react"),a=r(o),u=e("react-dom"),c=r(u),i=e("./components/Layout"),l=r(i),f="a sample string",s=document.getElementById("app"),p="app/data.json",b={"Content-type":"application/json"},d=function(e,t,n){return new Promise(function(r,o){e=e||"GET",t=t||"/";var a=new XMLHttpRequest;a.onreadystatechange=function(){4==a.readyState&&(200==a.status?r(a.responseText):o(a.status))},a.open(e,t);for(var u in n)a.setRequestHeader(u,n[u]);a.send()})};d("GET",p,b).then(function(e){e=JSON.parse(e),console.log(e),document.getElementsByTagName("title")[0].innerHTML=e.title;var t=e,n=t.navbar;c["default"].render(a["default"].createElement(l["default"],{data:f,navbar:n}),s)})["catch"](alert)},{"./components/Layout":2,react:"react","react-dom":"react-dom"}],2:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react"),l=r(i),f=e("./navbar/Navbar"),s=r(f),p=e("./home/ButtonPanel"),b=r(p),d=function(e){function t(e){o(this,t);var n=a(this,Object.getPrototypeOf(t).call(this,e));return n.state={text:n.props.data},n.inputChanged=n.inputChanged.bind(n),n}return u(t,e),c(t,[{key:"inputChanged",value:function(e){this.setState({text:e.target.value})}},{key:"render",value:function(){return l["default"].createElement("div",null,l["default"].createElement(s["default"],{navItems:this.props.navbar}),l["default"].createElement("p",null,"Your Input: ",this.state.text),l["default"].createElement("input",{type:"text",value:this.state.text,placeholder:"a placeholder",onChange:this.inputChanged}),l["default"].createElement(b["default"],{values:this.state.text}))}}]),t}(l["default"].Component);n["default"]=d},{"./home/ButtonPanel":3,"./navbar/Navbar":8,react:"react"}],3:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react"),l=r(i),f=e("./Mybutton"),s=r(f),p=["btn-danger","btn-success","btn-warning","btn-info","btn-primary","btn-blog","btn-default"],b=function(e){function t(e){o(this,t);var n=a(this,Object.getPrototypeOf(t).call(this,e));return n.buttonClicked=n.buttonClicked.bind(n),n}return u(t,e),c(t,[{key:"buttonClicked",value:function(e){return function(){return alert("You clicked button "+(e+1))}}},{key:"render",value:function(){var e=this,t=this.props.values.split(" ").map(function(t,n){return l["default"].createElement(s["default"],{value:t,key:n,callback:e.buttonClicked(n),"class":p[n%p.length]})});return l["default"].createElement("div",null,t)}}]),t}(l["default"].Component);n["default"]=b},{"./Mybutton":4,react:"react"}],4:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react"),l=r(i),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),c(t,[{key:"render",value:function(){return l["default"].createElement("div",{className:"inline"},l["default"].createElement("button",{className:"btn "+this.props["class"],onClick:this.props.callback},this.props.value))}}]),t}(l["default"].Component);n["default"]=f},{react:"react"}],5:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react"),l=r(i),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),c(t,[{key:"render",value:function(){return l["default"].createElement("a",{href:this.props.path,onClick:this.props.callback,className:"navbar-brand "+(this.props.active?"active":"")},this.props.value)}}]),t}(l["default"].Component);n["default"]=f},{react:"react"}],6:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react"),l=r(i),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),c(t,[{key:"render",value:function(){var e={padding:0};return l["default"].createElement("a",{href:this.props.path,style:e,className:"navbar-brand"},l["default"].createElement("img",{src:this.props.img}))}}]),t}(l["default"].Component);n["default"]=f},{react:"react"}],7:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=e("react"),l=r(i),f=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),c(t,[{key:"render",value:function(){return l["default"].createElement("li",{className:this.props.active?"active":""},l["default"].createElement("a",{href:this.props.path,onClick:this.props.callback},this.props.value))}}]),t}(l["default"].Component);n["default"]=f},{react:"react"}],8:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=e("react"),f=r(l),s=e("./Brand"),p=r(s),b=e("./BrandImg"),d=r(b),y=e("./Nav"),h=r(y),v=function(e){function t(e){o(this,t);var n=a(this,Object.getPrototypeOf(t).call(this,e));return n.state={active:0},n.navClicked=n.navClicked.bind(n),n}return u(t,e),i(t,[{key:"navClicked",value:function(e){var t=this;return function(n){return t.setState({active:e})}}},{key:"render",value:function(){var e=this,t=this.props.navItems.map(function(t,n){var r={key:n,active:n==e.state.active,value:t.value,path:t.path,callback:e.navClicked(n)};switch(t.type){case"brand-img":return f["default"].createElement(d["default"],c({},r,{img:t.img,value:""}));case"brand":return f["default"].createElement(p["default"],r);case"nav":return f["default"].createElement(h["default"],r);case"dropdown":return"dropdown";default:return"default"}});return f["default"].createElement("nav",{className:"navbar navbar-default"},f["default"].createElement("ul",{className:"nav navbar-nav"},t))}}]),t}(f["default"].Component);n["default"]=v},{"./Brand":5,"./BrandImg":6,"./Nav":7,react:"react"}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,

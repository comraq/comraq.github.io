!function e(t,r,n){function o(i,u){if(!r[i]){if(!t[i]){var s="function"==typeof require&&require;if(!u&&s)return s(i,!0);if(a)return a(i,!0);var c=new Error("Cannot find module '"+i+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[i]={exports:{}};t[i][0].call(l.exports,function(e){var r=t[i][1][e];return o(r?r:e)},l,l.exports,e,t,r,n)}return r[i].exports}for(var a="function"==typeof require&&require,i=0;i<n.length;i++)o(n[i]);return o}({1:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var o=e("react"),a=n(o),i=e("react-dom"),u=n(i),s=(e("react-router"),e("./utils/ajax")),c=n(s),l=e("./components/Layout"),f=n(l),p="a sample string",d=document.getElementById("app"),h="app/data.json",y={"Content-type":"application/json"};(0,c["default"])("GET",h,y).then(function(e){var t=JSON.parse(e),r=t.data;document.getElementsByTagName("title")[0].innerHTML=r.title;var n=r.navbar;u["default"].render(a["default"].createElement(f["default"],{data:p,navbar:n}),d)})["catch"](alert)},{"./components/Layout":2,"./utils/ajax":11,react:"react","react-dom":"react-dom","react-router":64}],2:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=e("./navbar/Navbar"),f=n(l),p=e("./home/ButtonPanel"),d=n(p),h=function(e){function t(e){o(this,t);var r=a(this,Object.getPrototypeOf(t).call(this,e));return r.state={text:r.props.data},r.inputChanged=r.inputChanged.bind(r),r}return i(t,e),u(t,[{key:"inputChanged",value:function(e){this.setState({text:e.target.value})}},{key:"render",value:function(){return c["default"].createElement("div",null,c["default"].createElement(f["default"],{navItems:this.props.navbar}),c["default"].createElement("p",null,"Your Input: ",this.state.text),c["default"].createElement("input",{type:"text",value:this.state.text,placeholder:"a placeholder",onChange:this.inputChanged}),c["default"].createElement(d["default"],{values:this.state.text}))}}]),t}(c["default"].Component);r["default"]=h},{"./home/ButtonPanel":3,"./navbar/Navbar":8,react:"react"}],3:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=e("./Mybutton"),f=n(l),p=["btn-danger","btn-success","btn-warning","btn-info","btn-primary","btn-blog","btn-default"],d=function(e){function t(e){o(this,t);var r=a(this,Object.getPrototypeOf(t).call(this,e));return r.buttonClicked=r.buttonClicked.bind(r),r}return i(t,e),u(t,[{key:"buttonClicked",value:function(e){return function(){return alert("You clicked button "+(e+1))}}},{key:"render",value:function(){var e=this,t=this.props.values.split(" ").map(function(t,r){return c["default"].createElement(f["default"],{value:t,key:r,callback:e.buttonClicked(r),"class":p[r%p.length]})});return c["default"].createElement("div",null,t)}}]),t}(c["default"].Component);r["default"]=d},{"./Mybutton":4,react:"react"}],4:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("div",{className:"inline"},c["default"].createElement("button",{className:"btn "+this.props["class"],onClick:this.props.callback},this.props.value))}}]),t}(c["default"].Component);r["default"]=l},{react:"react"}],5:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("a",{href:this.props.path,onClick:this.props.callback,className:"navbar-brand "+(this.props.active?"active":"")},this.props.value)}}]),t}(c["default"].Component);r["default"]=l},{react:"react"}],6:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return i(t,e),u(t,[{key:"render",value:function(){var e={padding:0};return c["default"].createElement("a",{href:this.props.path,style:e,className:"navbar-brand"},c["default"].createElement("img",{src:this.props.img}))}}]),t}(c["default"].Component);r["default"]=l},{react:"react"}],7:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("li",{className:this.props.active?"active":""},c["default"].createElement("a",{href:this.props.path,onClick:this.props.callback},this.props.value))}}]),t}(c["default"].Component);r["default"]=l},{react:"react"}],8:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),c=e("react"),l=n(c),f=e("./Brand"),p=n(f),d=e("./BrandImg"),h=n(d),y=e("./Nav"),v=n(y),m=e("./dropdown/Menu"),g=n(m),_=function(e){function t(e){o(this,t);var r=a(this,Object.getPrototypeOf(t).call(this,e));return r.state={active:0},r.navClicked=r.navClicked.bind(r),r}return i(t,e),s(t,[{key:"navClicked",value:function(e){var t=this;return function(r){return t.setState({active:e})}}},{key:"render",value:function(){var e=this,t=this.props.navItems.map(function(t,r){var n={key:r,active:r==e.state.active,value:t.value,path:t.path,callback:e.navClicked(r)};switch(t.type){case"brand-img":return l["default"].createElement(h["default"],u({},n,{img:t.img,value:""}));case"brand":return l["default"].createElement(p["default"],n);case"nav":return l["default"].createElement(v["default"],n);case"dropdown":return l["default"].createElement(g["default"],u({},n,{profiles:t.profiles,emails:t.emails}));default:return"default"}});return l["default"].createElement("nav",{className:"navbar navbar-default"},l["default"].createElement("ul",{className:"nav navbar-nav"},t))}}]),t}(l["default"].Component);r["default"]=_},{"./Brand":5,"./BrandImg":6,"./Nav":7,"./dropdown/Menu":10,react:"react"}],9:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),s=e("react"),c=n(s),l=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return i(t,e),u(t,[{key:"render",value:function(){return c["default"].createElement("li",null,c["default"].createElement("a",{href:this.props.url,className:"dropdown-item"},this.props.value,c["default"].createElement("img",{className:"dropdown-icon",src:this.props.img})))}}]),t}(c["default"].Component);r["default"]=l},{react:"react"}],10:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(r,"__esModule",{value:!0});var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),c=e("react"),l=n(c),f=e("./Item"),p=n(f),d=function(e){function t(e){return o(this,t),a(this,Object.getPrototypeOf(t).call(this,e))}return i(t,e),s(t,[{key:"render",value:function(){var e=this.props.profiles.map(function(e,t){return l["default"].createElement(p["default"],u({},e,{key:t}))}),t=this.props.emails.map(function(e,t){return l["default"].createElement(p["default"],u({},e,{key:t}))});return l["default"].createElement("li",{className:"open"},l["default"].createElement("a",{href:"#",className:"dropdown-toggle","data-toggle":"dropdown",role:"button","aria-haspopup":"true","aria-expanded":this.props.active,onClick:this.props.callback},this.props.value,l["default"].createElement("span",{"class":"caret"})),l["default"].createElement("ul",{className:"dropdown-menu"},e,l["default"].createElement("li",{role:"separator","class":"divider"}),l["default"].createElement("li",{"class":"dropdown-header"},"Email"),t))}}]),t}(l["default"].Component);r["default"]=d},{"./Item":9,react:"react"}],11:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=function(e,t,r){return new Promise(function(n,o){e=e||"GET",t=t||"/";var a=new XMLHttpRequest;a.onreadystatechange=function(){if(4==a.readyState){var e={headers:a.getAllResponseHeaders(),data:JSON.parse(a.responseText)};200==a.status?n(JSON.stringify(e)):o(JSON.stringify(e))}};var i={"Content-Type":"application/json"};a.open(e,t);for(var u in i)a.setRequestHeader(u,i[u]);if(r)for(var s in r)a.setRequestHeader(s,r[s]);a.send()})};r["default"]=n},{}],12:[function(e,t,r){function n(e){return null===e||void 0===e}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length?"function"!=typeof e.copy||"function"!=typeof e.slice?!1:!(e.length>0&&"number"!=typeof e[0]):!1}function a(e,t,r){var a,l;if(n(e)||n(t))return!1;if(e.prototype!==t.prototype)return!1;if(s(e))return s(t)?(e=i.call(e),t=i.call(t),c(e,t,r)):!1;if(o(e)){if(!o(t))return!1;if(e.length!==t.length)return!1;for(a=0;a<e.length;a++)if(e[a]!==t[a])return!1;return!0}try{var f=u(e),p=u(t)}catch(d){return!1}if(f.length!=p.length)return!1;for(f.sort(),p.sort(),a=f.length-1;a>=0;a--)if(f[a]!=p[a])return!1;for(a=f.length-1;a>=0;a--)if(l=f[a],!c(e[l],t[l],r))return!1;return typeof e==typeof t}var i=Array.prototype.slice,u=e("./lib/keys.js"),s=e("./lib/is_arguments.js"),c=t.exports=function(e,t,r){return r||(r={}),e===t?!0:e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?r.strict?e===t:e==t:a(e,t,r)}},{"./lib/is_arguments.js":13,"./lib/keys.js":14}],13:[function(e,t,r){function n(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}var a="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();r=t.exports=a?n:o,r.supported=n,r.unsupported=o},{}],14:[function(e,t,r){function n(e){var t=[];for(var r in e)t.push(r);return t}r=t.exports="function"==typeof Object.keys?Object.keys:n,r.shim=n},{}],15:[function(e,t,r){"use strict";r.__esModule=!0;var n="PUSH";r.PUSH=n;var o="REPLACE";r.REPLACE=o;var a="POP";r.POP=a,r["default"]={PUSH:n,REPLACE:o,POP:a}},{}],16:[function(e,t,r){"use strict";function n(e,t,r){function n(){return u=!0,s?void(l=[].concat(o.call(arguments))):void r.apply(this,arguments)}function a(){if(!u&&(c=!0,!s)){for(s=!0;!u&&e>i&&c;)c=!1,t.call(this,i++,a,n);return s=!1,u?void r.apply(this,l):void(i>=e&&c&&(u=!0,r()))}}var i=0,u=!1,s=!1,c=!1,l=void 0;a()}r.__esModule=!0;var o=Array.prototype.slice;r.loopAsync=n},{}],17:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){return c+e}function a(e,r){try{null==r?window.sessionStorage.removeItem(o(e)):window.sessionStorage.setItem(o(e),JSON.stringify(r))}catch(n){if(n.name===f)return void("production"!==t.env.NODE_ENV?s["default"](!1,"[history] Unable to save state; sessionStorage is not available due to security settings"):void 0);if(l.indexOf(n.name)>=0&&0===window.sessionStorage.length)return void("production"!==t.env.NODE_ENV?s["default"](!1,"[history] Unable to save state; sessionStorage is not available in Safari private mode"):void 0);throw n}}function i(e){var r=void 0;try{r=window.sessionStorage.getItem(o(e))}catch(n){if(n.name===f)return"production"!==t.env.NODE_ENV?s["default"](!1,"[history] Unable to read state; sessionStorage is not available due to security settings"):void 0,null}if(r)try{return JSON.parse(r)}catch(n){}return null}r.__esModule=!0,r.saveState=a,r.readState=i;var u=e("warning"),s=n(u),c="@@History/",l=["QuotaExceededError","QUOTA_EXCEEDED_ERR"],f="SecurityError"}).call(this,e("_process"))},{_process:33,warning:73}],18:[function(e,t,r){"use strict";function n(e,t,r){e.addEventListener?e.addEventListener(t,r,!1):e.attachEvent("on"+t,r)}function o(e,t,r){e.removeEventListener?e.removeEventListener(t,r,!1):e.detachEvent("on"+t,r)}function a(){return window.location.href.split("#")[1]||""}function i(e){window.location.replace(window.location.pathname+window.location.search+"#"+e)}function u(){return window.location.pathname+window.location.search+window.location.hash}function s(e){e&&window.history.go(e)}function c(e,t){t(window.confirm(e))}function l(){var e=navigator.userAgent;return-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}function f(){var e=navigator.userAgent;return-1===e.indexOf("Firefox")}r.__esModule=!0,r.addEventListener=n,r.removeEventListener=o,r.getHashPath=a,r.replaceHashPath=i,r.getWindowPath=u,r.go=s,r.getUserConfirmation=c,r.supportsHistory=l,r.supportsGoWithoutReloadUsingHash=f},{}],19:[function(e,t,r){"use strict";r.__esModule=!0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);r.canUseDOM=n},{}],20:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=e.match(/^https?:\/\/[^\/]*/);return null==t?e:e.substring(t[0].length)}function a(e){var r=o(e),n="",a="";"production"!==t.env.NODE_ENV?u["default"](e===r,'A path must be pathname + search + hash only, not a fully qualified URL like "%s"',e):void 0;var i=r.indexOf("#");-1!==i&&(a=r.substring(i),r=r.substring(0,i));var s=r.indexOf("?");return-1!==s&&(n=r.substring(s),r=r.substring(0,s)),""===r&&(r="/"),{pathname:r,search:n,hash:a}}r.__esModule=!0,r.extractPath=o,r.parsePath=a;var i=e("warning"),u=n(i)}).call(this,e("_process"))},{_process:33,warning:73}],21:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(){function e(e){e=e||window.history.state||{};var t=p.getWindowPath(),r=e,n=r.key,o=void 0;n?o=d.readState(n):(o=null,n=b.createKey(),g&&window.history.replaceState(i({},e,{key:n}),null));var a=l.parsePath(t);return b.createLocation(i({},a,{state:o}),void 0,n)}function t(t){function r(t){void 0!==t.state&&n(e(t.state))}var n=t.transitionTo;return p.addEventListener(window,"popstate",r),function(){p.removeEventListener(window,"popstate",r)}}function r(e){var t=e.basename,r=e.pathname,n=e.search,o=e.hash,a=e.state,i=e.action,u=e.key;if(i!==c.POP){d.saveState(u,a);var s=(t||"")+r+n+o,l={key:u};if(i===c.PUSH){if(_)return window.location.href=s,!1;window.history.pushState(l,null,s)}else{if(_)return window.location.replace(s),!1;window.history.replaceState(l,null,s)}}}function o(e){1===++O&&(E=t(b));var r=b.listenBefore(e);return function(){r(),0===--O&&E()}}function a(e){1===++O&&(E=t(b));var r=b.listen(e);return function(){r(),0===--O&&E()}}function u(e){1===++O&&(E=t(b)),b.registerTransitionHook(e)}function h(e){b.unregisterTransitionHook(e),0===--O&&E()}var v=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];f.canUseDOM?void 0:"production"!==n.env.NODE_ENV?s["default"](!1,"Browser history needs a DOM"):s["default"](!1);var m=v.forceRefresh,g=p.supportsHistory(),_=!g||m,b=y["default"](i({},v,{getCurrentLocation:e,finishTransition:r,saveState:d.saveState})),O=0,E=void 0;return i({},b,{listenBefore:o,listen:a,registerTransitionHook:u,unregisterTransitionHook:h})}r.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u=e("invariant"),s=o(u),c=e("./Actions"),l=e("./PathUtils"),f=e("./ExecutionEnvironment"),p=e("./DOMUtils"),d=e("./DOMStateStorage"),h=e("./createDOMHistory"),y=o(h);r["default"]=a,t.exports=r["default"]}).call(this,e("_process"))},{"./Actions":15,"./DOMStateStorage":17,"./DOMUtils":18,"./ExecutionEnvironment":19,"./PathUtils":20,"./createDOMHistory":22,_process:33,invariant:32}],22:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){function t(e){return c.canUseDOM?void 0:"production"!==n.env.NODE_ENV?s["default"](!1,"DOM history needs a DOM"):s["default"](!1),r.listen(e)}var r=p["default"](i({getUserConfirmation:l.getUserConfirmation},e,{go:l.go}));return i({},r,{listen:t})}r.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u=e("invariant"),s=o(u),c=e("./ExecutionEnvironment"),l=e("./DOMUtils"),f=e("./createHistory"),p=o(f);r["default"]=a,t.exports=r["default"]}).call(this,e("_process"))},{"./DOMUtils":18,"./ExecutionEnvironment":19,"./createHistory":24,_process:33,invariant:32}],23:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){return"string"==typeof e&&"/"===e.charAt(0)}function i(){var e=_.getHashPath();return a(e)?!0:(_.replaceHashPath("/"+e),!1)}function u(e,t,r){return e+(-1===e.indexOf("?")?"?":"&")+(t+"="+r)}function s(e,t){return e.replace(new RegExp("[?&]?"+t+"=[a-zA-Z0-9]+"),"")}function c(e,t){var r=e.match(new RegExp("\\?.*?\\b"+t+"=(.+?)\\b"));return r&&r[1]}function l(){function e(){var e=_.getHashPath(),t=void 0,r=void 0;M?(t=c(e,M),e=s(e,M),t?r=b.readState(t):(r=null,t=T.createKey(),_.replaceHashPath(u(e,M,t)))):t=r=null;var n=m.parsePath(e);return T.createLocation(f({},n,{state:r}),void 0,t)}function t(t){function r(){i()&&n(e())}var n=t.transitionTo;return i(),_.addEventListener(window,"hashchange",r),function(){_.removeEventListener(window,"hashchange",r)}}function r(e){var t=e.basename,r=e.pathname,o=e.search,a=e.state,i=e.action,s=e.key;if(i!==v.POP){var c=(t||"")+r+o;M?(c=u(c,M,s),b.saveState(s,a)):e.key=e.state=null;var l=_.getHashPath();i===v.PUSH?l!==c?window.location.hash=c:"production"!==n.env.NODE_ENV?d["default"](!1,"You cannot PUSH the same path using hash history"):void 0:l!==c&&_.replaceHashPath(c)}}function o(e){1===++k&&(C=t(T));var r=T.listenBefore(e);return function(){r(),0===--k&&C()}}function a(e){1===++k&&(C=t(T));var r=T.listen(e);return function(){r(),0===--k&&C()}}function l(e){"production"!==n.env.NODE_ENV?d["default"](M||null==e.state,"You cannot use state without a queryKey it will be dropped"):void 0,T.push(e)}function p(e){"production"!==n.env.NODE_ENV?d["default"](M||null==e.state,"You cannot use state without a queryKey it will be dropped"):void 0,T.replace(e)}function h(e){"production"!==n.env.NODE_ENV?d["default"](S,"Hash history go(n) causes a full page reload in this browser"):void 0,T.go(e)}function O(e){return"#"+T.createHref(e)}function P(e){1===++k&&(C=t(T)),T.registerTransitionHook(e)}function R(e){T.unregisterTransitionHook(e),0===--k&&C()}function x(e,t){"production"!==n.env.NODE_ENV?d["default"](M||null==e,"You cannot use state without a queryKey it will be dropped"):void 0,T.pushState(e,t)}function j(e,t){"production"!==n.env.NODE_ENV?d["default"](M||null==e,"You cannot use state without a queryKey it will be dropped"):void 0,T.replaceState(e,t)}var N=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];g.canUseDOM?void 0:"production"!==n.env.NODE_ENV?y["default"](!1,"Hash history needs a DOM"):y["default"](!1);var M=N.queryKey;(void 0===M||M)&&(M="string"==typeof M?M:w);var T=E["default"](f({},N,{getCurrentLocation:e,finishTransition:r,saveState:b.saveState})),k=0,C=void 0,S=_.supportsGoWithoutReloadUsingHash();return f({},T,{listenBefore:o,listen:a,push:l,replace:p,go:h,createHref:O,registerTransitionHook:P,unregisterTransitionHook:R,pushState:x,replaceState:j})}r.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},p=e("warning"),d=o(p),h=e("invariant"),y=o(h),v=e("./Actions"),m=e("./PathUtils"),g=e("./ExecutionEnvironment"),_=e("./DOMUtils"),b=e("./DOMStateStorage"),O=e("./createDOMHistory"),E=o(O),w="_k";r["default"]=l,t.exports=r["default"]}).call(this,e("_process"))},{"./Actions":15,"./DOMStateStorage":17,"./DOMUtils":18,"./ExecutionEnvironment":19,"./PathUtils":20,"./createDOMHistory":22,_process:33,invariant:32,warning:73}],24:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){return Math.random().toString(36).substr(2,e)}function i(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&p["default"](e.state,t.state)}function u(){function e(e){return V.push(e),function(){V=V.filter(function(t){return t!==e})}}function t(){return Q&&Q.action===y.POP?I.indexOf(Q.key):B?I.indexOf(B.key):-1}function r(e){var r=t();B=e,B.action===y.PUSH?I=[].concat(I.slice(0,r+1),[B.key]):B.action===y.REPLACE&&(I[r]=B.key),W.forEach(function(e){e(B)})}function o(e){if(W.push(e),B)e(B);else{var t=H();I=[t.key],r(t)}return function(){W=W.filter(function(t){return t!==e})}}function u(e,t){h.loopAsync(V.length,function(t,r,n){_["default"](V[t],e,function(e){null!=e?n(e):r()})},function(e){q&&"string"==typeof e?q(e,function(e){t(e!==!1)}):t(e!==!1)})}function c(e){B&&i(B,e)||(Q=e,u(e,function(t){if(Q===e)if(t){if(e.action===y.PUSH){var n=P(B),o=P(e);o===n&&p["default"](B.state,e.state)&&(e.action=y.REPLACE)}A(e)!==!1&&r(e)}else if(B&&e.action===y.POP){var a=I.indexOf(B.key),i=I.indexOf(e.key);-1!==a&&-1!==i&&D(a-i)}}))}function f(e){c(x(e,y.PUSH,w()))}function v(e){c(x(e,y.REPLACE,w()))}function g(){D(-1)}function b(){D(1)}function w(){return a(L)}function P(e){if(null==e||"string"==typeof e)return e;var t=e.pathname,r=e.search,n=e.hash,o=t;return r&&(o+=r),n&&(o+=n),o}function R(e){return P(e)}function x(e,t){var r=arguments.length<=2||void 0===arguments[2]?w():arguments[2];return"object"==typeof t&&("production"!==n.env.NODE_ENV?l["default"](!1,"The state (2nd) argument to history.createLocation is deprecated; use a location descriptor instead"):void 0,"string"==typeof e&&(e=d.parsePath(e)),e=s({},e,{state:t}),t=r,r=arguments[3]||w()),m["default"](e,t,r)}function j(e){B?(N(B,e),r(B)):N(H(),e)}function N(e,t){e.state=s({},e.state,t),U(e.key,e.state)}function M(e){-1===V.indexOf(e)&&V.push(e)}function T(e){V=V.filter(function(t){return t!==e})}function k(e,t){"string"==typeof t&&(t=d.parsePath(t)),f(s({state:e},t))}function C(e,t){"string"==typeof t&&(t=d.parsePath(t)),v(s({state:e},t))}var S=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],H=S.getCurrentLocation,A=S.finishTransition,U=S.saveState,D=S.go,q=S.getUserConfirmation,L=S.keyLength;"number"!=typeof L&&(L=E);var V=[],I=[],W=[],B=void 0,Q=void 0;return{listenBefore:e,listen:o,transitionTo:c,push:f,replace:v,go:D,goBack:g,goForward:b,createKey:w,createPath:P,createHref:R,createLocation:x,setState:O["default"](j,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:O["default"](M,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:O["default"](T,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead"),pushState:O["default"](k,"pushState is deprecated; use push instead"),replaceState:O["default"](C,"replaceState is deprecated; use replace instead")}}r.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},c=e("warning"),l=o(c),f=e("deep-equal"),p=o(f),d=e("./PathUtils"),h=e("./AsyncUtils"),y=e("./Actions"),v=e("./createLocation"),m=o(v),g=e("./runTransitionHook"),_=o(g),b=e("./deprecate"),O=o(b),E=6;r["default"]=u,t.exports=r["default"]}).call(this,e("_process"))},{"./Actions":15,"./AsyncUtils":16,"./PathUtils":20,"./createLocation":25,"./deprecate":27,"./runTransitionHook":28,_process:33,"deep-equal":12,warning:73}],25:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?c.POP:arguments[1],r=arguments.length<=2||void 0===arguments[2]?null:arguments[2],o=arguments.length<=3||void 0===arguments[3]?null:arguments[3];
"string"==typeof e&&(e=l.parsePath(e)),"object"==typeof t&&("production"!==n.env.NODE_ENV?s["default"](!1,"The state (2nd) argument to createLocation is deprecated; use a location descriptor instead"):void 0,e=i({},e,{state:t}),t=r||c.POP,r=o);var a=e.pathname||"/",u=e.search||"",f=e.hash||"",p=e.state||null;return{pathname:a,search:u,hash:f,state:p,action:t,key:r}}r.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u=e("warning"),s=o(u),c=e("./Actions"),l=e("./PathUtils");r["default"]=a,t.exports=r["default"]}).call(this,e("_process"))},{"./Actions":15,"./PathUtils":20,_process:33,warning:73}],26:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){return e.filter(function(e){return e.state}).reduce(function(e,t){return e[t.key]=t.state,e},{})}function i(){function e(e,t){_[e]=t}function t(e){return _[e]}function r(){var e=m[g],r=e.basename,n=e.pathname,o=e.search,a=(r||"")+n+(o||""),i=void 0,s=void 0;e.key?(i=e.key,s=t(i)):(i=h.createKey(),s=null,e.key=i);var c=p.parsePath(a);return h.createLocation(u({},c,{state:s}),void 0,i)}function o(e){var t=g+e;return t>=0&&t<m.length}function i(e){if(e){if(!o(e))return void("production"!==n.env.NODE_ENV?c["default"](!1,"Cannot go(%s) there is not enough history",e):void 0);g+=e;var t=r();h.transitionTo(u({},t,{action:d.POP}))}}function s(t){switch(t.action){case d.PUSH:g+=1,g<m.length&&m.splice(g),m.push(t),e(t.key,t.state);break;case d.REPLACE:m[g]=t,e(t.key,t.state)}}var l=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];Array.isArray(l)?l={entries:l}:"string"==typeof l&&(l={entries:[l]});var h=y["default"](u({},l,{getCurrentLocation:r,finishTransition:s,saveState:e,go:i})),v=l,m=v.entries,g=v.current;"string"==typeof m?m=[m]:Array.isArray(m)||(m=["/"]),m=m.map(function(e){var t=h.createKey();return"string"==typeof e?{pathname:e,key:t}:"object"==typeof e&&e?u({},e,{key:t}):void("production"!==n.env.NODE_ENV?f["default"](!1,"Unable to create history entry from %s",e):f["default"](!1))}),null==g?g=m.length-1:g>=0&&g<m.length?void 0:"production"!==n.env.NODE_ENV?f["default"](!1,"Current index must be >= 0 and < %s, was %s",m.length,g):f["default"](!1);var _=a(m);return h}r.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=e("warning"),c=o(s),l=e("invariant"),f=o(l),p=e("./PathUtils"),d=e("./Actions"),h=e("./createHistory"),y=o(h);r["default"]=i,t.exports=r["default"]}).call(this,e("_process"))},{"./Actions":15,"./PathUtils":20,"./createHistory":24,_process:33,invariant:32,warning:73}],27:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){return function(){return"production"!==n.env.NODE_ENV?u["default"](!1,"[history] "+t):void 0,e.apply(this,arguments)}}r.__esModule=!0;var i=e("warning"),u=o(i);r["default"]=a,t.exports=r["default"]}).call(this,e("_process"))},{_process:33,warning:73}],28:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t,r){var o=e(t,r);e.length<2?r(o):"production"!==n.env.NODE_ENV?u["default"](void 0===o,'You should not "return" in a transition hook with a callback argument; call the callback instead'):void 0}r.__esModule=!0;var i=e("warning"),u=o(i);r["default"]=a,t.exports=r["default"]}).call(this,e("_process"))},{_process:33,warning:73}],29:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){return function(){function t(){if(!w){if(null==E&&c.canUseDOM){var e=document.getElementsByTagName("base")[0],t=e&&e.getAttribute("href");null!=t&&(E=t,"production"!==n.env.NODE_ENV?s["default"](!1,"Automatically setting basename using <base href> is deprecated and will be removed in the next major release. The semantics of <base href> are subtly different from basename. Please pass the basename explicitly in the options to createHistory"):void 0)}w=!0}}function r(e){return t(),E&&null==e.basename&&(0===e.pathname.indexOf(E)?(e.pathname=e.pathname.substring(E.length),e.basename=E,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function o(e){if(t(),!E)return e;"string"==typeof e&&(e=l.parsePath(e));var r=e.pathname,n="/"===E.slice(-1)?E:E+"/",o="/"===r.charAt(0)?r.slice(1):r,a=n+o;return i({},e,{pathname:a})}function a(e){return O.listenBefore(function(t,n){p["default"](e,r(t),n)})}function u(e){return O.listen(function(t){e(r(t))})}function f(e){O.push(o(e))}function d(e){O.replace(o(e))}function y(e){return O.createPath(o(e))}function v(e){return O.createHref(o(e))}function m(e){for(var t=arguments.length,n=Array(t>1?t-1:0),a=1;t>a;a++)n[a-1]=arguments[a];return r(O.createLocation.apply(O,[o(e)].concat(n)))}function g(e,t){"string"==typeof t&&(t=l.parsePath(t)),f(i({state:e},t))}function _(e,t){"string"==typeof t&&(t=l.parsePath(t)),d(i({state:e},t))}var b=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],O=e(b),E=b.basename,w=!1;return i({},O,{listenBefore:a,listen:u,push:f,replace:d,createPath:y,createHref:v,createLocation:m,pushState:h["default"](g,"pushState is deprecated; use push instead"),replaceState:h["default"](_,"replaceState is deprecated; use replace instead")})}}r.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u=e("warning"),s=o(u),c=e("./ExecutionEnvironment"),l=e("./PathUtils"),f=e("./runTransitionHook"),p=o(f),d=e("./deprecate"),h=o(d);r["default"]=a,t.exports=r["default"]}).call(this,e("_process"))},{"./ExecutionEnvironment":19,"./PathUtils":20,"./deprecate":27,"./runTransitionHook":28,_process:33,warning:73}],30:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){return f.stringify(e).replace(/%20/g,"+")}function i(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&"object"==typeof e[t]&&!Array.isArray(e[t])&&null!==e[t])return!0;return!1}function u(e){return function(){function t(e){if(null==e.query){var t=e.search;e.query=R(t.substring(1)),e[m]={search:t,searchBase:""}}return e}function r(e,t){var r,o=e[m],u=t?P(t):"";if(!o&&!u)return e;"production"!==n.env.NODE_ENV?l["default"](P!==a||!i(t),"useQueries does not stringify nested query objects by default; use a custom stringifyQuery function"):void 0,"string"==typeof e&&(e=h.parsePath(e));var c=void 0;c=o&&e.search===o.search?o.searchBase:e.search||"";var f=c;return u&&(f+=(f?"&":"?")+u),s({},e,(r={search:f},r[m]={search:f,searchBase:c},r))}function o(e){return w.listenBefore(function(r,n){d["default"](e,t(r),n)})}function u(e){return w.listen(function(r){e(t(r))})}function c(e){w.push(r(e,e.query))}function f(e){w.replace(r(e,e.query))}function p(e,t){return"production"!==n.env.NODE_ENV?l["default"](!t,"the query argument to createPath is deprecated; use a location descriptor instead"):void 0,w.createPath(r(e,t||e.query))}function y(e,t){return"production"!==n.env.NODE_ENV?l["default"](!t,"the query argument to createHref is deprecated; use a location descriptor instead"):void 0,w.createHref(r(e,t||e.query))}function _(e){for(var n=arguments.length,o=Array(n>1?n-1:0),a=1;n>a;a++)o[a-1]=arguments[a];var i=w.createLocation.apply(w,[r(e,e.query)].concat(o));return e.query&&(i.query=e.query),t(i)}function b(e,t,r){"string"==typeof t&&(t=h.parsePath(t)),c(s({state:e},t,{query:r}))}function O(e,t,r){"string"==typeof t&&(t=h.parsePath(t)),f(s({state:e},t,{query:r}))}var E=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],w=e(E),P=E.stringifyQuery,R=E.parseQueryString;return"function"!=typeof P&&(P=a),"function"!=typeof R&&(R=g),s({},w,{listenBefore:o,listen:u,push:c,replace:f,createPath:p,createHref:y,createLocation:_,pushState:v["default"](b,"pushState is deprecated; use push instead"),replaceState:v["default"](O,"replaceState is deprecated; use replace instead")})}}r.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},c=e("warning"),l=o(c),f=e("query-string"),p=e("./runTransitionHook"),d=o(p),h=e("./PathUtils"),y=e("./deprecate"),v=o(y),m="$searchBase",g=f.parse;r["default"]=u,t.exports=r["default"]}).call(this,e("_process"))},{"./PathUtils":20,"./deprecate":27,"./runTransitionHook":28,_process:33,"query-string":34,warning:73}],31:[function(e,t,r){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0};t.exports=function(e,t){if("string"!=typeof t)for(var r=Object.getOwnPropertyNames(t),a=0;a<r.length;++a)if(!n[r[a]]&&!o[r[a]])try{e[r[a]]=t[r[a]]}catch(i){}return e}},{}],32:[function(e,t,r){(function(e){"use strict";var r=function(t,r,n,o,a,i,u,s){if("production"!==e.env.NODE_ENV&&void 0===r)throw new Error("invariant requires an error message argument");if(!t){var c;if(void 0===r)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,a,i,u,s],f=0;c=new Error(r.replace(/%s/g,function(){return l[f++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}};t.exports=r}).call(this,e("_process"))},{_process:33}],33:[function(e,t,r){function n(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&o())}function o(){if(!l){var e=setTimeout(n);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,clearTimeout(e)}}function a(e,t){this.fun=e,this.array=t}function i(){}var u,s=t.exports={},c=[],l=!1,f=-1;s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new a(e,t)),1!==c.length||l||setTimeout(o,0)},a.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=i,s.addListener=i,s.once=i,s.off=i,s.removeListener=i,s.removeAllListeners=i,s.emit=i,s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},{}],34:[function(e,t,r){"use strict";var n=e("strict-uri-encode");r.extract=function(e){return e.split("?")[1]||""},r.parse=function(e){return"string"!=typeof e?{}:(e=e.trim().replace(/^(\?|#|&)/,""),e?e.split("&").reduce(function(e,t){var r=t.replace(/\+/g," ").split("="),n=r.shift(),o=r.length>0?r.join("="):void 0;return n=decodeURIComponent(n),o=void 0===o?null:decodeURIComponent(o),e.hasOwnProperty(n)?Array.isArray(e[n])?e[n].push(o):e[n]=[e[n],o]:e[n]=o,e},{}):{})},r.stringify=function(e){return e?Object.keys(e).sort().map(function(t){var r=e[t];return void 0===r?"":null===r?t:Array.isArray(r)?r.slice().sort().map(function(e){return n(t)+"="+n(e)}).join("&"):n(t)+"="+n(r)}).filter(function(e){return e.length>0}).join("&"):""}},{"strict-uri-encode":72}],35:[function(e,t,r){"use strict";function n(e,t,r){function n(){return i=!0,u?void(c=[].concat(Array.prototype.slice.call(arguments))):void r.apply(this,arguments)}function o(){if(!i&&(s=!0,!u)){for(u=!0;!i&&e>a&&s;)s=!1,t.call(this,a++,o,n);return u=!1,i?void r.apply(this,c):void(a>=e&&s&&(i=!0,r()))}}var a=0,i=!1,u=!1,s=!1,c=void 0;o()}function o(e,t,r){function n(e,t,n){i||(t?(i=!0,r(t)):(a[e]=n,i=++u===o,i&&r(null,a)))}var o=e.length,a=[];if(0===o)return r(null,a);var i=!1,u=0;e.forEach(function(e,r){t(e,r,function(e,t){n(r,e,t)})})}r.__esModule=!0,r.loopAsync=n,r.mapAsync=o},{}],36:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("./routerWarning"),i=o(a),u=e("./InternalPropTypes"),s={contextTypes:{history:u.history},componentWillMount:function(){"production"!==n.env.NODE_ENV?(0,i["default"])(!1,"the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin"):void 0,this.history=this.context.history}};r["default"]=s,t.exports=r["default"]}).call(this,e("_process"))},{"./InternalPropTypes":40,"./routerWarning":68,_process:33}],37:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=e("react"),i=n(a),u=e("./Link"),s=n(u),c=i["default"].createClass({displayName:"IndexLink",render:function(){return i["default"].createElement(s["default"],o({},this.props,{onlyActiveOnIndex:!0}))}});r["default"]=c,t.exports=r["default"]},{"./Link":42,react:"react"}],38:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("react"),i=o(a),u=e("./routerWarning"),s=o(u),c=e("invariant"),l=o(c),f=e("./Redirect"),p=o(f),d=e("./InternalPropTypes"),h=i["default"].PropTypes,y=h.string,v=h.object,m=i["default"].createClass({displayName:"IndexRedirect",statics:{createRouteFromReactElement:function(e,t){t?t.indexRoute=p["default"].createRouteFromReactElement(e):"production"!==n.env.NODE_ENV?(0,s["default"])(!1,"An <IndexRedirect> does not make sense at the root of your route config"):void 0}},propTypes:{to:y.isRequired,query:v,state:v,onEnter:d.falsy,children:d.falsy},render:function(){"production"!==n.env.NODE_ENV?(0,l["default"])(!1,"<IndexRedirect> elements are for router configuration only and should not be rendered"):(0,l["default"])(!1)}});r["default"]=m,t.exports=r["default"]}).call(this,e("_process"))},{"./InternalPropTypes":40,"./Redirect":45,"./routerWarning":68,_process:33,invariant:32,react:"react"}],39:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("react"),i=o(a),u=e("./routerWarning"),s=o(u),c=e("invariant"),l=o(c),f=e("./RouteUtils"),p=e("./InternalPropTypes"),d=i["default"].PropTypes.func,h=i["default"].createClass({displayName:"IndexRoute",statics:{createRouteFromReactElement:function(e,t){t?t.indexRoute=(0,f.createRouteFromReactElement)(e):"production"!==n.env.NODE_ENV?(0,s["default"])(!1,"An <IndexRoute> does not make sense at the root of your route config"):void 0}},propTypes:{path:p.falsy,component:p.component,components:p.components,getComponent:d,getComponents:d},render:function(){"production"!==n.env.NODE_ENV?(0,l["default"])(!1,"<IndexRoute> elements are for router configuration only and should not be rendered"):(0,l["default"])(!1)}});r["default"]=h,t.exports=r["default"]}).call(this,e("_process"))},{"./InternalPropTypes":40,"./RouteUtils":48,"./routerWarning":68,_process:33,invariant:32,react:"react"}],40:[function(e,t,r){"use strict";function n(e,t,r){return e[t]?new Error("<"+r+'> should not have a "'+t+'" prop'):void 0}r.__esModule=!0,r.routes=r.route=r.components=r.component=r.history=void 0,r.falsy=n;var o=e("react"),a=o.PropTypes.func,i=o.PropTypes.object,u=o.PropTypes.arrayOf,s=o.PropTypes.oneOfType,c=o.PropTypes.element,l=o.PropTypes.shape,f=o.PropTypes.string,p=(r.history=l({listen:a.isRequired,push:a.isRequired,replace:a.isRequired,go:a.isRequired,goBack:a.isRequired,goForward:a.isRequired}),r.component=s([a,f])),d=(r.components=s([p,i]),r.route=s([i,c]));r.routes=s([d,u(d)])},{react:"react"}],41:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("./routerWarning"),i=o(a),u=e("react"),s=o(u),c=e("invariant"),l=o(c),f=s["default"].PropTypes.object,p={contextTypes:{history:f.isRequired,route:f},propTypes:{route:f},componentDidMount:function(){"production"!==n.env.NODE_ENV?(0,i["default"])(!1,"the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin"):void 0,this.routerWillLeave?void 0:"production"!==n.env.NODE_ENV?(0,l["default"])(!1,"The Lifecycle mixin requires you to define a routerWillLeave method"):(0,l["default"])(!1);var e=this.props.route||this.context.route;e?void 0:"production"!==n.env.NODE_ENV?(0,l["default"])(!1,"The Lifecycle mixin must be used on either a) a <Route component> or b) a descendant of a <Route component> that uses the RouteContext mixin"):(0,l["default"])(!1),this._unlistenBeforeLeavingRoute=this.context.history.listenBeforeLeavingRoute(e,this.routerWillLeave)},componentWillUnmount:function(){this._unlistenBeforeLeavingRoute&&this._unlistenBeforeLeavingRoute()}};r["default"]=p,t.exports=r["default"]}).call(this,e("_process"))},{"./routerWarning":68,_process:33,invariant:32,react:"react"}],42:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function i(e){return 0===e.button}function u(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function s(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function c(e,t){var r=t.query,n=t.hash,o=t.state;return r||n||o?{pathname:e,query:r,hash:n,state:o}:e}r.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},f=e("react"),p=o(f),d=e("./routerWarning"),h=o(d),y=e("./PropTypes"),v=p["default"].PropTypes,m=v.bool,g=v.object,_=v.string,b=v.func,O=v.oneOfType,E=p["default"].createClass({displayName:"Link",contextTypes:{router:y.routerShape},propTypes:{to:O([_,g]).isRequired,query:g,hash:_,state:g,activeStyle:g,activeClassName:_,onlyActiveOnIndex:m.isRequired,onClick:b,target:_},getDefaultProps:function(){return{onlyActiveOnIndex:!1,style:{}}},handleClick:function(e){var t=!0;if(this.props.onClick&&this.props.onClick(e),!u(e)&&i(e)){if(e.defaultPrevented===!0&&(t=!1),this.props.target)return void(t||e.preventDefault());if(e.preventDefault(),t){var r=this.props,n=r.to,o=r.query,a=r.hash,s=r.state,l=c(n,{query:o,hash:a,state:s});this.context.router.push(l)}}},render:function(){var e=this.props,t=e.to,r=e.query,o=e.hash,i=e.state,u=e.activeClassName,f=e.activeStyle,d=e.onlyActiveOnIndex,y=a(e,["to","query","hash","state","activeClassName","activeStyle","onlyActiveOnIndex"]);"production"!==n.env.NODE_ENV?(0,h["default"])(!(r||o||i),"the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated"):void 0;var v=this.context.router;if(v){var m=c(t,{query:r,hash:o,state:i});y.href=v.createHref(m),(u||null!=f&&!s(f))&&v.isActive(m,d)&&(u&&(y.className?y.className+=" "+u:y.className=u),f&&(y.style=l({},y.style,f)))}return p["default"].createElement("a",l({},y,{onClick:this.handleClick}))}});r["default"]=E,t.exports=r["default"]}).call(this,e("_process"))},{"./PropTypes":44,"./routerWarning":68,_process:33,react:"react"}],43:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function a(e){for(var t="",r=[],n=[],a=void 0,i=0,u=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;a=u.exec(e);)a.index!==i&&(n.push(e.slice(i,a.index)),t+=o(e.slice(i,a.index))),a[1]?(t+="([^/]+)",r.push(a[1])):"**"===a[0]?(t+="(.*)",r.push("splat")):"*"===a[0]?(t+="(.*?)",r.push("splat")):"("===a[0]?t+="(?:":")"===a[0]&&(t+=")?"),n.push(a[0]),i=u.lastIndex;return i!==e.length&&(n.push(e.slice(i,e.length)),t+=o(e.slice(i,e.length))),{pattern:e,regexpSource:t,paramNames:r,tokens:n}}function i(e){return e in d||(d[e]=a(e)),d[e]}function u(e,t){"/"!==e.charAt(0)&&(e="/"+e);var r=i(e),n=r.regexpSource,o=r.paramNames,a=r.tokens;"/"!==e.charAt(e.length-1)&&(n+="/?"),"*"===a[a.length-1]&&(n+="$");var u=t.match(new RegExp("^"+n,"i"));if(null==u)return null;var s=u[0],c=t.substr(s.length);if(c){if("/"!==s.charAt(s.length-1))return null;c="/"+c}return{remainingPathname:c,paramNames:o,paramValues:u.slice(1).map(function(e){return e&&decodeURIComponent(e)})}}function s(e){return i(e).paramNames}function c(e,t){var r=u(e,t);if(!r)return null;var n=r.paramNames,o=r.paramValues,a={};return n.forEach(function(e,t){a[e]=o[t]}),a}function l(e,r){r=r||{};for(var n=i(e),o=n.tokens,a=0,u="",s=0,c=void 0,l=void 0,f=void 0,d=0,h=o.length;h>d;++d)c=o[d],"*"===c||"**"===c?(f=Array.isArray(r.splat)?r.splat[s++]:r.splat,null!=f||a>0?void 0:"production"!==t.env.NODE_ENV?(0,p["default"])(!1,'Missing splat #%s for path "%s"',s,e):(0,p["default"])(!1),null!=f&&(u+=encodeURI(f))):"("===c?a+=1:")"===c?a-=1:":"===c.charAt(0)?(l=c.substring(1),f=r[l],null!=f||a>0?void 0:"production"!==t.env.NODE_ENV?(0,p["default"])(!1,'Missing "%s" parameter for path "%s"',l,e):(0,p["default"])(!1),null!=f&&(u+=encodeURIComponent(f))):u+=c;return u.replace(/\/+/g,"/")}r.__esModule=!0,r.compilePattern=i,r.matchPattern=u,r.getParamNames=s,r.getParams=c,r.formatPattern=l;var f=e("invariant"),p=n(f),d={}}).call(this,e("_process"))},{_process:33,invariant:32}],44:[function(e,t,r){(function(t){"use strict";function n(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0,r.router=r.routes=r.route=r.components=r.component=r.location=r.history=r.falsy=r.locationShape=r.routerShape=void 0;var a=e("react"),i=e("./deprecateObjectProperties"),u=o(i),s=e("./InternalPropTypes"),c=n(s),l=e("./routerWarning"),f=o(l),p=a.PropTypes.func,d=a.PropTypes.object,h=a.PropTypes.shape,y=a.PropTypes.string,v=r.routerShape=h({push:p.isRequired,replace:p.isRequired,go:p.isRequired,goBack:p.isRequired,goForward:p.isRequired,setRouteLeaveHook:p.isRequired,isActive:p.isRequired}),m=r.locationShape=h({pathname:y.isRequired,search:y.isRequired,state:d,action:y.isRequired,key:y}),g=r.falsy=c.falsy,_=r.history=c.history,b=r.location=m,O=r.component=c.component,E=r.components=c.components,w=r.route=c.route,P=r.routes=c.routes,R=r.router=v;"production"!==t.env.NODE_ENV&&!function(){var e=function(e,r){return function(){return"production"!==t.env.NODE_ENV?(0,f["default"])(!1,r):void 0,e.apply(void 0,arguments)}},n=function(t){return e(t,"This prop type is not intended for external use, and was previously exported by mistake. These internal prop types are deprecated for external use, and will be removed in a later version.")},o=function(t,r){return e(t,"The `"+r+"` prop type is now exported as `"+r+"Shape` to avoid name conflicts. This export is deprecated and will be removed in a later version.")};r.falsy=g=n(g),r.history=_=n(_),r.component=O=n(O),r.components=E=n(E),r.route=w=n(w),r.routes=P=n(P),r.location=b=o(b,"location"),r.router=R=o(R,"router")}();var x={falsy:g,history:_,location:b,component:O,components:E,route:w,router:R};"production"!==t.env.NODE_ENV&&(x=(0,u["default"])(x,"The default export from `react-router/lib/PropTypes` is deprecated. Please use the named exports instead.")),r["default"]=x}).call(this,e("_process"))},{"./InternalPropTypes":40,"./deprecateObjectProperties":60,"./routerWarning":68,_process:33,react:"react"}],45:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("react"),i=o(a),u=e("invariant"),s=o(u),c=e("./RouteUtils"),l=e("./PatternUtils"),f=e("./InternalPropTypes"),p=i["default"].PropTypes,d=p.string,h=p.object,y=i["default"].createClass({displayName:"Redirect",statics:{createRouteFromReactElement:function(e){var t=(0,c.createRouteFromReactElement)(e);return t.from&&(t.path=t.from),t.onEnter=function(e,r){var n=e.location,o=e.params,a=void 0;if("/"===t.to.charAt(0))a=(0,l.formatPattern)(t.to,o);else if(t.to){var i=e.routes.indexOf(t),u=y.getRoutePattern(e.routes,i-1),s=u.replace(/\/*$/,"/")+t.to;a=(0,l.formatPattern)(s,o)}else a=n.pathname;r({pathname:a,query:t.query||n.query,state:t.state||n.state})},t},getRoutePattern:function(e,t){for(var r="",n=t;n>=0;n--){var o=e[n],a=o.path||"";if(r=a.replace(/\/*$/,"/")+r,0===a.indexOf("/"))break}return"/"+r}},propTypes:{path:d,from:d,to:d.isRequired,query:h,state:h,onEnter:f.falsy,children:f.falsy},render:function(){"production"!==n.env.NODE_ENV?(0,s["default"])(!1,"<Redirect> elements are for router configuration only and should not be rendered"):(0,s["default"])(!1)}});r["default"]=y,t.exports=r["default"]}).call(this,e("_process"))},{"./InternalPropTypes":40,"./PatternUtils":43,"./RouteUtils":48,_process:33,invariant:32,react:"react"}],46:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("react"),i=o(a),u=e("invariant"),s=o(u),c=e("./RouteUtils"),l=e("./InternalPropTypes"),f=i["default"].PropTypes,p=f.string,d=f.func,h=i["default"].createClass({displayName:"Route",statics:{createRouteFromReactElement:c.createRouteFromReactElement},propTypes:{path:p,component:l.component,components:l.components,getComponent:d,getComponents:d},render:function(){"production"!==n.env.NODE_ENV?(0,s["default"])(!1,"<Route> elements are for router configuration only and should not be rendered"):(0,s["default"])(!1)}});r["default"]=h,t.exports=r["default"]}).call(this,e("_process"))},{"./InternalPropTypes":40,"./RouteUtils":48,_process:33,invariant:32,react:"react"}],47:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("./routerWarning"),i=o(a),u=e("react"),s=o(u),c=s["default"].PropTypes.object,l={propTypes:{route:c.isRequired},childContextTypes:{route:c.isRequired},getChildContext:function(){return{route:this.props.route}},componentWillMount:function(){"production"!==n.env.NODE_ENV?(0,i["default"])(!1,"The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin"):void 0}};r["default"]=l,t.exports=r["default"]}).call(this,e("_process"))},{"./routerWarning":68,_process:33,react:"react"}],48:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){return null==e||d["default"].isValidElement(e)}function a(e){return o(e)||Array.isArray(e)&&e.every(o)}function i(e,r,n){e=e||"UnknownComponent";for(var o in r)if(Object.prototype.hasOwnProperty.call(r,o)){var a=r[o](n,o,e);a instanceof Error&&("production"!==t.env.NODE_ENV?(0,y["default"])(!1,a.message):void 0)}}function u(e,t){return f({},e,t)}function s(e){var t=e.type,r=u(t.defaultProps,e.props);if(t.propTypes&&i(t.displayName||t.name,t.propTypes,r),r.children){var n=c(r.children,r);n.length&&(r.childRoutes=n),delete r.children}return r}function c(e,t){var r=[];return d["default"].Children.forEach(e,function(e){if(d["default"].isValidElement(e))if(e.type.createRouteFromReactElement){var n=e.type.createRouteFromReactElement(e,t);n&&r.push(n)}else r.push(s(e))}),r}function l(e){return a(e)?e=c(e):e&&!Array.isArray(e)&&(e=[e]),e}r.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};r.isReactChildren=a,r.createRouteFromReactElement=s,r.createRoutesFromReactChildren=c,r.createRoutes=l;var p=e("react"),d=n(p),h=e("./routerWarning"),y=n(h)}).call(this,e("_process"))},{"./routerWarning":68,_process:33,react:"react"}],49:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function i(e){return!e||!e.__v2_compatible__}r.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=e("history/lib/createHashHistory"),c=o(s),l=e("history/lib/useQueries"),f=o(l),p=e("react"),d=o(p),h=e("./createTransitionManager"),y=o(h),v=e("./InternalPropTypes"),m=e("./RouterContext"),g=o(m),_=e("./RouteUtils"),b=e("./RouterUtils"),O=e("./routerWarning"),E=o(O),w=d["default"].PropTypes,P=w.func,R=w.object,x=d["default"].createClass({displayName:"Router",propTypes:{history:R,children:v.routes,routes:v.routes,render:P,createElement:P,onError:P,onUpdate:P,matchContext:R},getDefaultProps:function(){return{render:function(e){return d["default"].createElement(g["default"],e)}}},getInitialState:function(){return{location:null,routes:null,params:null,components:null}},handleError:function(e){if(!this.props.onError)throw e;this.props.onError.call(this,e)},componentWillMount:function(){var e=this,t=this.props,r=t.parseQueryString,o=t.stringifyQuery;"production"!==n.env.NODE_ENV?(0,E["default"])(!(r||o),"`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring"):void 0;var a=this.createRouterObjects(),i=a.history,u=a.transitionManager,s=a.router;this._unlisten=u.listen(function(t,r){t?e.handleError(t):e.setState(r,e.props.onUpdate)}),this.history=i,this.router=s},createRouterObjects:function(){var e=this.props.matchContext;if(e)return e;var t=this.props.history,r=this.props,n=r.routes,o=r.children;i(t)&&(t=this.wrapDeprecatedHistory(t));var a=(0,y["default"])(t,(0,_.createRoutes)(n||o)),u=(0,b.createRouterObject)(t,a),s=(0,b.createRoutingHistory)(t,a);return{history:s,transitionManager:a,router:u}},wrapDeprecatedHistory:function(e){var t=this.props,r=t.parseQueryString,o=t.stringifyQuery,a=void 0;return e?("production"!==n.env.NODE_ENV?(0,E["default"])(!1,"It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by React Router with `import { browserHistory } from 'react-router'` or `import { hashHistory } from 'react-router'`. If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details."):void 0,a=function(){return e}):("production"!==n.env.NODE_ENV?(0,E["default"])(!1,"`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory"):void 0,a=c["default"]),(0,f["default"])(a)({parseQueryString:r,stringifyQuery:o})},componentWillReceiveProps:function(e){"production"!==n.env.NODE_ENV?(0,E["default"])(e.history===this.props.history,"You cannot change <Router history>; it will be ignored"):void 0,"production"!==n.env.NODE_ENV?(0,E["default"])((e.routes||e.children)===(this.props.routes||this.props.children),"You cannot change <Router routes>; it will be ignored"):void 0},componentWillUnmount:function(){this._unlisten&&this._unlisten()},render:function j(){var e=this.state,t=e.location,r=e.routes,n=e.params,o=e.components,i=this.props,s=i.createElement,j=i.render,c=a(i,["createElement","render"]);return null==t?null:(Object.keys(x.propTypes).forEach(function(e){return delete c[e]}),j(u({},c,{history:this.history,router:this.router,location:t,routes:r,params:n,components:o,createElement:s})))}});r["default"]=x,t.exports=r["default"]}).call(this,e("_process"))},{"./InternalPropTypes":40,"./RouteUtils":48,"./RouterContext":50,"./RouterUtils":51,"./createTransitionManager":59,"./routerWarning":68,_process:33,"history/lib/createHashHistory":23,"history/lib/useQueries":30,react:"react"}],50:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e;
},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},u=e("invariant"),s=o(u),c=e("react"),l=o(c),f=e("./deprecateObjectProperties"),p=o(f),d=e("./getRouteParams"),h=o(d),y=e("./RouteUtils"),v=e("./routerWarning"),m=o(v),g=l["default"].PropTypes,_=g.array,b=g.func,O=g.object,E=l["default"].createClass({displayName:"RouterContext",propTypes:{history:O,router:O.isRequired,location:O.isRequired,routes:_.isRequired,params:O.isRequired,components:_.isRequired,createElement:b.isRequired},getDefaultProps:function(){return{createElement:l["default"].createElement}},childContextTypes:{history:O,location:O.isRequired,router:O.isRequired},getChildContext:function(){var e=this.props,t=e.router,r=e.history,o=e.location;return t||("production"!==n.env.NODE_ENV?(0,m["default"])(!1,"`<RouterContext>` expects a `router` rather than a `history`"):void 0,t=i({},r,{setRouteLeaveHook:r.listenBeforeLeavingRoute}),delete t.listenBeforeLeavingRoute),"production"!==n.env.NODE_ENV&&(o=(0,p["default"])(o,"`context.location` is deprecated, please use a route component's `props.location` instead. http://tiny.cc/router-accessinglocation")),{history:r,location:o,router:t}},createElement:function(e,t){return null==e?null:this.props.createElement(e,t)},render:function(){var e=this,t=this.props,r=t.history,o=t.location,u=t.routes,c=t.params,f=t.components,p=null;return f&&(p=f.reduceRight(function(t,n,s){if(null==n)return t;var l=u[s],f=(0,h["default"])(l,c),p={history:r,location:o,params:c,route:l,routeParams:f,routes:u};if((0,y.isReactChildren)(t))p.children=t;else if(t)for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&(p[d]=t[d]);if("object"===("undefined"==typeof n?"undefined":a(n))){var v={};for(var m in n)Object.prototype.hasOwnProperty.call(n,m)&&(v[m]=e.createElement(n[m],i({key:m},p)));return v}return e.createElement(n,p)},p)),null===p||p===!1||l["default"].isValidElement(p)?void 0:"production"!==n.env.NODE_ENV?(0,s["default"])(!1,"The root route must render a single element"):(0,s["default"])(!1),p}});r["default"]=E,t.exports=r["default"]}).call(this,e("_process"))},{"./RouteUtils":48,"./deprecateObjectProperties":60,"./getRouteParams":62,"./routerWarning":68,_process:33,invariant:32,react:"react"}],51:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){return i({},e,{setRouteLeaveHook:t.listenBeforeLeavingRoute,isActive:t.isActive})}function a(e,r){return e=i({},e,r),"production"!==t.env.NODE_ENV&&(e=(0,s["default"])(e,"`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges")),e}r.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};r.createRouterObject=o,r.createRoutingHistory=a;var u=e("./deprecateObjectProperties"),s=n(u)}).call(this,e("_process"))},{"./deprecateObjectProperties":60,_process:33}],52:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var a=e("react"),i=o(a),u=e("./RouterContext"),s=o(u),c=e("./routerWarning"),l=o(c),f=i["default"].createClass({displayName:"RoutingContext",componentWillMount:function(){"production"!==n.env.NODE_ENV?(0,l["default"])(!1,"`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from 'react-router'`. http://tiny.cc/router-routercontext"):void 0},render:function(){return i["default"].createElement(s["default"],this.props)}});r["default"]=f,t.exports=r["default"]}).call(this,e("_process"))},{"./RouterContext":50,"./routerWarning":68,_process:33,react:"react"}],53:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,r){return function(){for(var n=arguments.length,o=Array(n),a=0;n>a;a++)o[a]=arguments[a];if(e.apply(t,o),e.length<r){var i=o[o.length-1];i()}}}function a(e){return e.reduce(function(e,t){return t.onEnter&&e.push(o(t.onEnter,t,3)),e},[])}function i(e){return e.reduce(function(e,t){return t.onChange&&e.push(o(t.onChange,t,4)),e},[])}function u(e,r,n){function o(e,r,n){return r?("production"!==t.env.NODE_ENV?(0,d["default"])(!1,"`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated"):void 0,void(a={pathname:r,query:n,state:e})):void(a=e)}if(!e)return void n();var a=void 0;(0,f.loopAsync)(e,function(e,t,n){r(e,o,function(e){e||a?n(e,a):t()})},n)}function s(e,t,r){var n=a(e);return u(n.length,function(e,r,o){n[e](t,r,o)},r)}function c(e,t,r,n){var o=i(e);return u(o.length,function(e,n,a){o[e](t,r,n,a)},n)}function l(e){for(var t=0,r=e.length;r>t;++t)e[t].onLeave&&e[t].onLeave.call(e[t])}r.__esModule=!0,r.runEnterHooks=s,r.runChangeHooks=c,r.runLeaveHooks=l;var f=e("./AsyncUtils"),p=e("./routerWarning"),d=n(p)}).call(this,e("_process"))},{"./AsyncUtils":35,"./routerWarning":68,_process:33}],54:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a=e("react"),i=n(a),u=e("./RouterContext"),s=n(u);r["default"]=function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];var n=t.map(function(e){return e.renderRouterContext}).filter(function(e){return e}),u=t.map(function(e){return e.renderRouteComponent}).filter(function(e){return e}),c=function(){var e=arguments.length<=0||void 0===arguments[0]?a.createElement:arguments[0];return function(t,r){return u.reduceRight(function(e,t){return t(e,r)},e(t,r))}};return function(e){return n.reduceRight(function(t,r){return r(t,e)},i["default"].createElement(s["default"],o({},e,{createElement:c(e.createElement)})))}},t.exports=r["default"]},{"./RouterContext":50,react:"react"}],55:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("history/lib/createBrowserHistory"),a=n(o),i=e("./createRouterHistory"),u=n(i);r["default"]=(0,u["default"])(a["default"]),t.exports=r["default"]},{"./createRouterHistory":58,"history/lib/createBrowserHistory":21}],56:[function(e,t,r){"use strict";function n(e,t,r){if(!e.path)return!1;var n=(0,a.getParamNames)(e.path);return n.some(function(e){return t.params[e]!==r.params[e]})}function o(e,t){var r=e&&e.routes,o=t.routes,a=void 0,i=void 0,u=void 0;return r?!function(){var s=!1;a=r.filter(function(r){if(s)return!0;var a=-1===o.indexOf(r)||n(r,e,t);return a&&(s=!0),a}),a.reverse(),u=[],i=[],o.forEach(function(e){var t=-1===r.indexOf(e),n=-1!==a.indexOf(e);t||n?u.push(e):i.push(e)})}():(a=[],i=[],u=o),{leaveRoutes:a,changeRoutes:i,enterRoutes:u}}r.__esModule=!0;var a=e("./PatternUtils");r["default"]=o,t.exports=r["default"]},{"./PatternUtils":43}],57:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,l["default"])(e),r=function(){return t},n=(0,i["default"])((0,s["default"])(r))(e);return n.__v2_compatible__=!0,n}r.__esModule=!0,r["default"]=o;var a=e("history/lib/useQueries"),i=n(a),u=e("history/lib/useBasename"),s=n(u),c=e("history/lib/createMemoryHistory"),l=n(c);t.exports=r["default"]},{"history/lib/createMemoryHistory":26,"history/lib/useBasename":29,"history/lib/useQueries":30}],58:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0,r["default"]=function(e){var t=void 0;return i&&(t=(0,a["default"])(e)()),t};var o=e("./useRouterHistory"),a=n(o),i=!("undefined"==typeof window||!window.document||!window.document.createElement);t.exports=r["default"]},{"./useRouterHistory":69}],59:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function i(e,t){function r(t){var r=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],o=arguments.length<=2||void 0===arguments[2]?null:arguments[2],a=void 0;return r&&r!==!0||null!==o?("production"!==n.env.NODE_ENV?(0,c["default"])(!1,"`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated"):void 0,t={pathname:t,query:r},a=o||!1):(t=e.createLocation(t),a=r),(0,y["default"])(t,a,w.location,w.routes,w.params)}function o(t){return e.createLocation(t,l.REPLACE)}function i(e,r){P&&P.location===e?s(P,r):(0,_["default"])(t,e,function(t,n){t?r(t):n?s(u({},n,{location:e}),r):r()})}function s(e,t){function r(r,o){return r||o?n(r,o):void(0,m["default"])(e,function(r,n){r?t(r):t(null,null,w=u({},e,{components:n}))})}function n(e,r){e?t(e):t(null,o(r))}var a=(0,p["default"])(w,e),i=a.leaveRoutes,s=a.changeRoutes,c=a.enterRoutes;(0,d.runLeaveHooks)(i),i.filter(function(e){return-1===c.indexOf(e)}).forEach(b),(0,d.runChangeHooks)(s,w,e,function(t,o){return t||o?n(t,o):void(0,d.runEnterHooks)(c,e,r)})}function f(e){var t=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];return e.__id__||t&&(e.__id__=R++)}function h(e){return e.reduce(function(e,t){return e.push.apply(e,x[f(t)]),e},[])}function v(e,r){(0,_["default"])(t,e,function(t,n){if(null==n)return void r();P=u({},n,{location:e});for(var o=h((0,p["default"])(w,P).leaveRoutes),a=void 0,i=0,s=o.length;null==a&&s>i;++i)a=o[i](e);r(a)})}function g(){if(w.routes){for(var e=h(w.routes),t=void 0,r=0,n=e.length;"string"!=typeof t&&n>r;++r)t=e[r]();return t}}function b(e){var t=f(e,!1);t&&(delete x[t],a(x)||(j&&(j(),j=null),N&&(N(),N=null)))}function O(t,r){var o=f(t),i=x[o];if(i)-1===i.indexOf(r)&&("production"!==n.env.NODE_ENV?(0,c["default"])(!1,"adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead"):void 0,i.push(r));else{var u=!a(x);x[o]=[r],u&&(j=e.listenBefore(v),e.listenBeforeUnload&&(N=e.listenBeforeUnload(g)))}return function(){var e=x[o];if(e){var n=e.filter(function(e){return e!==r});0===n.length?b(t):x[o]=n}}}function E(t){return e.listen(function(r){w.location===r?t(null,w):i(r,function(o,a,i){o?t(o):a?e.transitionTo(a):i?t(null,i):"production"!==n.env.NODE_ENV?(0,c["default"])(!1,'Location "%s" did not match any routes',r.pathname+r.search+r.hash):void 0})})}var w={},P=void 0,R=1,x=Object.create(null),j=void 0,N=void 0;return{isActive:r,match:i,listenBeforeLeavingRoute:O,listen:E}}r.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};r["default"]=i;var s=e("./routerWarning"),c=o(s),l=e("history/lib/Actions"),f=e("./computeChangedRoutes"),p=o(f),d=e("./TransitionUtils"),h=e("./isActive"),y=o(h),v=e("./getComponents"),m=o(v),g=e("./matchRoutes"),_=o(g);t.exports=r["default"]}).call(this,e("_process"))},{"./TransitionUtils":53,"./computeChangedRoutes":56,"./getComponents":61,"./isActive":65,"./matchRoutes":67,"./routerWarning":68,_process:33,"history/lib/Actions":15}],60:[function(e,t,r){(function(t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0,r.canUseMembrane=void 0;var o=e("./routerWarning"),a=n(o),i=r.canUseMembrane=!1,u=function(e){return e};if("production"!==t.env.NODE_ENV){try{Object.defineProperty({},"x",{get:function(){return!0}}).x&&(r.canUseMembrane=i=!0)}catch(s){}i&&(u=function(e,r){var n={},o=function(o){return Object.prototype.hasOwnProperty.call(e,o)?"function"==typeof e[o]?(n[o]=function(){return"production"!==t.env.NODE_ENV?(0,a["default"])(!1,r):void 0,e[o].apply(e,arguments)},"continue"):void Object.defineProperty(n,o,{get:function(){return"production"!==t.env.NODE_ENV?(0,a["default"])(!1,r):void 0,e[o]}}):"continue"};for(var i in e){o(i)}return n})}r["default"]=u}).call(this,e("_process"))},{"./routerWarning":68,_process:33}],61:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t,r){if(t.component||t.components)return void r(null,t.component||t.components);var o=t.getComponent||t.getComponents;if(!o)return void r();var a=e.location,i=void 0;if("production"!==n.env.NODE_ENV&&c.canUseMembrane){i=u({},e);var s=function(e){return Object.prototype.hasOwnProperty.call(a,e)?void Object.defineProperty(i,e,{get:function(){return"production"!==n.env.NODE_ENV?(0,f["default"])(!1,"Accessing location properties from the first argument to `getComponent` and `getComponents` is deprecated. That argument is now the router state (`nextState`) rather than the location. To access the location, use `nextState.location`."):void 0,a[e]}}):"continue"};for(var l in a){s(l)}}else i=u({},e,a);o.call(t,i,r)}function i(e,t){(0,s.mapAsync)(e.routes,function(t,r,n){a(e,t,n)},t)}r.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=e("./AsyncUtils"),c=e("./deprecateObjectProperties"),l=e("./routerWarning"),f=o(l);r["default"]=i,t.exports=r["default"]}).call(this,e("_process"))},{"./AsyncUtils":35,"./deprecateObjectProperties":60,"./routerWarning":68,_process:33}],62:[function(e,t,r){"use strict";function n(e,t){var r={};if(!e.path)return r;var n=(0,o.getParamNames)(e.path);for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&-1!==n.indexOf(a)&&(r[a]=t[a]);return r}r.__esModule=!0;var o=e("./PatternUtils");r["default"]=n,t.exports=r["default"]},{"./PatternUtils":43}],63:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("history/lib/createHashHistory"),a=n(o),i=e("./createRouterHistory"),u=n(i);r["default"]=(0,u["default"])(a["default"]),t.exports=r["default"]},{"./createRouterHistory":58,"history/lib/createHashHistory":23}],64:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0,r.createMemoryHistory=r.hashHistory=r.browserHistory=r.applyRouterMiddleware=r.formatPattern=r.useRouterHistory=r.match=r.routerShape=r.locationShape=r.PropTypes=r.RoutingContext=r.RouterContext=r.createRoutes=r.useRoutes=r.RouteContext=r.Lifecycle=r.History=r.Route=r.Redirect=r.IndexRoute=r.IndexRedirect=r.withRouter=r.IndexLink=r.Link=r.Router=void 0;var o=e("./RouteUtils");Object.defineProperty(r,"createRoutes",{enumerable:!0,get:function(){return o.createRoutes}});var a=e("./PropTypes");Object.defineProperty(r,"locationShape",{enumerable:!0,get:function(){return a.locationShape}}),Object.defineProperty(r,"routerShape",{enumerable:!0,get:function(){return a.routerShape}});var i=e("./PatternUtils");Object.defineProperty(r,"formatPattern",{enumerable:!0,get:function(){return i.formatPattern}});var u=e("./Router"),s=n(u),c=e("./Link"),l=n(c),f=e("./IndexLink"),p=n(f),d=e("./withRouter"),h=n(d),y=e("./IndexRedirect"),v=n(y),m=e("./IndexRoute"),g=n(m),_=e("./Redirect"),b=n(_),O=e("./Route"),E=n(O),w=e("./History"),P=n(w),R=e("./Lifecycle"),x=n(R),j=e("./RouteContext"),N=n(j),M=e("./useRoutes"),T=n(M),k=e("./RouterContext"),C=n(k),S=e("./RoutingContext"),H=n(S),A=n(a),U=e("./match"),D=n(U),q=e("./useRouterHistory"),L=n(q),V=e("./applyRouterMiddleware"),I=n(V),W=e("./browserHistory"),B=n(W),Q=e("./hashHistory"),F=n(Q),K=e("./createMemoryHistory"),Y=n(K);r.Router=s["default"],r.Link=l["default"],r.IndexLink=p["default"],r.withRouter=h["default"],r.IndexRedirect=v["default"],r.IndexRoute=g["default"],r.Redirect=b["default"],r.Route=E["default"],r.History=P["default"],r.Lifecycle=x["default"],r.RouteContext=N["default"],r.useRoutes=T["default"],r.RouterContext=C["default"],r.RoutingContext=H["default"],r.PropTypes=A["default"],r.match=D["default"],r.useRouterHistory=L["default"],r.applyRouterMiddleware=I["default"],r.browserHistory=B["default"],r.hashHistory=F["default"],r.createMemoryHistory=Y["default"]},{"./History":36,"./IndexLink":37,"./IndexRedirect":38,"./IndexRoute":39,"./Lifecycle":41,"./Link":42,"./PatternUtils":43,"./PropTypes":44,"./Redirect":45,"./Route":46,"./RouteContext":47,"./RouteUtils":48,"./Router":49,"./RouterContext":50,"./RoutingContext":52,"./applyRouterMiddleware":54,"./browserHistory":55,"./createMemoryHistory":57,"./hashHistory":63,"./match":66,"./useRouterHistory":69,"./useRoutes":70,"./withRouter":71}],65:[function(e,t,r){"use strict";function n(e,t){if(e==t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,r){return n(e,t[r])});if("object"===("undefined"==typeof e?"undefined":s(e))){for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r))if(void 0===e[r]){if(void 0!==t[r])return!1}else{if(!Object.prototype.hasOwnProperty.call(t,r))return!1;if(!n(e[r],t[r]))return!1}return!0}return String(e)===String(t)}function o(e,t){return"/"!==t.charAt(0)&&(t="/"+t),"/"!==e.charAt(e.length-1)&&(e+="/"),"/"!==t.charAt(t.length-1)&&(t+="/"),t===e}function a(e,t,r){for(var n=e,o=[],a=[],i=0,u=t.length;u>i;++i){var s=t[i],l=s.path||"";if("/"===l.charAt(0)&&(n=e,o=[],a=[]),null!==n&&l){var f=(0,c.matchPattern)(l,n);if(f?(n=f.remainingPathname,o=[].concat(o,f.paramNames),a=[].concat(a,f.paramValues)):n=null,""===n)return o.every(function(e,t){return String(a[t])===String(r[e])})}}return!1}function i(e,t){return null==t?null==e:null==e?!0:n(e,t)}function u(e,t,r,n,u){var s=e.pathname,c=e.query;return null==r?!1:("/"!==s.charAt(0)&&(s="/"+s),o(s,r.pathname)||!t&&a(s,n,u)?i(c,r.query):!1)}r.__esModule=!0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};r["default"]=u;var c=e("./PatternUtils");t.exports=r["default"]},{"./PatternUtils":43}],66:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function i(e,t){var r=e.history,o=e.routes,i=e.location,s=a(e,["history","routes","location"]);r||i?void 0:"production"!==n.env.NODE_ENV?(0,c["default"])(!1,"match needs a history or a location"):(0,c["default"])(!1),r=r?r:(0,f["default"])(s);var l=(0,d["default"])(r,(0,h.createRoutes)(o)),p=void 0;i?i=r.createLocation(i):p=r.listen(function(e){i=e});var v=(0,y.createRouterObject)(r,l);r=(0,y.createRoutingHistory)(r,l),l.match(i,function(e,n,o){t(e,n,o&&u({},o,{history:r,router:v,matchContext:{history:r,transitionManager:l,router:v}})),p&&p()})}r.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=e("invariant"),c=o(s),l=e("./createMemoryHistory"),f=o(l),p=e("./createTransitionManager"),d=o(p),h=e("./RouteUtils"),y=e("./RouterUtils");r["default"]=i,t.exports=r["default"]}).call(this,e("_process"))},{"./RouteUtils":48,"./RouterUtils":51,"./createMemoryHistory":57,"./createTransitionManager":59,_process:33,invariant:32}],67:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t,r){if(e.childRoutes)return[null,e.childRoutes];if(!e.getChildRoutes)return[];var n=!0,o=void 0;return e.getChildRoutes(t,function(e,t){return t=!e&&(0,m.createRoutes)(t),n?void(o=[e,t]):void r(e,t)}),n=!1,o}function i(e,t,r){e.indexRoute?r(null,e.indexRoute):e.getIndexRoute?e.getIndexRoute(t,function(e,t){r(e,!e&&(0,m.createRoutes)(t)[0])}):e.childRoutes?!function(){var n=e.childRoutes.filter(function(e){return!e.path});(0,y.loopAsync)(n.length,function(e,r,o){i(n[e],t,function(t,a){if(t||a){var i=[n[e]].concat(Array.isArray(a)?a:[a]);o(t,i)}else r()})},function(e,t){r(null,t)})}():r()}function u(e,t,r){return t.reduce(function(e,t,n){var o=r&&r[n];return Array.isArray(e[t])?e[t].push(o):t in e?e[t]=[e[t],o]:e[t]=o,e},e)}function s(e,t){return u({},e,t)}function c(e,t,r,o,u,c){var f=e.path||"";if("/"===f.charAt(0)&&(r=t.pathname,o=[],u=[]),null!==r&&f){var d=(0,v.matchPattern)(f,r);if(d?(r=d.remainingPathname,o=[].concat(o,d.paramNames),u=[].concat(u,d.paramValues)):r=null,""===r){var y=function(){var r={routes:[e],params:s(o,u)};return i(e,t,function(e,t){if(e)c(e);else{if(Array.isArray(t)){var o;"production"!==n.env.NODE_ENV?(0,h["default"])(t.every(function(e){return!e.path}),"Index routes should not have paths"):void 0,(o=r.routes).push.apply(o,t)}else t&&("production"!==n.env.NODE_ENV?(0,h["default"])(!t.path,"Index routes should not have paths"):void 0,r.routes.push(t));c(null,r)}}),{v:void 0}}();if("object"===("undefined"==typeof y?"undefined":p(y)))return y.v}}if(null!=r||e.childRoutes){var m=function(n,a){n?c(n):a?l(a,t,function(t,r){t?c(t):r?(r.routes.unshift(e),c(null,r)):c()},r,o,u):c()},g=a(e,t,m);g&&m.apply(void 0,g)}else c()}function l(e,t,r,n){var o=arguments.length<=4||void 0===arguments[4]?[]:arguments[4],a=arguments.length<=5||void 0===arguments[5]?[]:arguments[5];void 0===n&&("/"!==t.pathname.charAt(0)&&(t=f({},t,{pathname:"/"+t.pathname})),n=t.pathname),(0,y.loopAsync)(e.length,function(r,i,u){c(e[r],t,n,o,a,function(e,t){e||t?u(e,t):i()})},r)}r.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};r["default"]=l;var d=e("./routerWarning"),h=o(d),y=e("./AsyncUtils"),v=e("./PatternUtils"),m=e("./RouteUtils");t.exports=r["default"]}).call(this,e("_process"))},{"./AsyncUtils":35,"./PatternUtils":43,"./RouteUtils":48,"./routerWarning":68,_process:33}],68:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(-1!==t.indexOf("deprecated")){if(s[t])return;s[t]=!0}t="[react-router] "+t;for(var r=arguments.length,n=Array(r>2?r-2:0),o=2;r>o;o++)n[o-2]=arguments[o];u["default"].apply(void 0,[e,t].concat(n))}function a(){s={}}r.__esModule=!0,r["default"]=o,r._resetWarned=a;var i=e("warning"),u=n(i),s={}},{warning:73}],69:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){return function(t){var r=(0,i["default"])((0,s["default"])(e))(t);return r.__v2_compatible__=!0,r}}r.__esModule=!0,r["default"]=o;var a=e("history/lib/useQueries"),i=n(a),u=e("history/lib/useBasename"),s=n(u);t.exports=r["default"]},{"history/lib/useBasename":29,"history/lib/useQueries":30}],70:[function(e,t,r){(function(n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function a(e,t){var r={};for(var n in e)t.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=e[n]);return r}function i(e){return"production"!==n.env.NODE_ENV?(0,d["default"])(!1,"`useRoutes` is deprecated. Please use `createTransitionManager` instead."):void 0,function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=t.routes,n=a(t,["routes"]),o=(0,c["default"])(e)(n),i=(0,f["default"])(o,r);return u({},o,i)}}r.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s=e("history/lib/useQueries"),c=o(s),l=e("./createTransitionManager"),f=o(l),p=e("./routerWarning"),d=o(p);r["default"]=i,t.exports=r["default"]}).call(this,e("_process"))},{"./createTransitionManager":59,"./routerWarning":68,_process:33,"history/lib/useQueries":30}],71:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.displayName||e.name||"Component"}function a(e){var t=s["default"].createClass({displayName:"WithRouter",contextTypes:{router:f.routerShape},render:function(){return s["default"].createElement(e,i({},this.props,{router:this.context.router}))}});return t.displayName="withRouter("+o(e)+")",t.WrappedComponent=e,(0,l["default"])(t,e)}r.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};r["default"]=a;var u=e("react"),s=n(u),c=e("hoist-non-react-statics"),l=n(c),f=e("./PropTypes");t.exports=r["default"]},{"./PropTypes":44,"hoist-non-react-statics":31,react:"react"}],72:[function(e,t,r){"use strict";t.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}},{}],73:[function(e,t,r){(function(e){"use strict";var r=function(){};"production"!==e.env.NODE_ENV&&(r=function(e,t,r){var n=arguments.length;r=new Array(n>2?n-2:0);for(var o=2;n>o;o++)r[o-2]=arguments[o];if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");if(t.length<10||/^[s\W]*$/.test(t))throw new Error("The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: "+t);if(!e){var a=0,i="Warning: "+t.replace(/%s/g,function(){return r[a++]});"undefined"!=typeof console&&console.error(i);try{throw new Error(i)}catch(u){}}}),t.exports=r}).call(this,e("_process"))},{_process:33}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMubWluLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfcmVhY3REb20iLCJfcmVhY3REb20yIiwiX2FqYXgiLCJfYWpheDIiLCJfTGF5b3V0IiwiX0xheW91dDIiLCJteVN0ciIsImFwcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkYXRhRmlsZSIsImhlYWRlcnMiLCJDb250ZW50LXR5cGUiLCJ0aGVuIiwicmVzdWx0cyIsIl9KU09OJHBhcnNlIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5uZXJIVE1MIiwidGl0bGUiLCJuYXZiYXIiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiYWxlcnQiLCIuL2NvbXBvbmVudHMvTGF5b3V0IiwiLi91dGlscy9hamF4IiwicmVhY3QiLCJyZWFjdC1kb20iLCJyZWFjdC1yb3V0ZXIiLCIyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGVmaW5lUHJvcGVydHkiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX05hdmJhciIsIl9OYXZiYXIyIiwiX0J1dHRvblBhbmVsIiwiX0J1dHRvblBhbmVsMiIsIkxheW91dCIsIl9SZWFjdCRDb21wb25lbnQiLCJ0aGlzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInN0YXRlIiwidGV4dCIsImlucHV0Q2hhbmdlZCIsImJpbmQiLCJzZXRTdGF0ZSIsIm5hdkl0ZW1zIiwidHlwZSIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJ2YWx1ZXMiLCJDb21wb25lbnQiLCIuL2hvbWUvQnV0dG9uUGFuZWwiLCIuL25hdmJhci9OYXZiYXIiLCIzIiwiX015YnV0dG9uIiwiX015YnV0dG9uMiIsImJ1dHRvbkNsYXNzZXMiLCJCdXR0b25QYW5lbCIsImJ1dHRvbkNsaWNrZWQiLCJfdGhpczIiLCJidXR0b25zTGlzdCIsInNwbGl0IiwibWFwIiwiY2FsbGJhY2siLCJjbGFzcyIsIi4vTXlidXR0b24iLCI0IiwiTXlidXR0b24iLCJjbGFzc05hbWUiLCJvbkNsaWNrIiwiNSIsIkJyYW5kIiwiaHJlZiIsInBhdGgiLCJhY3RpdmUiLCI2IiwiQnJhbmRJbWciLCJzdHlsZXMiLCJwYWRkaW5nIiwic3R5bGUiLCJzcmMiLCJpbWciLCI3IiwiTmF2IiwiOCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYXJndW1lbnRzIiwic291cmNlIiwiaGFzT3duUHJvcGVydHkiLCJfQnJhbmQiLCJfQnJhbmQyIiwiX0JyYW5kSW1nIiwiX0JyYW5kSW1nMiIsIl9OYXYiLCJfTmF2MiIsIl9NZW51IiwiX01lbnUyIiwiTmF2YmFyIiwibmF2Q2xpY2tlZCIsImV2ZW50IiwiX3RoaXMzIiwibmF2cyIsInByb2ZpbGVzIiwiZW1haWxzIiwiLi9CcmFuZCIsIi4vQnJhbmRJbWciLCIuL05hdiIsIi4vZHJvcGRvd24vTWVudSIsIjkiLCJEcm9wZG93bkl0ZW0iLCJ1cmwiLCIxMCIsIl9JdGVtIiwiX0l0ZW0yIiwiRHJvcGRvd25NZW51IiwiZGF0YS10b2dnbGUiLCJyb2xlIiwiYXJpYS1oYXNwb3B1cCIsImFyaWEtZXhwYW5kZWQiLCIuL0l0ZW0iLCIxMSIsImFqYXgiLCJtZXRob2QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInhtbGh0dHAiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJzdHJpbmdpZnkiLCJkZWZhdWx0SGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwiX2tleSIsInNlbmQiLCIxMiIsImlzVW5kZWZpbmVkT3JOdWxsIiwidW5kZWZpbmVkIiwiaXNCdWZmZXIiLCJ4IiwiY29weSIsInNsaWNlIiwib2JqRXF1aXYiLCJiIiwib3B0cyIsImlzQXJndW1lbnRzIiwicFNsaWNlIiwiZGVlcEVxdWFsIiwia2EiLCJvYmplY3RLZXlzIiwia2IiLCJzb3J0IiwiQXJyYXkiLCJhY3R1YWwiLCJleHBlY3RlZCIsIkRhdGUiLCJnZXRUaW1lIiwic3RyaWN0IiwiLi9saWIvaXNfYXJndW1lbnRzLmpzIiwiLi9saWIva2V5cy5qcyIsIjEzIiwic3VwcG9ydGVkIiwib2JqZWN0IiwidG9TdHJpbmciLCJ1bnN1cHBvcnRlZCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3VwcG9ydHNBcmd1bWVudHNDbGFzcyIsIjE0Iiwic2hpbSIsImtleXMiLCJwdXNoIiwiMTUiLCJQVVNIIiwiUkVQTEFDRSIsIlBPUCIsIjE2IiwibG9vcEFzeW5jIiwidHVybnMiLCJ3b3JrIiwiZG9uZSIsImlzRG9uZSIsInN5bmMiLCJkb25lQXJncyIsImNvbmNhdCIsIl9zbGljZSIsImFwcGx5IiwibmV4dCIsImhhc05leHQiLCJjdXJyZW50VHVybiIsIjE3IiwicHJvY2VzcyIsImNyZWF0ZUtleSIsIktleVByZWZpeCIsInNhdmVTdGF0ZSIsIndpbmRvdyIsInNlc3Npb25TdG9yYWdlIiwicmVtb3ZlSXRlbSIsInNldEl0ZW0iLCJlcnJvciIsIm5hbWUiLCJTZWN1cml0eUVycm9yIiwiZW52IiwiTk9ERV9FTlYiLCJfd2FybmluZzIiLCJRdW90YUV4Y2VlZGVkRXJyb3JzIiwiaW5kZXhPZiIsInJlYWRTdGF0ZSIsImpzb24iLCJnZXRJdGVtIiwiX3dhcm5pbmciLCJfcHJvY2VzcyIsIndhcm5pbmciLCIxOCIsImFkZEV2ZW50TGlzdGVuZXIiLCJub2RlIiwibGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldEhhc2hQYXRoIiwibG9jYXRpb24iLCJyZXBsYWNlSGFzaFBhdGgiLCJyZXBsYWNlIiwicGF0aG5hbWUiLCJzZWFyY2giLCJnZXRXaW5kb3dQYXRoIiwiaGFzaCIsImdvIiwiaGlzdG9yeSIsImdldFVzZXJDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiY29uZmlybSIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCIxOSIsImNhblVzZURPTSIsIjIwIiwiZXh0cmFjdFBhdGgiLCJzdHJpbmciLCJtYXRjaCIsInN1YnN0cmluZyIsInBhcnNlUGF0aCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiMjEiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdldEN1cnJlbnRMb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl9ET01VdGlscyIsIl9oaXN0b3J5U3RhdGUiLCJfRE9NU3RhdGVTdG9yYWdlIiwiaXNTdXBwb3J0ZWQiLCJyZXBsYWNlU3RhdGUiLCJfUGF0aFV0aWxzIiwiY3JlYXRlTG9jYXRpb24iLCJzdGFydFBvcFN0YXRlTGlzdGVuZXIiLCJfcmVmIiwicG9wU3RhdGVMaXN0ZW5lciIsInRyYW5zaXRpb25UbyIsImZpbmlzaFRyYW5zaXRpb24iLCJiYXNlbmFtZSIsImFjdGlvbiIsIl9BY3Rpb25zIiwidXNlUmVmcmVzaCIsInB1c2hTdGF0ZSIsImxpc3RlbkJlZm9yZSIsImxpc3RlbmVyQ291bnQiLCJzdG9wUG9wU3RhdGVMaXN0ZW5lciIsInVubGlzdGVuIiwibGlzdGVuIiwicmVnaXN0ZXJUcmFuc2l0aW9uSG9vayIsImhvb2siLCJ1bnJlZ2lzdGVyVHJhbnNpdGlvbkhvb2siLCJvcHRpb25zIiwiX0V4ZWN1dGlvbkVudmlyb25tZW50IiwiX2ludmFyaWFudDIiLCJmb3JjZVJlZnJlc2giLCJfY3JlYXRlRE9NSGlzdG9yeTIiLCJfaW52YXJpYW50IiwiX2NyZWF0ZURPTUhpc3RvcnkiLCIuL0FjdGlvbnMiLCIuL0RPTVN0YXRlU3RvcmFnZSIsIi4vRE9NVXRpbHMiLCIuL0V4ZWN1dGlvbkVudmlyb25tZW50IiwiLi9QYXRoVXRpbHMiLCIuL2NyZWF0ZURPTUhpc3RvcnkiLCJpbnZhcmlhbnQiLCIyMiIsImNyZWF0ZURPTUhpc3RvcnkiLCJfY3JlYXRlSGlzdG9yeTIiLCJfY3JlYXRlSGlzdG9yeSIsIi4vY3JlYXRlSGlzdG9yeSIsIjIzIiwiaXNBYnNvbHV0ZVBhdGgiLCJjaGFyQXQiLCJlbnN1cmVTbGFzaCIsImFkZFF1ZXJ5U3RyaW5nVmFsdWVUb1BhdGgiLCJzdHJpcFF1ZXJ5U3RyaW5nVmFsdWVGcm9tUGF0aCIsIlJlZ0V4cCIsImdldFF1ZXJ5U3RyaW5nVmFsdWVGcm9tUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwicXVlcnlLZXkiLCJzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lciIsImhhc2hDaGFuZ2VMaXN0ZW5lciIsImN1cnJlbnRIYXNoIiwic3RvcEhhc2hDaGFuZ2VMaXN0ZW5lciIsImdvSXNTdXBwb3J0ZWRXaXRob3V0UmVsb2FkIiwiY3JlYXRlSHJlZiIsIkRlZmF1bHRRdWVyeUtleSIsIjI0IiwiY3JlYXRlUmFuZG9tS2V5IiwiTWF0aCIsInJhbmRvbSIsInN1YnN0ciIsImxvY2F0aW9uc0FyZUVxdWFsIiwiX2RlZXBFcXVhbDIiLCJjcmVhdGVIaXN0b3J5IiwidHJhbnNpdGlvbkhvb2tzIiwiZmlsdGVyIiwiaXRlbSIsImdldEN1cnJlbnQiLCJwZW5kaW5nTG9jYXRpb24iLCJhbGxLZXlzIiwidXBkYXRlTG9jYXRpb24iLCJuZXdMb2NhdGlvbiIsImN1cnJlbnQiLCJjaGFuZ2VMaXN0ZW5lcnMiLCJmb3JFYWNoIiwiX2xvY2F0aW9uIiwiY29uZmlybVRyYW5zaXRpb25UbyIsIl9Bc3luY1V0aWxzIiwiaW5kZXgiLCJfcnVuVHJhbnNpdGlvbkhvb2syIiwicmVzdWx0Iiwib2siLCJuZXh0TG9jYXRpb24iLCJwcmV2UGF0aCIsImNyZWF0ZVBhdGgiLCJuZXh0UGF0aCIsInByZXZJbmRleCIsIm5leHRJbmRleCIsImdvQmFjayIsImdvRm9yd2FyZCIsImtleUxlbmd0aCIsIl9jcmVhdGVMb2NhdGlvbjMiLCJ1cGRhdGVMb2NhdGlvblN0YXRlIiwiRGVmYXVsdEtleUxlbmd0aCIsIl9kZXByZWNhdGUyIiwiX2RlZXBFcXVhbCIsIl9jcmVhdGVMb2NhdGlvbjIiLCJfcnVuVHJhbnNpdGlvbkhvb2siLCJfZGVwcmVjYXRlIiwiLi9Bc3luY1V0aWxzIiwiLi9jcmVhdGVMb2NhdGlvbiIsIi4vZGVwcmVjYXRlIiwiLi9ydW5UcmFuc2l0aW9uSG9vayIsImRlZXAtZXF1YWwiLCIyNSIsIl9mb3VydGhBcmciLCIyNiIsImNyZWF0ZVN0YXRlU3RvcmFnZSIsImVudHJpZXMiLCJlbnRyeSIsInJlZHVjZSIsIm1lbW8iLCJjcmVhdGVNZW1vcnlIaXN0b3J5Iiwic3RvcmFnZSIsImNhbkdvIiwiY3VycmVudExvY2F0aW9uIiwic3BsaWNlIiwiaXNBcnJheSIsIl9vcHRpb25zIiwiMjciLCJkZXByZWNhdGUiLCJmbiIsIjI4IiwicnVuVHJhbnNpdGlvbkhvb2siLCIyOSIsInVzZUJhc2VuYW1lIiwiY2hlY2tCYXNlSHJlZiIsImNoZWNrZWRCYXNlSHJlZiIsImJhc2UiLCJiYXNlSHJlZiIsImdldEF0dHJpYnV0ZSIsImFkZEJhc2VuYW1lIiwicHJlcGVuZEJhc2VuYW1lIiwicG5hbWUiLCJub3JtYWxpemVkQmFzZW5hbWUiLCJub3JtYWxpemVkUGF0aG5hbWUiLCJfbGVuIiwiYXJncyIsIjMwIiwiZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5IiwicXVlcnkiLCJfcXVlcnlTdHJpbmciLCJpc05lc3RlZE9iamVjdCIsInAiLCJ1c2VRdWVyaWVzIiwiYWRkUXVlcnkiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwiU0VBUkNIX0JBU0VfS0VZIiwic2VhcmNoQmFzZSIsImFwcGVuZFF1ZXJ5IiwiX2V4dGVuZHMyIiwic2VhcmNoQmFzZVNwZWMiLCJxdWVyeVN0cmluZyIsInN0cmluZ2lmeVF1ZXJ5IiwiZnVsbExvY2F0aW9uIiwiZGVmYXVsdFBhcnNlUXVlcnlTdHJpbmciLCJxdWVyeS1zdHJpbmciLCIzMSIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5IiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIjMyIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYyIsImQiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwiMzMiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwicXVldWVJbmRleCIsImRyYWluUXVldWUiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImxlbiIsInJ1biIsImNsZWFyVGltZW91dCIsIkl0ZW0iLCJmdW4iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIjM0Iiwic3RyaWN0VXJpRW5jb2RlIiwiZXh0cmFjdCIsInN0ciIsInRyaW0iLCJyZXQiLCJwYXJhbSIsInBhcnRzIiwic2hpZnQiLCJ2YWwiLCJqb2luIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidmFsMiIsInN0cmljdC11cmktZW5jb2RlIiwiMzUiLCJtYXBBc3luYyIsImRvbmVDb3VudCIsIjM2IiwiX3JvdXRlcldhcm5pbmciLCJfcm91dGVyV2FybmluZzIiLCJfSW50ZXJuYWxQcm9wVHlwZXMiLCJIaXN0b3J5IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29udGV4dCIsIi4vSW50ZXJuYWxQcm9wVHlwZXMiLCIuL3JvdXRlcldhcm5pbmciLCIzNyIsIl9MaW5rIiwiX0xpbmsyIiwiSW5kZXhMaW5rIiwiY3JlYXRlQ2xhc3MiLCJvbmx5QWN0aXZlT25JbmRleCIsIi4vTGluayIsIjM4IiwiX1JlZGlyZWN0IiwiX1JlZGlyZWN0MiIsIl9SZWFjdCRQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJJbmRleFJlZGlyZWN0Iiwic3RhdGljcyIsImNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCIsImVsZW1lbnQiLCJwYXJlbnRSb3V0ZSIsImluZGV4Um91dGUiLCJ0byIsImlzUmVxdWlyZWQiLCJvbkVudGVyIiwiZmFsc3kiLCJjaGlsZHJlbiIsIi4vUmVkaXJlY3QiLCIzOSIsIl9Sb3V0ZVV0aWxzIiwiZnVuYyIsIkluZGV4Um91dGUiLCJjb21wb25lbnQiLCJjb21wb25lbnRzIiwiZ2V0Q29tcG9uZW50IiwiZ2V0Q29tcG9uZW50cyIsIi4vUm91dGVVdGlscyIsIjQwIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicm91dGVzIiwicm91dGUiLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCI0MSIsIkxpZmVjeWNsZSIsImNvbXBvbmVudERpZE1vdW50Iiwicm91dGVyV2lsbExlYXZlIiwiX3VubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlIiwibGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCI0MiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImlzTGVmdENsaWNrRXZlbnQiLCJidXR0b24iLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiaXNFbXB0eU9iamVjdCIsImNyZWF0ZUxvY2F0aW9uRGVzY3JpcHRvciIsIl9Qcm9wVHlwZXMiLCJib29sIiwiTGluayIsInJvdXRlciIsInJvdXRlclNoYXBlIiwiYWN0aXZlU3R5bGUiLCJhY3RpdmVDbGFzc05hbWUiLCJoYW5kbGVDbGljayIsImFsbG93VHJhbnNpdGlvbiIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsIl9wcm9wcyIsIl9wcm9wczIiLCJpc0FjdGl2ZSIsIi4vUHJvcFR5cGVzIiwiNDMiLCJlc2NhcGVSZWdFeHAiLCJfY29tcGlsZVBhdHRlcm4iLCJwYXR0ZXJuIiwicmVnZXhwU291cmNlIiwicGFyYW1OYW1lcyIsInRva2VucyIsImxhc3RJbmRleCIsIm1hdGNoZXIiLCJleGVjIiwiY29tcGlsZVBhdHRlcm4iLCJDb21waWxlZFBhdHRlcm5zQ2FjaGUiLCJtYXRjaFBhdHRlcm4iLCJfY29tcGlsZVBhdHRlcm4yIiwibWF0Y2hlZFBhdGgiLCJyZW1haW5pbmdQYXRobmFtZSIsInBhcmFtVmFsdWVzIiwidiIsImdldFBhcmFtTmFtZXMiLCJnZXRQYXJhbXMiLCJwYXJhbXMiLCJwYXJhbU5hbWUiLCJmb3JtYXRQYXR0ZXJuIiwiX2NvbXBpbGVQYXR0ZXJuMyIsInBhcmVuQ291bnQiLCJzcGxhdEluZGV4IiwidG9rZW4iLCJwYXJhbVZhbHVlIiwic3BsYXQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCI0NCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwibmV3T2JqIiwibG9jYXRpb25TaGFwZSIsIl9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzIiwiX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMyIiwiSW50ZXJuYWxQcm9wVHlwZXMiLCJzZXRSb3V0ZUxlYXZlSG9vayIsImRlcHJlY2F0ZVByb3BUeXBlIiwicHJvcFR5cGUiLCJkZXByZWNhdGVJbnRlcm5hbFByb3BUeXBlIiwiZGVwcmVjYXRlUmVuYW1lZFByb3BUeXBlIiwiZGVmYXVsdEV4cG9ydCIsIi4vZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyIsIjQ1IiwiX1BhdHRlcm5VdGlscyIsIlJlZGlyZWN0IiwiZnJvbSIsIm5leHRTdGF0ZSIsInJvdXRlSW5kZXgiLCJwYXJlbnRQYXR0ZXJuIiwiZ2V0Um91dGVQYXR0ZXJuIiwiLi9QYXR0ZXJuVXRpbHMiLCI0NiIsIlJvdXRlIiwiNDciLCJSb3V0ZUNvbnRleHQiLCJnZXRDaGlsZENvbnRleHQiLCI0OCIsImlzVmFsaWRDaGlsZCIsImlzVmFsaWRFbGVtZW50IiwiaXNSZWFjdENoaWxkcmVuIiwiZXZlcnkiLCJjaGVja1Byb3BUeXBlcyIsImNyZWF0ZVJvdXRlIiwiY2hpbGRSb3V0ZXMiLCJjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbiIsIkNoaWxkcmVuIiwiY3JlYXRlUm91dGVzIiwiNDkiLCJpc0RlcHJlY2F0ZWRIaXN0b3J5IiwiX192Ml9jb21wYXRpYmxlX18iLCJfY3JlYXRlSGFzaEhpc3RvcnkiLCJfY3JlYXRlSGFzaEhpc3RvcnkyIiwiX3VzZVF1ZXJpZXMiLCJfdXNlUXVlcmllczIiLCJfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyIiwiX1JvdXRlckNvbnRleHQiLCJfUm91dGVyQ29udGV4dDIiLCJfUm91dGVyVXRpbHMiLCJSb3V0ZXIiLCJvbkVycm9yIiwib25VcGRhdGUiLCJtYXRjaENvbnRleHQiLCJnZXRJbml0aWFsU3RhdGUiLCJoYW5kbGVFcnJvciIsIl9jcmVhdGVSb3V0ZXJPYmplY3RzIiwiY3JlYXRlUm91dGVyT2JqZWN0cyIsInRyYW5zaXRpb25NYW5hZ2VyIiwiX3VubGlzdGVuIiwid3JhcERlcHJlY2F0ZWRIaXN0b3J5IiwiY3JlYXRlUm91dGVyT2JqZWN0Iiwicm91dGluZ0hpc3RvcnkiLCJjcmVhdGVSb3V0aW5nSGlzdG9yeSIsIl9wcm9wczMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiX3N0YXRlIiwiX3Byb3BzNCIsIi4vUm91dGVyQ29udGV4dCIsIi4vUm91dGVyVXRpbHMiLCIuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwiaGlzdG9yeS9saWIvY3JlYXRlSGFzaEhpc3RvcnkiLCJoaXN0b3J5L2xpYi91c2VRdWVyaWVzIiwiNTAiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfZ2V0Um91dGVQYXJhbXMiLCJfZ2V0Um91dGVQYXJhbXMyIiwiUm91dGVyQ29udGV4dCIsInJlZHVjZVJpZ2h0Iiwicm91dGVQYXJhbXMiLCJwcm9wIiwiZWxlbWVudHMiLCIuL2dldFJvdXRlUGFyYW1zIiwiNTEiLCI1MiIsIlJvdXRpbmdDb250ZXh0IiwiNTMiLCJjcmVhdGVUcmFuc2l0aW9uSG9vayIsImFzeW5jQXJpdHkiLCJnZXRFbnRlckhvb2tzIiwiaG9va3MiLCJnZXRDaGFuZ2VIb29rcyIsInJ1blRyYW5zaXRpb25Ib29rcyIsIml0ZXIiLCJkZXByZWNhdGVkUGF0aG5hbWUiLCJkZXByZWNhdGVkUXVlcnkiLCJyZWRpcmVjdEluZm8iLCJydW5FbnRlckhvb2tzIiwicnVuQ2hhbmdlSG9va3MiLCJydW5MZWF2ZUhvb2tzIiwib25MZWF2ZSIsIjU0IiwibWlkZGxld2FyZXMiLCJ3aXRoQ29udGV4dCIsIm0iLCJyZW5kZXJSb3V0ZXJDb250ZXh0Iiwid2l0aENvbXBvbmVudCIsInJlbmRlclJvdXRlQ29tcG9uZW50IiwibWFrZUNyZWF0ZUVsZW1lbnQiLCJiYXNlQ3JlYXRlRWxlbWVudCIsInByZXZpb3VzIiwicmVuZGVyUHJvcHMiLCI1NSIsIl9jcmVhdGVCcm93c2VySGlzdG9yeSIsIl9jcmVhdGVCcm93c2VySGlzdG9yeTIiLCJfY3JlYXRlUm91dGVySGlzdG9yeSIsIl9jcmVhdGVSb3V0ZXJIaXN0b3J5MiIsIi4vY3JlYXRlUm91dGVySGlzdG9yeSIsImhpc3RvcnkvbGliL2NyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiNTYiLCJyb3V0ZVBhcmFtc0NoYW5nZWQiLCJwcmV2U3RhdGUiLCJzb21lIiwiY29tcHV0ZUNoYW5nZWRSb3V0ZXMiLCJwcmV2Um91dGVzIiwibmV4dFJvdXRlcyIsImxlYXZlUm91dGVzIiwiY2hhbmdlUm91dGVzIiwiZW50ZXJSb3V0ZXMiLCJwYXJlbnRJc0xlYXZpbmciLCJpc0xlYXZpbmciLCJyZXZlcnNlIiwiaXNOZXciLCJwYXJhbXNDaGFuZ2VkIiwiNTciLCJtZW1vcnlIaXN0b3J5IiwiX2NyZWF0ZU1lbW9yeUhpc3RvcnkyIiwiX3VzZUJhc2VuYW1lMiIsIl91c2VCYXNlbmFtZSIsIl9jcmVhdGVNZW1vcnlIaXN0b3J5IiwiaGlzdG9yeS9saWIvY3JlYXRlTWVtb3J5SGlzdG9yeSIsImhpc3RvcnkvbGliL3VzZUJhc2VuYW1lIiwiNTgiLCJfdXNlUm91dGVySGlzdG9yeTIiLCJfdXNlUm91dGVySGlzdG9yeSIsIi4vdXNlUm91dGVySGlzdG9yeSIsIjU5IiwiaGFzQW55UHJvcGVydGllcyIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwiaW5kZXhPbmx5T3JEZXByZWNhdGVkUXVlcnkiLCJkZXByZWNhdGVkSW5kZXhPbmx5IiwiaW5kZXhPbmx5IiwiX2lzQWN0aXZlMyIsImNyZWF0ZUxvY2F0aW9uRnJvbVJlZGlyZWN0SW5mbyIsInBhcnRpYWxOZXh0U3RhdGUiLCJmaW5pc2hNYXRjaCIsIl9tYXRjaFJvdXRlczIiLCJmaW5pc2hFbnRlckhvb2tzIiwiaGFuZGxlRXJyb3JPclJlZGlyZWN0IiwiX2dldENvbXBvbmVudHMyIiwiX2NvbXB1dGVDaGFuZ2VkUm91dGVzIiwiX2NvbXB1dGVDaGFuZ2VkUm91dGVzMyIsIl9UcmFuc2l0aW9uVXRpbHMiLCJyZW1vdmVMaXN0ZW5CZWZvcmVIb29rc0ZvclJvdXRlIiwiZ2V0Um91dGVJRCIsIl9faWRfXyIsIlJvdXRlR3VpZCIsImdldFJvdXRlSG9va3NGb3JSb3V0ZXMiLCJSb3V0ZUhvb2tzIiwidHJhbnNpdGlvbkhvb2siLCJiZWZvcmVVbmxvYWRIb29rIiwicm91dGVJRCIsInVubGlzdGVuQmVmb3JlIiwidW5saXN0ZW5CZWZvcmVVbmxvYWQiLCJ0aGVyZVdlcmVOb1JvdXRlSG9va3MiLCJsaXN0ZW5CZWZvcmVVbmxvYWQiLCJuZXdIb29rcyIsInJlZGlyZWN0TG9jYXRpb24iLCJfY29tcHV0ZUNoYW5nZWRSb3V0ZXMyIiwiX2lzQWN0aXZlMiIsIl9nZXRDb21wb25lbnRzIiwiX21hdGNoUm91dGVzIiwiLi9UcmFuc2l0aW9uVXRpbHMiLCIuL2NvbXB1dGVDaGFuZ2VkUm91dGVzIiwiLi9nZXRDb21wb25lbnRzIiwiLi9pc0FjdGl2ZSIsIi4vbWF0Y2hSb3V0ZXMiLCJoaXN0b3J5L2xpYi9BY3Rpb25zIiwiNjAiLCJjYW5Vc2VNZW1icmFuZSIsImRlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMiLCJnZXQiLCJtZW1icmFuZSIsIl9sb29wIiwiNjEiLCJnZXRDb21wb25lbnRzRm9yUm91dGUiLCJuZXh0U3RhdGVXaXRoTG9jYXRpb24iLCI2MiIsImdldFJvdXRlUGFyYW1zIiwiNjMiLCI2NCIsImhhc2hIaXN0b3J5IiwiYnJvd3Nlckhpc3RvcnkiLCJhcHBseVJvdXRlck1pZGRsZXdhcmUiLCJ1c2VSb3V0ZXJIaXN0b3J5IiwidXNlUm91dGVzIiwid2l0aFJvdXRlciIsIl9Qcm9wVHlwZXMyIiwiX1JvdXRlcjIiLCJfUm91dGVyMyIsIl9MaW5rMyIsIl9JbmRleExpbmsyIiwiX0luZGV4TGluazMiLCJfd2l0aFJvdXRlcjIiLCJfd2l0aFJvdXRlcjMiLCJfSW5kZXhSZWRpcmVjdDIiLCJfSW5kZXhSZWRpcmVjdDMiLCJfSW5kZXhSb3V0ZTIiLCJfSW5kZXhSb3V0ZTMiLCJfUmVkaXJlY3QzIiwiX1JvdXRlMiIsIl9Sb3V0ZTMiLCJfSGlzdG9yeTIiLCJfSGlzdG9yeTMiLCJfTGlmZWN5Y2xlMiIsIl9MaWZlY3ljbGUzIiwiX1JvdXRlQ29udGV4dDIiLCJfUm91dGVDb250ZXh0MyIsIl91c2VSb3V0ZXMyIiwiX3VzZVJvdXRlczMiLCJfUm91dGVyQ29udGV4dDMiLCJfUm91dGluZ0NvbnRleHQyIiwiX1JvdXRpbmdDb250ZXh0MyIsIl9Qcm9wVHlwZXMzIiwiX21hdGNoMiIsIl9tYXRjaDMiLCJfdXNlUm91dGVySGlzdG9yeTMiLCJfYXBwbHlSb3V0ZXJNaWRkbGV3YXJlMiIsIl9hcHBseVJvdXRlck1pZGRsZXdhcmUzIiwiX2Jyb3dzZXJIaXN0b3J5MiIsIl9icm93c2VySGlzdG9yeTMiLCJfaGFzaEhpc3RvcnkyIiwiX2hhc2hIaXN0b3J5MyIsIl9jcmVhdGVNZW1vcnlIaXN0b3J5MyIsIi4vSGlzdG9yeSIsIi4vSW5kZXhMaW5rIiwiLi9JbmRleFJlZGlyZWN0IiwiLi9JbmRleFJvdXRlIiwiLi9MaWZlY3ljbGUiLCIuL1JvdXRlIiwiLi9Sb3V0ZUNvbnRleHQiLCIuL1JvdXRlciIsIi4vUm91dGluZ0NvbnRleHQiLCIuL2FwcGx5Um91dGVyTWlkZGxld2FyZSIsIi4vYnJvd3Nlckhpc3RvcnkiLCIuL2NyZWF0ZU1lbW9yeUhpc3RvcnkiLCIuL2hhc2hIaXN0b3J5IiwiLi9tYXRjaCIsIi4vdXNlUm91dGVzIiwiLi93aXRoUm91dGVyIiwiNjUiLCJTdHJpbmciLCJwYXRoSXNBY3RpdmUiLCJjdXJyZW50UGF0aG5hbWUiLCJyb3V0ZUlzQWN0aXZlIiwibWF0Y2hlZCIsInF1ZXJ5SXNBY3RpdmUiLCJhY3RpdmVRdWVyeSIsIjY2IiwiaGlzdG9yeUxvY2F0aW9uIiwiNjciLCJnZXRDaGlsZFJvdXRlcyIsImdldEluZGV4Um91dGUiLCJwYXRobGVzcyIsImNoaWxkUm91dGUiLCJlcnIiLCJhc3NpZ25QYXJhbXMiLCJjcmVhdGVQYXJhbXMiLCJtYXRjaFJvdXRlRGVlcCIsIl9yZXQyIiwiX21hdGNoJHJvdXRlcyIsIm9uQ2hpbGRSb3V0ZXMiLCJtYXRjaFJvdXRlcyIsInVuc2hpZnQiLCI2OCIsInJvdXRlcldhcm5pbmciLCJmYWxzZVRvV2FybiIsIndhcm5lZCIsIl9yZXNldFdhcm5lZCIsIjY5IiwiNzAiLCI3MSIsImdldERpc3BsYXlOYW1lIiwiV3JhcHBlZENvbXBvbmVudCIsIldpdGhSb3V0ZXIiLCJfaG9pc3ROb25SZWFjdFN0YXRpY3MyIiwiX2hvaXN0Tm9uUmVhY3RTdGF0aWNzIiwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MiLCI3MiIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIjczIiwidGVzdCIsImNvbnNvbGUiXSwibWFwcGluZ3MiOiJDQUFBLFFBQVVBLEdBQUVDLEVBQUVDLEVBQUVDLEdBQUcsUUFBU0MsR0FBRUMsRUFBRUMsR0FBRyxJQUFJSixFQUFFRyxHQUFHLENBQUMsSUFBSUosRUFBRUksR0FBRyxDQUFDLEdBQUlFLEdBQWtCLGtCQUFUQyxVQUFxQkEsT0FBUSxLQUFJRixHQUFHQyxFQUFFLE1BQU9BLEdBQUVGLEdBQUUsRUFBSSxJQUFHSSxFQUFFLE1BQU9BLEdBQUVKLEdBQUUsRUFBSSxJQUFJSyxHQUFFLEdBQUlDLE9BQU0sdUJBQXVCTixFQUFFLElBQUssTUFBTUssR0FBRUUsS0FBSyxtQkFBbUJGLEVBQUUsR0FBSUcsR0FBRVgsRUFBRUcsSUFBSVMsV0FBWWIsR0FBRUksR0FBRyxHQUFHVSxLQUFLRixFQUFFQyxRQUFRLFNBQVNkLEdBQUcsR0FBSUUsR0FBRUQsRUFBRUksR0FBRyxHQUFHTCxFQUFHLE9BQU9JLEdBQUVGLEVBQUVBLEVBQUVGLElBQUlhLEVBQUVBLEVBQUVDLFFBQVFkLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsTUFBT0QsR0FBRUcsR0FBR1MsUUFBa0QsSUFBSSxHQUExQ0wsR0FBa0Isa0JBQVRELFVBQXFCQSxRQUFnQkgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxHQUFJLE9BQU9ELEtBQUthLEdBQUcsU0FBU1Qs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TCxFQUFPSixRQUFVbVEsSUFFZGxRLEtBQUs2RSxLQUFLcEYsRUFBUSxlQUNsQndRLFNBQVcsVUFBVSIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3JlYWN0Um91dGVyID0gcmVxdWlyZShcInJlYWN0LXJvdXRlclwiKTtcblxudmFyIF9hamF4ID0gcmVxdWlyZShcIi4vdXRpbHMvYWpheFwiKTtcblxudmFyIF9hamF4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FqYXgpO1xuXG52YXIgX0xheW91dCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTGF5b3V0XCIpO1xuXG52YXIgX0xheW91dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MYXlvdXQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBSZXN0IG9mIHRoZSBhcHAncyBzY3JpcHRzIGdvZXMgaGVyZVxudmFyIG15U3RyID0gXCJhIHNhbXBsZSBzdHJpbmdcIjtcbnZhciBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKTtcblxudmFyIGRhdGFGaWxlID0gXCJhcHAvZGF0YS5qc29uXCI7XG52YXIgaGVhZGVycyA9IHtcbiAgXCJDb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbn07XG5cbigwLCBfYWpheDIuZGVmYXVsdCkoXCJHRVRcIiwgZGF0YUZpbGUsIGhlYWRlcnMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgdmFyIF9KU09OJHBhcnNlID0gSlNPTi5wYXJzZShyZXN1bHRzKTtcblxuICB2YXIgZGF0YSA9IF9KU09OJHBhcnNlLmRhdGE7XG5cbiAgLy8gU2V0IHBhZ2UgdGl0bGVcblxuICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdLmlubmVySFRNTCA9IGRhdGEudGl0bGU7XG5cbiAgdmFyIG5hdmJhciA9IGRhdGEubmF2YmFyO1xuXG4gIF9yZWFjdERvbTIuZGVmYXVsdC5yZW5kZXIoX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xheW91dDIuZGVmYXVsdCwgeyBkYXRhOiBteVN0ciwgbmF2YmFyOiBuYXZiYXIgfSksIGFwcCk7XG59KS5jYXRjaChhbGVydCk7XG5cbn0se1wiLi9jb21wb25lbnRzL0xheW91dFwiOjIsXCIuL3V0aWxzL2FqYXhcIjoxMSxcInJlYWN0XCI6XCJyZWFjdFwiLFwicmVhY3QtZG9tXCI6XCJyZWFjdC1kb21cIixcInJlYWN0LXJvdXRlclwiOjY0fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfTmF2YmFyID0gcmVxdWlyZShcIi4vbmF2YmFyL05hdmJhclwiKTtcblxudmFyIF9OYXZiYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTmF2YmFyKTtcblxudmFyIF9CdXR0b25QYW5lbCA9IHJlcXVpcmUoXCIuL2hvbWUvQnV0dG9uUGFuZWxcIik7XG5cbnZhciBfQnV0dG9uUGFuZWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQnV0dG9uUGFuZWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBMYXlvdXQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGF5b3V0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMYXlvdXQocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGF5b3V0KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihMYXlvdXQpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLnN0YXRlID0geyB0ZXh0OiBfdGhpcy5wcm9wcy5kYXRhIH07XG5cbiAgICBfdGhpcy5pbnB1dENoYW5nZWQgPSBfdGhpcy5pbnB1dENoYW5nZWQuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKExheW91dCwgW3tcbiAgICBrZXk6IFwiaW5wdXRDaGFuZ2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlucHV0Q2hhbmdlZChlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdGV4dDogZS50YXJnZXQudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICBudWxsLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTmF2YmFyMi5kZWZhdWx0LCB7IG5hdkl0ZW1zOiB0aGlzLnByb3BzLm5hdmJhciB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJwXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBcIllvdXIgSW5wdXQ6IFwiLFxuICAgICAgICAgIHRoaXMuc3RhdGUudGV4dFxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHsgdHlwZTogXCJ0ZXh0XCIsIHZhbHVlOiB0aGlzLnN0YXRlLnRleHQsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IFwiYSBwbGFjZWhvbGRlclwiLCBvbkNoYW5nZTogdGhpcy5pbnB1dENoYW5nZWQgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b25QYW5lbDIuZGVmYXVsdCwgeyB2YWx1ZXM6IHRoaXMuc3RhdGUudGV4dCB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTGF5b3V0O1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTGF5b3V0O1xuXG59LHtcIi4vaG9tZS9CdXR0b25QYW5lbFwiOjMsXCIuL25hdmJhci9OYXZiYXJcIjo4LFwicmVhY3RcIjpcInJlYWN0XCJ9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9NeWJ1dHRvbiA9IHJlcXVpcmUoXCIuL015YnV0dG9uXCIpO1xuXG52YXIgX015YnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX015YnV0dG9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgYnV0dG9uQ2xhc3NlcyA9IFtcImJ0bi1kYW5nZXJcIiwgXCJidG4tc3VjY2Vzc1wiLCBcImJ0bi13YXJuaW5nXCIsIFwiYnRuLWluZm9cIiwgXCJidG4tcHJpbWFyeVwiLCBcImJ0bi1ibG9nXCIsIFwiYnRuLWRlZmF1bHRcIl07XG5cbnZhciBCdXR0b25QYW5lbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCdXR0b25QYW5lbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uUGFuZWwocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnV0dG9uUGFuZWwpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJ1dHRvblBhbmVsKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5idXR0b25DbGlja2VkID0gX3RoaXMuYnV0dG9uQ2xpY2tlZC5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQnV0dG9uUGFuZWwsIFt7XG4gICAga2V5OiBcImJ1dHRvbkNsaWNrZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYnV0dG9uQ2xpY2tlZChrZXkpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIllvdSBjbGlja2VkIGJ1dHRvbiBcIiArIChrZXkgKyAxKSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBidXR0b25zTGlzdCA9IHRoaXMucHJvcHMudmFsdWVzLnNwbGl0KFwiIFwiKS5tYXAoZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NeWJ1dHRvbjIuZGVmYXVsdCwgeyB2YWx1ZTogZSwga2V5OiBpLCBjYWxsYmFjazogX3RoaXMyLmJ1dHRvbkNsaWNrZWQoaSksXG4gICAgICAgICAgXCJjbGFzc1wiOiBidXR0b25DbGFzc2VzW2kgJSBidXR0b25DbGFzc2VzLmxlbmd0aF0gfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICBudWxsLFxuICAgICAgICBidXR0b25zTGlzdFxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnV0dG9uUGFuZWw7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCdXR0b25QYW5lbDtcblxufSx7XCIuL015YnV0dG9uXCI6NCxcInJlYWN0XCI6XCJyZWFjdFwifV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE15YnV0dG9uID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE15YnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNeWJ1dHRvbihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNeWJ1dHRvbik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKE15YnV0dG9uKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTXlidXR0b24sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgY2xhc3NOYW1lOiBcImlubGluZVwiIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiYnRuIFwiICsgdGhpcy5wcm9wcy5jbGFzcyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMucHJvcHMuY2FsbGJhY2sgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLnZhbHVlXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE15YnV0dG9uO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTXlidXR0b247XG5cbn0se1wicmVhY3RcIjpcInJlYWN0XCJ9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQnJhbmQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJhbmQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyYW5kKHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyYW5kKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQnJhbmQpLmNhbGwodGhpcywgcHJvcHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCcmFuZCwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHsgaHJlZjogdGhpcy5wcm9wcy5wYXRoLCBvbkNsaWNrOiB0aGlzLnByb3BzLmNhbGxiYWNrLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJuYXZiYXItYnJhbmQgXCIgKyAodGhpcy5wcm9wcy5hY3RpdmUgPyBcImFjdGl2ZVwiIDogXCJcIikgfSxcbiAgICAgICAgdGhpcy5wcm9wcy52YWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQnJhbmQ7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBCcmFuZDtcblxufSx7XCJyZWFjdFwiOlwicmVhY3RcIn1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBCcmFuZEltZyA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcmFuZEltZywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJhbmRJbWcocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJhbmRJbWcpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihCcmFuZEltZykuY2FsbCh0aGlzLCBwcm9wcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEJyYW5kSW1nLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IHsgXCJwYWRkaW5nXCI6IDAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJhXCIsXG4gICAgICAgIHsgaHJlZjogdGhpcy5wcm9wcy5wYXRoLCBzdHlsZTogc3R5bGVzLFxuICAgICAgICAgIGNsYXNzTmFtZTogXCJuYXZiYXItYnJhbmRcIiB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7IHNyYzogdGhpcy5wcm9wcy5pbWcgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEJyYW5kSW1nO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQnJhbmRJbWc7XG5cbn0se1wicmVhY3RcIjpcInJlYWN0XCJ9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTmF2ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE5hdiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5hdik7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKE5hdikuY2FsbCh0aGlzLCBwcm9wcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5hdiwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJsaVwiLFxuICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5hY3RpdmUgPyBcImFjdGl2ZVwiIDogXCJcIiB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7IGhyZWY6IHRoaXMucHJvcHMucGF0aCwgb25DbGljazogdGhpcy5wcm9wcy5jYWxsYmFjayB9LFxuICAgICAgICAgIHRoaXMucHJvcHMudmFsdWVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTmF2O1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTmF2O1xuXG59LHtcInJlYWN0XCI6XCJyZWFjdFwifV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfQnJhbmQgPSByZXF1aXJlKFwiLi9CcmFuZFwiKTtcblxudmFyIF9CcmFuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CcmFuZCk7XG5cbnZhciBfQnJhbmRJbWcgPSByZXF1aXJlKFwiLi9CcmFuZEltZ1wiKTtcblxudmFyIF9CcmFuZEltZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CcmFuZEltZyk7XG5cbnZhciBfTmF2ID0gcmVxdWlyZShcIi4vTmF2XCIpO1xuXG52YXIgX05hdjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9OYXYpO1xuXG52YXIgX01lbnUgPSByZXF1aXJlKFwiLi9kcm9wZG93bi9NZW51XCIpO1xuXG52YXIgX01lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVudSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIE5hdmJhciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhOYXZiYXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdmJhcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOYXZiYXIpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKE5hdmJhcikuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBhY3RpdmU6IDBcbiAgICB9O1xuXG4gICAgX3RoaXMubmF2Q2xpY2tlZCA9IF90aGlzLm5hdkNsaWNrZWQuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE5hdmJhciwgW3tcbiAgICBrZXk6IFwibmF2Q2xpY2tlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXZDbGlja2VkKGtleSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zZXRTdGF0ZSh7IGFjdGl2ZToga2V5IH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgbmF2cyA9IHRoaXMucHJvcHMubmF2SXRlbXMubWFwKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgYWN0aXZlOiBpID09IF90aGlzMy5zdGF0ZS5hY3RpdmUsXG4gICAgICAgICAgdmFsdWU6IGUudmFsdWUsXG4gICAgICAgICAgcGF0aDogZS5wYXRoLFxuICAgICAgICAgIGNhbGxiYWNrOiBfdGhpczMubmF2Q2xpY2tlZChpKVxuICAgICAgICB9O1xuXG4gICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgICAgY2FzZSBcImJyYW5kLWltZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CcmFuZEltZzIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGltZzogZS5pbWcsIHZhbHVlOiBcIlwiIH0pKTtcblxuICAgICAgICAgIGNhc2UgXCJicmFuZFwiOlxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CcmFuZDIuZGVmYXVsdCwgcHJvcHMpO1xuXG4gICAgICAgICAgY2FzZSBcIm5hdlwiOlxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9OYXYyLmRlZmF1bHQsIHByb3BzKTtcblxuICAgICAgICAgIGNhc2UgXCJkcm9wZG93blwiOlxuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51Mi5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgcHJvZmlsZXM6IGUucHJvZmlsZXMsXG4gICAgICAgICAgICAgIGVtYWlsczogZS5lbWFpbHMgfSkpO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcImRlZmF1bHRcIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJuYXZcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwibmF2YmFyIG5hdmJhci1kZWZhdWx0XCIgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcIm5hdiBuYXZiYXItbmF2XCIgfSxcbiAgICAgICAgICBuYXZzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5hdmJhcjtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmJhcjtcblxufSx7XCIuL0JyYW5kXCI6NSxcIi4vQnJhbmRJbWdcIjo2LFwiLi9OYXZcIjo3LFwiLi9kcm9wZG93bi9NZW51XCI6MTAsXCJyZWFjdFwiOlwicmVhY3RcIn1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBEcm9wZG93bkl0ZW0gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRHJvcGRvd25JdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcm9wZG93bkl0ZW0ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRHJvcGRvd25JdGVtKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRHJvcGRvd25JdGVtKS5jYWxsKHRoaXMsIHByb3BzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRHJvcGRvd25JdGVtLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcImxpXCIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHsgaHJlZjogdGhpcy5wcm9wcy51cmwsIGNsYXNzTmFtZTogXCJkcm9wZG93bi1pdGVtXCIgfSxcbiAgICAgICAgICB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHsgY2xhc3NOYW1lOiBcImRyb3Bkb3duLWljb25cIiwgc3JjOiB0aGlzLnByb3BzLmltZyB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcm9wZG93bkl0ZW07XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEcm9wZG93bkl0ZW07XG5cbn0se1wicmVhY3RcIjpcInJlYWN0XCJ9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfSXRlbSA9IHJlcXVpcmUoXCIuL0l0ZW1cIik7XG5cbnZhciBfSXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JdGVtKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRHJvcGRvd25NZW51ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKERyb3Bkb3duTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25NZW51KHByb3BzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duTWVudSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKERyb3Bkb3duTWVudSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duTWVudSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBwcm9maWxlcyA9IHRoaXMucHJvcHMucHJvZmlsZXMubWFwKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSXRlbTIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIGUsIHsga2V5OiBpIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZW1haWxzID0gdGhpcy5wcm9wcy5lbWFpbHMubWFwKGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSXRlbTIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIGUsIHsga2V5OiBpIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwibGlcIixcbiAgICAgICAgeyBjbGFzc05hbWU6IFwiZHJvcGRvd24gXCIgKyB0aGlzLnByb3BzLmFjdGl2ZSA/IFwib3BlblwiIDogXCJcIiB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7IGhyZWY6IFwiI1wiLCBjbGFzc05hbWU6IFwiZHJvcGRvd24tdG9nZ2xlXCIsIFwiZGF0YS10b2dnbGVcIjogXCJkcm9wZG93blwiLFxuICAgICAgICAgICAgcm9sZTogXCJidXR0b25cIiwgXCJhcmlhLWhhc3BvcHVwXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IHRoaXMucHJvcHMuYWN0aXZlLCBvbkNsaWNrOiB0aGlzLnByb3BzLmNhbGxiYWNrIH0sXG4gICAgICAgICAgdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBcImNsYXNzXCI6IFwiY2FyZXRcIiB9KVxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiZHJvcGRvd24tbWVudVwiIH0sXG4gICAgICAgICAgcHJvZmlsZXMsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7IHJvbGU6IFwic2VwYXJhdG9yXCIsIFwiY2xhc3NcIjogXCJkaXZpZGVyXCIgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICB7IFwiY2xhc3NcIjogXCJkcm9wZG93bi1oZWFkZXJcIiB9LFxuICAgICAgICAgICAgXCJFbWFpbFwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICBlbWFpbHNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcGRvd25NZW51O1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRHJvcGRvd25NZW51O1xuXG59LHtcIi4vSXRlbVwiOjksXCJyZWFjdFwiOlwicmVhY3RcIn1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGFqYXggPSBmdW5jdGlvbiBhamF4KG1ldGhvZCwgcGF0aCwgaGVhZGVycykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIG1ldGhvZCA9IG1ldGhvZCB8fCBcIkdFVFwiO1xuICAgIHBhdGggPSBwYXRoIHx8IFwiL1wiO1xuXG4gICAgdmFyIHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh4bWxodHRwLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICB2YXIgcmVzID0ge1xuICAgICAgICAgIGhlYWRlcnM6IHhtbGh0dHAuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksXG4gICAgICAgICAgZGF0YTogSlNPTi5wYXJzZSh4bWxodHRwLnJlc3BvbnNlVGV4dClcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHhtbGh0dHAuc3RhdHVzID09IDIwMCkgcmVzb2x2ZShKU09OLnN0cmluZ2lmeShyZXMpKTtlbHNlIHJlamVjdChKU09OLnN0cmluZ2lmeShyZXMpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHhtbGh0dHAub3BlbihtZXRob2QsIHBhdGgpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIGRlZmF1bHRIZWFkZXJzKSB7XG4gICAgICB4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBkZWZhdWx0SGVhZGVyc1trZXldKTtcbiAgICB9aWYgKGhlYWRlcnMpIHtcbiAgICAgIGZvciAodmFyIF9rZXkgaW4gaGVhZGVycykge1xuICAgICAgICB4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoX2tleSwgaGVhZGVyc1tfa2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeG1saHR0cC5zZW5kKCk7XG4gIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYWpheDtcblxufSx7fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIHBTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi9saWIva2V5cy5qcycpO1xudmFyIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9saWIvaXNfYXJndW1lbnRzLmpzJyk7XG5cbnZhciBkZWVwRXF1YWwgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9O1xuICAvLyA3LjEuIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9IGVsc2UgaWYgKGFjdHVhbCBpbnN0YW5jZW9mIERhdGUgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5nZXRUaW1lKCkgPT09IGV4cGVjdGVkLmdldFRpbWUoKTtcblxuICAvLyA3LjMuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQgfHwgdHlwZW9mIGFjdHVhbCAhPSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwZWN0ZWQgIT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0cy5zdHJpY3QgPyBhY3R1YWwgPT09IGV4cGVjdGVkIDogYWN0dWFsID09IGV4cGVjdGVkO1xuXG4gIC8vIDcuNC4gRm9yIGFsbCBvdGhlciBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSBvYmplY3RzLCBlcXVpdmFsZW5jZSBpc1xuICAvLyBkZXRlcm1pbmVkIGJ5IGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoYXMgdmVyaWZpZWRcbiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5c1xuICAvLyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKSwgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5XG4gIC8vIGNvcnJlc3BvbmRpbmcga2V5LCBhbmQgYW4gaWRlbnRpY2FsICdwcm90b3R5cGUnIHByb3BlcnR5LiBOb3RlOiB0aGlzXG4gIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBvcHRzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZE9yTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKHgpIHtcbiAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgeC5sZW5ndGggIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgeC5jb3B5ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4LnNsaWNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh4Lmxlbmd0aCA+IDAgJiYgdHlwZW9mIHhbMF0gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBvcHRzKSB7XG4gIHZhciBpLCBrZXk7XG4gIGlmIChpc1VuZGVmaW5lZE9yTnVsbChhKSB8fCBpc1VuZGVmaW5lZE9yTnVsbChiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS5cbiAgaWYgKGEucHJvdG90eXBlICE9PSBiLnByb3RvdHlwZSkgcmV0dXJuIGZhbHNlO1xuICAvL35+fkkndmUgbWFuYWdlZCB0byBicmVhayBPYmplY3Qua2V5cyB0aHJvdWdoIHNjcmV3eSBhcmd1bWVudHMgcGFzc2luZy5cbiAgLy8gICBDb252ZXJ0aW5nIHRvIGFycmF5IHNvbHZlcyB0aGUgcHJvYmxlbS5cbiAgaWYgKGlzQXJndW1lbnRzKGEpKSB7XG4gICAgaWYgKCFpc0FyZ3VtZW50cyhiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhID0gcFNsaWNlLmNhbGwoYSk7XG4gICAgYiA9IHBTbGljZS5jYWxsKGIpO1xuICAgIHJldHVybiBkZWVwRXF1YWwoYSwgYiwgb3B0cyk7XG4gIH1cbiAgaWYgKGlzQnVmZmVyKGEpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGthID0gb2JqZWN0S2V5cyhhKSxcbiAgICAgICAga2IgPSBvYmplY3RLZXlzKGIpO1xuICB9IGNhdGNoIChlKSB7Ly9oYXBwZW5zIHdoZW4gb25lIGlzIGEgc3RyaW5nIGxpdGVyYWwgYW5kIHRoZSBvdGhlciBpc24ndFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vdGhlIHNhbWUgc2V0IG9mIGtleXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlciksXG4gIGthLnNvcnQoKTtcbiAga2Iuc29ydCgpO1xuICAvL35+fmNoZWFwIGtleSB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKGthW2ldICE9IGtiW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LCBhbmRcbiAgLy9+fn5wb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0XG4gIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAga2V5ID0ga2FbaV07XG4gICAgaWYgKCFkZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIG9wdHMpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBhID09PSB0eXBlb2YgYjtcbn1cblxufSx7XCIuL2xpYi9pc19hcmd1bWVudHMuanNcIjoxMyxcIi4vbGliL2tleXMuanNcIjoxNH1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbnZhciBzdXBwb3J0c0FyZ3VtZW50c0NsYXNzID0gKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnRzKVxufSkoKSA9PSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNBcmd1bWVudHNDbGFzcyA/IHN1cHBvcnRlZCA6IHVuc3VwcG9ydGVkO1xuXG5leHBvcnRzLnN1cHBvcnRlZCA9IHN1cHBvcnRlZDtcbmZ1bmN0aW9uIHN1cHBvcnRlZChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxuZXhwb3J0cy51bnN1cHBvcnRlZCA9IHVuc3VwcG9ydGVkO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWQob2JqZWN0KXtcbiAgcmV0dXJuIG9iamVjdCAmJlxuICAgIHR5cGVvZiBvYmplY3QgPT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2Ygb2JqZWN0Lmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdjYWxsZWUnKSAmJlxuICAgICFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCAnY2FsbGVlJykgfHxcbiAgICBmYWxzZTtcbn07XG5cbn0se31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJ1xuICA/IE9iamVjdC5rZXlzIDogc2hpbTtcblxuZXhwb3J0cy5zaGltID0gc2hpbTtcbmZ1bmN0aW9uIHNoaW0gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbn0se31dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgbmF2aWdhdGlvbiB3YXMgY2F1c2VkIGJ5IGEgY2FsbCB0byBoaXN0b3J5LnB1c2guXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBQVVNIID0gJ1BVU0gnO1xuXG5leHBvcnRzLlBVU0ggPSBQVVNIO1xuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBuYXZpZ2F0aW9uIHdhcyBjYXVzZWQgYnkgYSBjYWxsIHRvIGhpc3RvcnkucmVwbGFjZS5cbiAqL1xudmFyIFJFUExBQ0UgPSAnUkVQTEFDRSc7XG5cbmV4cG9ydHMuUkVQTEFDRSA9IFJFUExBQ0U7XG4vKipcbiAqIEluZGljYXRlcyB0aGF0IG5hdmlnYXRpb24gd2FzIGNhdXNlZCBieSBzb21lIG90aGVyIGFjdGlvbiBzdWNoXG4gKiBhcyB1c2luZyBhIGJyb3dzZXIncyBiYWNrL2ZvcndhcmQgYnV0dG9ucyBhbmQvb3IgbWFudWFsbHkgbWFuaXB1bGF0aW5nXG4gKiB0aGUgVVJMIGluIGEgYnJvd3NlcidzIGxvY2F0aW9uIGJhci4gVGhpcyBpcyB0aGUgZGVmYXVsdC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvd0V2ZW50SGFuZGxlcnMvb25wb3BzdGF0ZVxuICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cbnZhciBQT1AgPSAnUE9QJztcblxuZXhwb3J0cy5QT1AgPSBQT1A7XG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIFBVU0g6IFBVU0gsXG4gIFJFUExBQ0U6IFJFUExBQ0UsXG4gIFBPUDogUE9QXG59O1xufSx7fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgX3NsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuZXhwb3J0cy5sb29wQXN5bmMgPSBsb29wQXN5bmM7XG5cbmZ1bmN0aW9uIGxvb3BBc3luYyh0dXJucywgd29yaywgY2FsbGJhY2spIHtcbiAgdmFyIGN1cnJlbnRUdXJuID0gMCxcbiAgICAgIGlzRG9uZSA9IGZhbHNlO1xuICB2YXIgc3luYyA9IGZhbHNlLFxuICAgICAgaGFzTmV4dCA9IGZhbHNlLFxuICAgICAgZG9uZUFyZ3MgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBpc0RvbmUgPSB0cnVlO1xuICAgIGlmIChzeW5jKSB7XG4gICAgICAvLyBJdGVyYXRlIGluc3RlYWQgb2YgcmVjdXJzaW5nIGlmIHBvc3NpYmxlLlxuICAgICAgZG9uZUFyZ3MgPSBbXS5jb25jYXQoX3NsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgaWYgKGlzRG9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhhc05leHQgPSB0cnVlO1xuICAgIGlmIChzeW5jKSB7XG4gICAgICAvLyBJdGVyYXRlIGluc3RlYWQgb2YgcmVjdXJzaW5nIGlmIHBvc3NpYmxlLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmMgPSB0cnVlO1xuXG4gICAgd2hpbGUgKCFpc0RvbmUgJiYgY3VycmVudFR1cm4gPCB0dXJucyAmJiBoYXNOZXh0KSB7XG4gICAgICBoYXNOZXh0ID0gZmFsc2U7XG4gICAgICB3b3JrLmNhbGwodGhpcywgY3VycmVudFR1cm4rKywgbmV4dCwgZG9uZSk7XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuXG4gICAgaWYgKGlzRG9uZSkge1xuICAgICAgLy8gVGhpcyBtZWFucyB0aGUgbG9vcCBmaW5pc2hlZCBzeW5jaHJvbm91c2x5LlxuICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgZG9uZUFyZ3MpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50VHVybiA+PSB0dXJucyAmJiBoYXNOZXh0KSB7XG4gICAgICBpc0RvbmUgPSB0cnVlO1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KCk7XG59XG59LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyplc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5zYXZlU3RhdGUgPSBzYXZlU3RhdGU7XG5leHBvcnRzLnJlYWRTdGF0ZSA9IHJlYWRTdGF0ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIEtleVByZWZpeCA9ICdAQEhpc3RvcnkvJztcbnZhciBRdW90YUV4Y2VlZGVkRXJyb3JzID0gWydRdW90YUV4Y2VlZGVkRXJyb3InLCAnUVVPVEFfRVhDRUVERURfRVJSJ107XG5cbnZhciBTZWN1cml0eUVycm9yID0gJ1NlY3VyaXR5RXJyb3InO1xuXG5mdW5jdGlvbiBjcmVhdGVLZXkoa2V5KSB7XG4gIHJldHVybiBLZXlQcmVmaXggKyBrZXk7XG59XG5cbmZ1bmN0aW9uIHNhdmVTdGF0ZShrZXksIHN0YXRlKSB7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlID09IG51bGwpIHtcbiAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGNyZWF0ZUtleShrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oY3JlYXRlS2V5KGtleSksIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvci5uYW1lID09PSBTZWN1cml0eUVycm9yKSB7XG4gICAgICAvLyBCbG9ja2luZyBjb29raWVzIGluIENocm9tZS9GaXJlZm94L1NhZmFyaSB0aHJvd3MgU2VjdXJpdHlFcnJvciBvbiBhbnlcbiAgICAgIC8vIGF0dGVtcHQgdG8gYWNjZXNzIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShmYWxzZSwgJ1toaXN0b3J5XSBVbmFibGUgdG8gc2F2ZSBzdGF0ZTsgc2Vzc2lvblN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZSBkdWUgdG8gc2VjdXJpdHkgc2V0dGluZ3MnKSA6IHVuZGVmaW5lZDtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChRdW90YUV4Y2VlZGVkRXJyb3JzLmluZGV4T2YoZXJyb3IubmFtZSkgPj0gMCAmJiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBTYWZhcmkgXCJwcml2YXRlIG1vZGVcIiB0aHJvd3MgUXVvdGFFeGNlZWRlZEVycm9yLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnW2hpc3RvcnldIFVuYWJsZSB0byBzYXZlIHN0YXRlOyBzZXNzaW9uU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGluIFNhZmFyaSBwcml2YXRlIG1vZGUnKSA6IHVuZGVmaW5lZDtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRTdGF0ZShrZXkpIHtcbiAgdmFyIGpzb24gPSB1bmRlZmluZWQ7XG4gIHRyeSB7XG4gICAganNvbiA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGNyZWF0ZUtleShrZXkpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PT0gU2VjdXJpdHlFcnJvcikge1xuICAgICAgLy8gQmxvY2tpbmcgY29va2llcyBpbiBDaHJvbWUvRmlyZWZveC9TYWZhcmkgdGhyb3dzIFNlY3VyaXR5RXJyb3Igb24gYW55XG4gICAgICAvLyBhdHRlbXB0IHRvIGFjY2VzcyB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdbaGlzdG9yeV0gVW5hYmxlIHRvIHJlYWQgc3RhdGU7IHNlc3Npb25TdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIHNlY3VyaXR5IHNldHRpbmdzJykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChqc29uKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZ25vcmUgaW52YWxpZCBKU09OLlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MzMsXCJ3YXJuaW5nXCI6NzN9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmFkZEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyO1xuZXhwb3J0cy5yZW1vdmVFdmVudExpc3RlbmVyID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbmV4cG9ydHMuZ2V0SGFzaFBhdGggPSBnZXRIYXNoUGF0aDtcbmV4cG9ydHMucmVwbGFjZUhhc2hQYXRoID0gcmVwbGFjZUhhc2hQYXRoO1xuZXhwb3J0cy5nZXRXaW5kb3dQYXRoID0gZ2V0V2luZG93UGF0aDtcbmV4cG9ydHMuZ28gPSBnbztcbmV4cG9ydHMuZ2V0VXNlckNvbmZpcm1hdGlvbiA9IGdldFVzZXJDb25maXJtYXRpb247XG5leHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeTtcbmV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaDtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgaWYgKG5vZGUuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIGlmIChub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJyMnKVsxXSB8fCAnJztcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dQYXRoKCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xufVxuXG5mdW5jdGlvbiBnbyhuKSB7XG4gIGlmIChuKSB3aW5kb3cuaGlzdG9yeS5nbyhuKTtcbn1cblxuZnVuY3Rpb24gZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWNrdC9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIHJldHVybiB1YS5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxufSx7fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5leHBvcnRzLmNhblVzZURPTSA9IGNhblVzZURPTTtcbn0se31dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmV4dHJhY3RQYXRoID0gZXh0cmFjdFBhdGg7XG5leHBvcnRzLnBhcnNlUGF0aCA9IHBhcnNlUGF0aDtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gZXh0cmFjdFBhdGgoc3RyaW5nKSB7XG4gIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaCgvXmh0dHBzPzpcXC9cXC9bXlxcL10qLyk7XG5cbiAgaWYgKG1hdGNoID09IG51bGwpIHJldHVybiBzdHJpbmc7XG5cbiAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gZXh0cmFjdFBhdGgocGF0aCk7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocGF0aCA9PT0gcGF0aG5hbWUsICdBIHBhdGggbXVzdCBiZSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggb25seSwgbm90IGEgZnVsbHkgcXVhbGlmaWVkIFVSTCBsaWtlIFwiJXNcIicsIHBhdGgpIDogdW5kZWZpbmVkO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cmluZyhoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyaW5nKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHJpbmcoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyaW5nKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIGlmIChwYXRobmFtZSA9PT0gJycpIHBhdGhuYW1lID0gJy8nO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2hcbiAgfTtcbn1cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjMzLFwid2FybmluZ1wiOjczfV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG52YXIgX0RPTVN0YXRlU3RvcmFnZSA9IHJlcXVpcmUoJy4vRE9NU3RhdGVTdG9yYWdlJyk7XG5cbnZhciBfY3JlYXRlRE9NSGlzdG9yeSA9IHJlcXVpcmUoJy4vY3JlYXRlRE9NSGlzdG9yeScpO1xuXG52YXIgX2NyZWF0ZURPTUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlRE9NSGlzdG9yeSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyBIVE1MNSdzIGhpc3RvcnkgQVBJXG4gKiAocHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQpIHRvIG1hbmFnZSBoaXN0b3J5LlxuICogVGhpcyBpcyB0aGUgcmVjb21tZW5kZWQgbWV0aG9kIG9mIG1hbmFnaW5nIGhpc3RvcnkgaW4gYnJvd3NlcnMgYmVjYXVzZVxuICogaXQgcHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKlxuICogTm90ZTogSW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgZnVsbFxuICogcGFnZSByZWxvYWRzIHdpbGwgYmUgdXNlZCB0byBwcmVzZXJ2ZSBVUkxzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgZm9yY2VSZWZyZXNoID0gb3B0aW9ucy5mb3JjZVJlZnJlc2g7XG5cbiAgdmFyIGlzU3VwcG9ydGVkID0gX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgdXNlUmVmcmVzaCA9ICFpc1N1cHBvcnRlZCB8fCBmb3JjZVJlZnJlc2g7XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIGhpc3RvcnlTdGF0ZSA9IGhpc3RvcnlTdGF0ZSB8fCB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcblxuICAgIHZhciBwYXRoID0gX0RPTVV0aWxzLmdldFdpbmRvd1BhdGgoKTtcbiAgICB2YXIgX2hpc3RvcnlTdGF0ZSA9IGhpc3RvcnlTdGF0ZTtcbiAgICB2YXIga2V5ID0gX2hpc3RvcnlTdGF0ZS5rZXk7XG5cbiAgICB2YXIgc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGtleSkge1xuICAgICAgc3RhdGUgPSBfRE9NU3RhdGVTdG9yYWdlLnJlYWRTdGF0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgICBrZXkgPSBoaXN0b3J5LmNyZWF0ZUtleSgpO1xuXG4gICAgICBpZiAoaXNTdXBwb3J0ZWQpIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgaGlzdG9yeVN0YXRlLCB7IGtleToga2V5IH0pLCBudWxsKTtcbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgeyBzdGF0ZTogc3RhdGUgfSksIHVuZGVmaW5lZCwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0UG9wU3RhdGVMaXN0ZW5lcihfcmVmKSB7XG4gICAgdmFyIHRyYW5zaXRpb25UbyA9IF9yZWYudHJhbnNpdGlvblRvO1xuXG4gICAgZnVuY3Rpb24gcG9wU3RhdGVMaXN0ZW5lcihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQpIHJldHVybjsgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cblxuICAgICAgdHJhbnNpdGlvblRvKGdldEN1cnJlbnRMb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICAgIH1cblxuICAgIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ3BvcHN0YXRlJywgcG9wU3RhdGVMaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCAncG9wc3RhdGUnLCBwb3BTdGF0ZUxpc3RlbmVyKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoVHJhbnNpdGlvbihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlbmFtZSA9IGxvY2F0aW9uLmJhc2VuYW1lO1xuICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHZhciBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuICAgIHZhciBhY3Rpb24gPSBsb2NhdGlvbi5hY3Rpb247XG4gICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleTtcblxuICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBPUCkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG4gICAgX0RPTVN0YXRlU3RvcmFnZS5zYXZlU3RhdGUoa2V5LCBzdGF0ZSk7XG5cbiAgICB2YXIgcGF0aCA9IChiYXNlbmFtZSB8fCAnJykgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgdmFyIGhpc3RvcnlTdGF0ZSA9IHtcbiAgICAgIGtleToga2V5XG4gICAgfTtcblxuICAgIGlmIChhY3Rpb24gPT09IF9BY3Rpb25zLlBVU0gpIHtcbiAgICAgIGlmICh1c2VSZWZyZXNoKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gcGF0aDtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBQcmV2ZW50IGxvY2F0aW9uIHVwZGF0ZS5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgbnVsbCwgcGF0aCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUkVQTEFDRVxuICAgICAgaWYgKHVzZVJlZnJlc2gpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocGF0aCk7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gUHJldmVudCBsb2NhdGlvbiB1cGRhdGUuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIG51bGwsIHBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSBfY3JlYXRlRE9NSGlzdG9yeTJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgIGdldEN1cnJlbnRMb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uLFxuICAgIGZpbmlzaFRyYW5zaXRpb246IGZpbmlzaFRyYW5zaXRpb24sXG4gICAgc2F2ZVN0YXRlOiBfRE9NU3RhdGVTdG9yYWdlLnNhdmVTdGF0ZVxuICB9KSk7XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwLFxuICAgICAgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XG5cbiAgICB2YXIgdW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbkJlZm9yZShsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdW5saXN0ZW4oKTtcblxuICAgICAgaWYgKC0tbGlzdGVuZXJDb3VudCA9PT0gMCkgc3RvcFBvcFN0YXRlTGlzdGVuZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgaWYgKCsrbGlzdGVuZXJDb3VudCA9PT0gMSkgc3RvcFBvcFN0YXRlTGlzdGVuZXIgPSBzdGFydFBvcFN0YXRlTGlzdGVuZXIoaGlzdG9yeSk7XG5cbiAgICB2YXIgdW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdW5saXN0ZW4oKTtcblxuICAgICAgaWYgKC0tbGlzdGVuZXJDb3VudCA9PT0gMCkgc3RvcFBvcFN0YXRlTGlzdGVuZXIoKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiByZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcbiAgICBpZiAoKytsaXN0ZW5lckNvdW50ID09PSAxKSBzdG9wUG9wU3RhdGVMaXN0ZW5lciA9IHN0YXJ0UG9wU3RhdGVMaXN0ZW5lcihoaXN0b3J5KTtcblxuICAgIGhpc3RvcnkucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcbiAgICBoaXN0b3J5LnVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKTtcblxuICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BQb3BTdGF0ZUxpc3RlbmVyKCk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICBsaXN0ZW5CZWZvcmU6IGxpc3RlbkJlZm9yZSxcbiAgICBsaXN0ZW46IGxpc3RlbixcbiAgICByZWdpc3RlclRyYW5zaXRpb25Ib29rOiByZWdpc3RlclRyYW5zaXRpb25Ib29rLFxuICAgIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rXG4gIH0pO1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVCcm93c2VySGlzdG9yeTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQWN0aW9uc1wiOjE1LFwiLi9ET01TdGF0ZVN0b3JhZ2VcIjoxNyxcIi4vRE9NVXRpbHNcIjoxOCxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxOSxcIi4vUGF0aFV0aWxzXCI6MjAsXCIuL2NyZWF0ZURPTUhpc3RvcnlcIjoyMixcIl9wcm9jZXNzXCI6MzMsXCJpbnZhcmlhbnRcIjozMn1dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9FeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxudmFyIF9jcmVhdGVIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIaXN0b3J5KTtcblxuZnVuY3Rpb24gY3JlYXRlRE9NSGlzdG9yeShvcHRpb25zKSB7XG4gIHZhciBoaXN0b3J5ID0gX2NyZWF0ZUhpc3RvcnkyWydkZWZhdWx0J10oX2V4dGVuZHMoe1xuICAgIGdldFVzZXJDb25maXJtYXRpb246IF9ET01VdGlscy5nZXRVc2VyQ29uZmlybWF0aW9uXG4gIH0sIG9wdGlvbnMsIHtcbiAgICBnbzogX0RPTVV0aWxzLmdvXG4gIH0pKTtcblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnRE9NIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIGhpc3RvcnkubGlzdGVuKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xuICAgIGxpc3RlbjogbGlzdGVuXG4gIH0pO1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVET01IaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9ET01VdGlsc1wiOjE4LFwiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE5LFwiLi9jcmVhdGVIaXN0b3J5XCI6MjQsXCJfcHJvY2Vzc1wiOjMzLFwiaW52YXJpYW50XCI6MzJ9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG52YXIgX0RPTVN0YXRlU3RvcmFnZSA9IHJlcXVpcmUoJy4vRE9NU3RhdGVTdG9yYWdlJyk7XG5cbnZhciBfY3JlYXRlRE9NSGlzdG9yeSA9IHJlcXVpcmUoJy4vY3JlYXRlRE9NSGlzdG9yeScpO1xuXG52YXIgX2NyZWF0ZURPTUhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlRE9NSGlzdG9yeSk7XG5cbmZ1bmN0aW9uIGlzQWJzb2x1dGVQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJyAmJiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCgpIHtcbiAgdmFyIHBhdGggPSBfRE9NVXRpbHMuZ2V0SGFzaFBhdGgoKTtcblxuICBpZiAoaXNBYnNvbHV0ZVBhdGgocGF0aCkpIHJldHVybiB0cnVlO1xuXG4gIF9ET01VdGlscy5yZXBsYWNlSGFzaFBhdGgoJy8nICsgcGF0aCk7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRRdWVyeVN0cmluZ1ZhbHVlVG9QYXRoKHBhdGgsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHBhdGggKyAocGF0aC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIChrZXkgKyAnPScgKyB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwUXVlcnlTdHJpbmdWYWx1ZUZyb21QYXRoKHBhdGgsIGtleSkge1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1s/Jl0/JyArIGtleSArICc9W2EtekEtWjAtOV0rJyksICcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmdWYWx1ZUZyb21QYXRoKHBhdGgsIGtleSkge1xuICB2YXIgbWF0Y2ggPSBwYXRoLm1hdGNoKG5ldyBSZWdFeHAoJ1xcXFw/Lio/XFxcXGInICsga2V5ICsgJz0oLis/KVxcXFxiJykpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV07XG59XG5cbnZhciBEZWZhdWx0UXVlcnlLZXkgPSAnX2snO1xuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcblxuICAhX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBfaW52YXJpYW50MlsnZGVmYXVsdCddKGZhbHNlKSA6IHVuZGVmaW5lZDtcblxuICB2YXIgcXVlcnlLZXkgPSBvcHRpb25zLnF1ZXJ5S2V5O1xuXG4gIGlmIChxdWVyeUtleSA9PT0gdW5kZWZpbmVkIHx8ICEhcXVlcnlLZXkpIHF1ZXJ5S2V5ID0gdHlwZW9mIHF1ZXJ5S2V5ID09PSAnc3RyaW5nJyA/IHF1ZXJ5S2V5IDogRGVmYXVsdFF1ZXJ5S2V5O1xuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IF9ET01VdGlscy5nZXRIYXNoUGF0aCgpO1xuXG4gICAgdmFyIGtleSA9IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHF1ZXJ5S2V5KSB7XG4gICAgICBrZXkgPSBnZXRRdWVyeVN0cmluZ1ZhbHVlRnJvbVBhdGgocGF0aCwgcXVlcnlLZXkpO1xuICAgICAgcGF0aCA9IHN0cmlwUXVlcnlTdHJpbmdWYWx1ZUZyb21QYXRoKHBhdGgsIHF1ZXJ5S2V5KTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzdGF0ZSA9IF9ET01TdGF0ZVN0b3JhZ2UucmVhZFN0YXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZSA9IG51bGw7XG4gICAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG4gICAgICAgIF9ET01VdGlscy5yZXBsYWNlSGFzaFBhdGgoYWRkUXVlcnlTdHJpbmdWYWx1ZVRvUGF0aChwYXRoLCBxdWVyeUtleSwga2V5KSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IHN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgeyBzdGF0ZTogc3RhdGUgfSksIHVuZGVmaW5lZCwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0SGFzaENoYW5nZUxpc3RlbmVyKF9yZWYpIHtcbiAgICB2YXIgdHJhbnNpdGlvblRvID0gX3JlZi50cmFuc2l0aW9uVG87XG5cbiAgICBmdW5jdGlvbiBoYXNoQ2hhbmdlTGlzdGVuZXIoKSB7XG4gICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHJldHVybjsgLy8gQWx3YXlzIG1ha2Ugc3VyZSBoYXNoZXMgYXJlIHByZWNlZWRlZCB3aXRoIGEgLy5cblxuICAgICAgdHJhbnNpdGlvblRvKGdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgICB9XG5cbiAgICBlbnN1cmVTbGFzaCgpO1xuICAgIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCBoYXNoQ2hhbmdlTGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCBoYXNoQ2hhbmdlTGlzdGVuZXIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmaW5pc2hUcmFuc2l0aW9uKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VuYW1lID0gbG9jYXRpb24uYmFzZW5hbWU7XG4gICAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgdmFyIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICB2YXIgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcbiAgICB2YXIgYWN0aW9uID0gbG9jYXRpb24uYWN0aW9uO1xuICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXk7XG5cbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHJldHVybjsgLy8gTm90aGluZyB0byBkby5cblxuICAgIHZhciBwYXRoID0gKGJhc2VuYW1lIHx8ICcnKSArIHBhdGhuYW1lICsgc2VhcmNoO1xuXG4gICAgaWYgKHF1ZXJ5S2V5KSB7XG4gICAgICBwYXRoID0gYWRkUXVlcnlTdHJpbmdWYWx1ZVRvUGF0aChwYXRoLCBxdWVyeUtleSwga2V5KTtcbiAgICAgIF9ET01TdGF0ZVN0b3JhZ2Uuc2F2ZVN0YXRlKGtleSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEcm9wIGtleSBhbmQgc3RhdGUuXG4gICAgICBsb2NhdGlvbi5rZXkgPSBsb2NhdGlvbi5zdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRIYXNoID0gX0RPTVV0aWxzLmdldEhhc2hQYXRoKCk7XG5cbiAgICBpZiAoYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBpZiAoY3VycmVudEhhc2ggIT09IHBhdGgpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnWW91IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGggdXNpbmcgaGFzaCBoaXN0b3J5JykgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50SGFzaCAhPT0gcGF0aCkge1xuICAgICAgLy8gUkVQTEFDRVxuICAgICAgX0RPTVV0aWxzLnJlcGxhY2VIYXNoUGF0aChwYXRoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IF9jcmVhdGVET01IaXN0b3J5MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgZ2V0Q3VycmVudExvY2F0aW9uOiBnZXRDdXJyZW50TG9jYXRpb24sXG4gICAgZmluaXNoVHJhbnNpdGlvbjogZmluaXNoVHJhbnNpdGlvbixcbiAgICBzYXZlU3RhdGU6IF9ET01TdGF0ZVN0b3JhZ2Uuc2F2ZVN0YXRlXG4gIH0pKTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDAsXG4gICAgICBzdG9wSGFzaENoYW5nZUxpc3RlbmVyID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIgPSBzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lcihoaXN0b3J5KTtcblxuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuQmVmb3JlKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB1bmxpc3RlbigpO1xuXG4gICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIgPSBzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lcihoaXN0b3J5KTtcblxuICAgIHZhciB1bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB1bmxpc3RlbigpO1xuXG4gICAgICBpZiAoLS1saXN0ZW5lckNvdW50ID09PSAwKSBzdG9wSGFzaENoYW5nZUxpc3RlbmVyKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gobG9jYXRpb24pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10ocXVlcnlLZXkgfHwgbG9jYXRpb24uc3RhdGUgPT0gbnVsbCwgJ1lvdSBjYW5ub3QgdXNlIHN0YXRlIHdpdGhvdXQgYSBxdWVyeUtleSBpdCB3aWxsIGJlIGRyb3BwZWQnKSA6IHVuZGVmaW5lZDtcblxuICAgIGhpc3RvcnkucHVzaChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKGxvY2F0aW9uKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKHF1ZXJ5S2V5IHx8IGxvY2F0aW9uLnN0YXRlID09IG51bGwsICdZb3UgY2Fubm90IHVzZSBzdGF0ZSB3aXRob3V0IGEgcXVlcnlLZXkgaXQgd2lsbCBiZSBkcm9wcGVkJykgOiB1bmRlZmluZWQ7XG5cbiAgICBoaXN0b3J5LnJlcGxhY2UobG9jYXRpb24pO1xuICB9XG5cbiAgdmFyIGdvSXNTdXBwb3J0ZWRXaXRob3V0UmVsb2FkID0gX0RPTVV0aWxzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShnb0lzU3VwcG9ydGVkV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdW5kZWZpbmVkO1xuXG4gICAgaGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgIHJldHVybiAnIycgKyBoaXN0b3J5LmNyZWF0ZUhyZWYocGF0aCk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2soaG9vaykge1xuICAgIGlmICgrK2xpc3RlbmVyQ291bnQgPT09IDEpIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIgPSBzdGFydEhhc2hDaGFuZ2VMaXN0ZW5lcihoaXN0b3J5KTtcblxuICAgIGhpc3RvcnkucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rKGhvb2spIHtcbiAgICBoaXN0b3J5LnVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKTtcblxuICAgIGlmICgtLWxpc3RlbmVyQ291bnQgPT09IDApIHN0b3BIYXNoQ2hhbmdlTGlzdGVuZXIoKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcHVzaFN0YXRlKHN0YXRlLCBwYXRoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKHF1ZXJ5S2V5IHx8IHN0YXRlID09IG51bGwsICdZb3UgY2Fubm90IHVzZSBzdGF0ZSB3aXRob3V0IGEgcXVlcnlLZXkgaXQgd2lsbCBiZSBkcm9wcGVkJykgOiB1bmRlZmluZWQ7XG5cbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgcGF0aCk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShxdWVyeUtleSB8fCBzdGF0ZSA9PSBudWxsLCAnWW91IGNhbm5vdCB1c2Ugc3RhdGUgd2l0aG91dCBhIHF1ZXJ5S2V5IGl0IHdpbGwgYmUgZHJvcHBlZCcpIDogdW5kZWZpbmVkO1xuXG4gICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBoaXN0b3J5LCB7XG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuXG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogcmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgLy8gZGVwcmVjYXRlZCAtIHdhcm5pbmcgaXMgaW4gY3JlYXRlSGlzdG9yeVxuICAgIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vazogdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rLCAvLyBkZXByZWNhdGVkIC0gd2FybmluZyBpcyBpbiBjcmVhdGVIaXN0b3J5XG4gICAgcHVzaFN0YXRlOiBwdXNoU3RhdGUsIC8vIGRlcHJlY2F0ZWQgLSB3YXJuaW5nIGlzIGluIGNyZWF0ZUhpc3RvcnlcbiAgICByZXBsYWNlU3RhdGU6IHJlcGxhY2VTdGF0ZSAvLyBkZXByZWNhdGVkIC0gd2FybmluZyBpcyBpbiBjcmVhdGVIaXN0b3J5XG4gIH0pO1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVIYXNoSGlzdG9yeTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQWN0aW9uc1wiOjE1LFwiLi9ET01TdGF0ZVN0b3JhZ2VcIjoxNyxcIi4vRE9NVXRpbHNcIjoxOCxcIi4vRXhlY3V0aW9uRW52aXJvbm1lbnRcIjoxOSxcIi4vUGF0aFV0aWxzXCI6MjAsXCIuL2NyZWF0ZURPTUhpc3RvcnlcIjoyMixcIl9wcm9jZXNzXCI6MzMsXCJpbnZhcmlhbnRcIjozMixcIndhcm5pbmdcIjo3M31dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfZGVlcEVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcXVhbCcpO1xuXG52YXIgX2RlZXBFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRXF1YWwpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfQXN5bmNVdGlscyA9IHJlcXVpcmUoJy4vQXN5bmNVdGlscycpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9jcmVhdGVMb2NhdGlvbjIgPSByZXF1aXJlKCcuL2NyZWF0ZUxvY2F0aW9uJyk7XG5cbnZhciBfY3JlYXRlTG9jYXRpb24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlTG9jYXRpb24yKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vayA9IHJlcXVpcmUoJy4vcnVuVHJhbnNpdGlvbkhvb2snKTtcblxudmFyIF9ydW5UcmFuc2l0aW9uSG9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydW5UcmFuc2l0aW9uSG9vayk7XG5cbnZhciBfZGVwcmVjYXRlID0gcmVxdWlyZSgnLi9kZXByZWNhdGUnKTtcblxudmFyIF9kZXByZWNhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVwcmVjYXRlKTtcblxuZnVuY3Rpb24gY3JlYXRlUmFuZG9tS2V5KGxlbmd0aCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmXG4gIC8vYS5hY3Rpb24gPT09IGIuYWN0aW9uICYmIC8vIERpZmZlcmVudCBhY3Rpb24gIT09IGxvY2F0aW9uIGNoYW5nZS5cbiAgYS5rZXkgPT09IGIua2V5ICYmIF9kZWVwRXF1YWwyWydkZWZhdWx0J10oYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbnZhciBEZWZhdWx0S2V5TGVuZ3RoID0gNjtcblxuZnVuY3Rpb24gY3JlYXRlSGlzdG9yeSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGdldEN1cnJlbnRMb2NhdGlvbiA9IG9wdGlvbnMuZ2V0Q3VycmVudExvY2F0aW9uO1xuICB2YXIgZmluaXNoVHJhbnNpdGlvbiA9IG9wdGlvbnMuZmluaXNoVHJhbnNpdGlvbjtcbiAgdmFyIHNhdmVTdGF0ZSA9IG9wdGlvbnMuc2F2ZVN0YXRlO1xuICB2YXIgZ28gPSBvcHRpb25zLmdvO1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IG9wdGlvbnMuZ2V0VXNlckNvbmZpcm1hdGlvbjtcbiAgdmFyIGtleUxlbmd0aCA9IG9wdGlvbnMua2V5TGVuZ3RoO1xuXG4gIGlmICh0eXBlb2Yga2V5TGVuZ3RoICE9PSAnbnVtYmVyJykga2V5TGVuZ3RoID0gRGVmYXVsdEtleUxlbmd0aDtcblxuICB2YXIgdHJhbnNpdGlvbkhvb2tzID0gW107XG5cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlKGhvb2spIHtcbiAgICB0cmFuc2l0aW9uSG9va3MucHVzaChob29rKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFuc2l0aW9uSG9va3MgPSB0cmFuc2l0aW9uSG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBob29rO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBhbGxLZXlzID0gW107XG4gIHZhciBjaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGxvY2F0aW9uID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnQoKSB7XG4gICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAmJiBwZW5kaW5nTG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QT1ApIHtcbiAgICAgIHJldHVybiBhbGxLZXlzLmluZGV4T2YocGVuZGluZ0xvY2F0aW9uLmtleSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIGFsbEtleXMuaW5kZXhPZihsb2NhdGlvbi5rZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obmV3TG9jYXRpb24pIHtcbiAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcblxuICAgIGxvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cbiAgICBpZiAobG9jYXRpb24uYWN0aW9uID09PSBfQWN0aW9ucy5QVVNIKSB7XG4gICAgICBhbGxLZXlzID0gW10uY29uY2F0KGFsbEtleXMuc2xpY2UoMCwgY3VycmVudCArIDEpLCBbbG9jYXRpb24ua2V5XSk7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5hY3Rpb24gPT09IF9BY3Rpb25zLlJFUExBQ0UpIHtcbiAgICAgIGFsbEtleXNbY3VycmVudF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgfVxuXG4gICAgY2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihsb2NhdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICBjaGFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgIGxpc3RlbmVyKGxvY2F0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9sb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuICAgICAgYWxsS2V5cyA9IFtfbG9jYXRpb24ua2V5XTtcbiAgICAgIHVwZGF0ZUxvY2F0aW9uKF9sb2NhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZUxpc3RlbmVycyA9IGNoYW5nZUxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgX0FzeW5jVXRpbHMubG9vcEFzeW5jKHRyYW5zaXRpb25Ib29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuICAgICAgX3J1blRyYW5zaXRpb25Ib29rMlsnZGVmYXVsdCddKHRyYW5zaXRpb25Ib29rc1tpbmRleF0sIGxvY2F0aW9uLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgIGRvbmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICBpZiAoZ2V0VXNlckNvbmZpcm1hdGlvbiAmJiB0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihtZXNzYWdlLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgICBjYWxsYmFjayhvayAhPT0gZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBwZW5kaW5nTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvblRvKG5leHRMb2NhdGlvbikge1xuICAgIGlmIChsb2NhdGlvbiAmJiBsb2NhdGlvbnNBcmVFcXVhbChsb2NhdGlvbiwgbmV4dExvY2F0aW9uKSkgcmV0dXJuOyAvLyBOb3RoaW5nIHRvIGRvLlxuXG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuXG4gICAgY29uZmlybVRyYW5zaXRpb25UbyhuZXh0TG9jYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gbmV4dExvY2F0aW9uKSByZXR1cm47IC8vIFRyYW5zaXRpb24gd2FzIGludGVycnVwdGVkLlxuXG4gICAgICBpZiAob2spIHtcbiAgICAgICAgLy8gdHJlYXQgUFVTSCB0byBjdXJyZW50IHBhdGggbGlrZSBSRVBMQUNFIHRvIGJlIGNvbnNpc3RlbnQgd2l0aCBicm93c2Vyc1xuICAgICAgICBpZiAobmV4dExvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUFVTSCkge1xuICAgICAgICAgIHZhciBwcmV2UGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgICAgIHZhciBuZXh0UGF0aCA9IGNyZWF0ZVBhdGgobmV4dExvY2F0aW9uKTtcblxuICAgICAgICAgIGlmIChuZXh0UGF0aCA9PT0gcHJldlBhdGggJiYgX2RlZXBFcXVhbDJbJ2RlZmF1bHQnXShsb2NhdGlvbi5zdGF0ZSwgbmV4dExvY2F0aW9uLnN0YXRlKSkgbmV4dExvY2F0aW9uLmFjdGlvbiA9IF9BY3Rpb25zLlJFUExBQ0U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmluaXNoVHJhbnNpdGlvbihuZXh0TG9jYXRpb24pICE9PSBmYWxzZSkgdXBkYXRlTG9jYXRpb24obmV4dExvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gJiYgbmV4dExvY2F0aW9uLmFjdGlvbiA9PT0gX0FjdGlvbnMuUE9QKSB7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YobG9jYXRpb24ua2V5KTtcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IGFsbEtleXMuaW5kZXhPZihuZXh0TG9jYXRpb24ua2V5KTtcblxuICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSAmJiBuZXh0SW5kZXggIT09IC0xKSBnbyhwcmV2SW5kZXggLSBuZXh0SW5kZXgpOyAvLyBSZXN0b3JlIHRoZSBVUkwuXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKGxvY2F0aW9uKSB7XG4gICAgdHJhbnNpdGlvblRvKGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uLCBfQWN0aW9ucy5QVVNILCBjcmVhdGVLZXkoKSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbikge1xuICAgIHRyYW5zaXRpb25UbyhjcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgX0FjdGlvbnMuUkVQTEFDRSwgY3JlYXRlS2V5KCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVJhbmRvbUtleShrZXlMZW5ndGgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICAgIGlmIChsb2NhdGlvbiA9PSBudWxsIHx8IHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpIHJldHVybiBsb2NhdGlvbjtcblxuICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHZhciBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG4gICAgdmFyIHJlc3VsdCA9IHBhdGhuYW1lO1xuXG4gICAgaWYgKHNlYXJjaCkgcmVzdWx0ICs9IHNlYXJjaDtcblxuICAgIGlmIChoYXNoKSByZXN1bHQgKz0gaGFzaDtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBjcmVhdGVLZXkoKSA6IGFyZ3VtZW50c1syXTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnVGhlIHN0YXRlICgybmQpIGFyZ3VtZW50IHRvIGhpc3RvcnkuY3JlYXRlTG9jYXRpb24gaXMgZGVwcmVjYXRlZDsgdXNlIGEgJyArICdsb2NhdGlvbiBkZXNjcmlwdG9yIGluc3RlYWQnKSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpIGxvY2F0aW9uID0gX1BhdGhVdGlscy5wYXJzZVBhdGgobG9jYXRpb24pO1xuXG4gICAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgeyBzdGF0ZTogYWN0aW9uIH0pO1xuXG4gICAgICBhY3Rpb24gPSBrZXk7XG4gICAgICBrZXkgPSBhcmd1bWVudHNbM10gfHwgY3JlYXRlS2V5KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9jcmVhdGVMb2NhdGlvbjNbJ2RlZmF1bHQnXShsb2NhdGlvbiwgYWN0aW9uLCBrZXkpO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiBzZXRTdGF0ZShzdGF0ZSkge1xuICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgdXBkYXRlTG9jYXRpb25TdGF0ZShsb2NhdGlvbiwgc3RhdGUpO1xuICAgICAgdXBkYXRlTG9jYXRpb24obG9jYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVMb2NhdGlvblN0YXRlKGdldEN1cnJlbnRMb2NhdGlvbigpLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTG9jYXRpb25TdGF0ZShsb2NhdGlvbiwgc3RhdGUpIHtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IF9leHRlbmRzKHt9LCBsb2NhdGlvbi5zdGF0ZSwgc3RhdGUpO1xuICAgIHNhdmVTdGF0ZShsb2NhdGlvbi5rZXksIGxvY2F0aW9uLnN0YXRlKTtcbiAgfVxuXG4gIC8vIGRlcHJlY2F0ZWRcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgaWYgKHRyYW5zaXRpb25Ib29rcy5pbmRleE9mKGhvb2spID09PSAtMSkgdHJhbnNpdGlvbkhvb2tzLnB1c2goaG9vayk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayhob29rKSB7XG4gICAgdHJhbnNpdGlvbkhvb2tzID0gdHJhbnNpdGlvbkhvb2tzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0gIT09IGhvb2s7XG4gICAgfSk7XG4gIH1cblxuICAvLyBkZXByZWNhdGVkXG4gIGZ1bmN0aW9uIHB1c2hTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHBhdGggPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuICAgIHB1c2goX2V4dGVuZHMoeyBzdGF0ZTogc3RhdGUgfSwgcGF0aCkpO1xuICB9XG5cbiAgLy8gZGVwcmVjYXRlZFxuICBmdW5jdGlvbiByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSBwYXRoID0gX1BhdGhVdGlscy5wYXJzZVBhdGgocGF0aCk7XG5cbiAgICByZXBsYWNlKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGlzdGVuQmVmb3JlOiBsaXN0ZW5CZWZvcmUsXG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgdHJhbnNpdGlvblRvOiB0cmFuc2l0aW9uVG8sXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjcmVhdGVLZXk6IGNyZWF0ZUtleSxcbiAgICBjcmVhdGVQYXRoOiBjcmVhdGVQYXRoLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxuXG4gICAgc2V0U3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10oc2V0U3RhdGUsICdzZXRTdGF0ZSBpcyBkZXByZWNhdGVkOyB1c2UgbG9jYXRpb24ua2V5IHRvIHNhdmUgc3RhdGUgaW5zdGVhZCcpLFxuICAgIHJlZ2lzdGVyVHJhbnNpdGlvbkhvb2s6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgJ3JlZ2lzdGVyVHJhbnNpdGlvbkhvb2sgaXMgZGVwcmVjYXRlZDsgdXNlIGxpc3RlbkJlZm9yZSBpbnN0ZWFkJyksXG4gICAgdW5yZWdpc3RlclRyYW5zaXRpb25Ib29rOiBfZGVwcmVjYXRlMlsnZGVmYXVsdCddKHVucmVnaXN0ZXJUcmFuc2l0aW9uSG9vaywgJ3VucmVnaXN0ZXJUcmFuc2l0aW9uSG9vayBpcyBkZXByZWNhdGVkOyB1c2UgdGhlIGNhbGxiYWNrIHJldHVybmVkIGZyb20gbGlzdGVuQmVmb3JlIGluc3RlYWQnKSxcbiAgICBwdXNoU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocHVzaFN0YXRlLCAncHVzaFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBwdXNoIGluc3RlYWQnKSxcbiAgICByZXBsYWNlU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocmVwbGFjZVN0YXRlLCAncmVwbGFjZVN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSByZXBsYWNlIGluc3RlYWQnKVxuICB9O1xufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVIaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9BY3Rpb25zXCI6MTUsXCIuL0FzeW5jVXRpbHNcIjoxNixcIi4vUGF0aFV0aWxzXCI6MjAsXCIuL2NyZWF0ZUxvY2F0aW9uXCI6MjUsXCIuL2RlcHJlY2F0ZVwiOjI3LFwiLi9ydW5UcmFuc2l0aW9uSG9va1wiOjI4LFwiX3Byb2Nlc3NcIjozMyxcImRlZXAtZXF1YWxcIjoxMixcIndhcm5pbmdcIjo3M31dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfQWN0aW9ucyA9IHJlcXVpcmUoJy4vQWN0aW9ucycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKCkge1xuICB2YXIgbG9jYXRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAnLycgOiBhcmd1bWVudHNbMF07XG4gIHZhciBhY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBfQWN0aW9ucy5QT1AgOiBhcmd1bWVudHNbMV07XG4gIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzJdO1xuXG4gIHZhciBfZm91cnRoQXJnID0gYXJndW1lbnRzLmxlbmd0aCA8PSAzIHx8IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZ3VtZW50c1szXTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChsb2NhdGlvbik7XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdvYmplY3QnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnVGhlIHN0YXRlICgybmQpIGFyZ3VtZW50IHRvIGNyZWF0ZUxvY2F0aW9uIGlzIGRlcHJlY2F0ZWQ7IHVzZSBhICcgKyAnbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkJykgOiB1bmRlZmluZWQ7XG5cbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBsb2NhdGlvbiwgeyBzdGF0ZTogYWN0aW9uIH0pO1xuXG4gICAgYWN0aW9uID0ga2V5IHx8IF9BY3Rpb25zLlBPUDtcbiAgICBrZXkgPSBfZm91cnRoQXJnO1xuICB9XG5cbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoIHx8ICcnO1xuICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2ggfHwgJyc7XG4gIHZhciBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlIHx8IG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCxcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAga2V5OiBrZXlcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlTG9jYXRpb247XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0FjdGlvbnNcIjoxNSxcIi4vUGF0aFV0aWxzXCI6MjAsXCJfcHJvY2Vzc1wiOjMzLFwid2FybmluZ1wiOjczfV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCcuL0FjdGlvbnMnKTtcblxudmFyIF9jcmVhdGVIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlSGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIaXN0b3J5KTtcblxuZnVuY3Rpb24gY3JlYXRlU3RhdGVTdG9yYWdlKGVudHJpZXMpIHtcbiAgcmV0dXJuIGVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5zdGF0ZTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBlbnRyeSkge1xuICAgIG1lbW9bZW50cnkua2V5XSA9IGVudHJ5LnN0YXRlO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0geyBlbnRyaWVzOiBvcHRpb25zIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgb3B0aW9ucyA9IHsgZW50cmllczogW29wdGlvbnNdIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IF9jcmVhdGVIaXN0b3J5MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgZ2V0Q3VycmVudExvY2F0aW9uOiBnZXRDdXJyZW50TG9jYXRpb24sXG4gICAgZmluaXNoVHJhbnNpdGlvbjogZmluaXNoVHJhbnNpdGlvbixcbiAgICBzYXZlU3RhdGU6IHNhdmVTdGF0ZSxcbiAgICBnbzogZ29cbiAgfSkpO1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnM7XG4gIHZhciBlbnRyaWVzID0gX29wdGlvbnMuZW50cmllcztcbiAgdmFyIGN1cnJlbnQgPSBfb3B0aW9ucy5jdXJyZW50O1xuXG4gIGlmICh0eXBlb2YgZW50cmllcyA9PT0gJ3N0cmluZycpIHtcbiAgICBlbnRyaWVzID0gW2VudHJpZXNdO1xuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJpZXMpKSB7XG4gICAgZW50cmllcyA9IFsnLyddO1xuICB9XG5cbiAgZW50cmllcyA9IGVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHZhciBrZXkgPSBoaXN0b3J5LmNyZWF0ZUtleSgpO1xuXG4gICAgaWYgKHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycpIHJldHVybiB7IHBhdGhuYW1lOiBlbnRyeSwga2V5OiBrZXkgfTtcblxuICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdvYmplY3QnICYmIGVudHJ5KSByZXR1cm4gX2V4dGVuZHMoe30sIGVudHJ5LCB7IGtleToga2V5IH0pO1xuXG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdVbmFibGUgdG8gY3JlYXRlIGhpc3RvcnkgZW50cnkgZnJvbSAlcycsIGVudHJ5KSA6IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UpIDogdW5kZWZpbmVkO1xuICB9KTtcblxuICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgY3VycmVudCA9IGVudHJpZXMubGVuZ3RoIC0gMTtcbiAgfSBlbHNlIHtcbiAgICAhKGN1cnJlbnQgPj0gMCAmJiBjdXJyZW50IDwgZW50cmllcy5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9pbnZhcmlhbnQyWydkZWZhdWx0J10oZmFsc2UsICdDdXJyZW50IGluZGV4IG11c3QgYmUgPj0gMCBhbmQgPCAlcywgd2FzICVzJywgZW50cmllcy5sZW5ndGgsIGN1cnJlbnQpIDogX2ludmFyaWFudDJbJ2RlZmF1bHQnXShmYWxzZSkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgc3RvcmFnZSA9IGNyZWF0ZVN0YXRlU3RvcmFnZShlbnRyaWVzKTtcblxuICBmdW5jdGlvbiBzYXZlU3RhdGUoa2V5LCBzdGF0ZSkge1xuICAgIHN0b3JhZ2Vba2V5XSA9IHN0YXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFN0YXRlKGtleSkge1xuICAgIHJldHVybiBzdG9yYWdlW2tleV07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tjdXJyZW50XTtcbiAgICB2YXIgYmFzZW5hbWUgPSBlbnRyeS5iYXNlbmFtZTtcbiAgICB2YXIgcGF0aG5hbWUgPSBlbnRyeS5wYXRobmFtZTtcbiAgICB2YXIgc2VhcmNoID0gZW50cnkuc2VhcmNoO1xuXG4gICAgdmFyIHBhdGggPSAoYmFzZW5hbWUgfHwgJycpICsgcGF0aG5hbWUgKyAoc2VhcmNoIHx8ICcnKTtcblxuICAgIHZhciBrZXkgPSB1bmRlZmluZWQsXG4gICAgICAgIHN0YXRlID0gdW5kZWZpbmVkO1xuICAgIGlmIChlbnRyeS5rZXkpIHtcbiAgICAgIGtleSA9IGVudHJ5LmtleTtcbiAgICAgIHN0YXRlID0gcmVhZFN0YXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IGhpc3RvcnkuY3JlYXRlS2V5KCk7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgICBlbnRyeS5rZXkgPSBrZXk7XG4gICAgfVxuXG4gICAgdmFyIGxvY2F0aW9uID0gX1BhdGhVdGlscy5wYXJzZVBhdGgocGF0aCk7XG5cbiAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVMb2NhdGlvbihfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHsgc3RhdGU6IHN0YXRlIH0pLCB1bmRlZmluZWQsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIGluZGV4ID0gY3VycmVudCArIG47XG4gICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBpZiAobikge1xuICAgICAgaWYgKCFjYW5HbyhuKSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdDYW5ub3QgZ28oJXMpIHRoZXJlIGlzIG5vdCBlbm91Z2ggaGlzdG9yeScsIG4pIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnQgKz0gbjtcblxuICAgICAgdmFyIGN1cnJlbnRMb2NhdGlvbiA9IGdldEN1cnJlbnRMb2NhdGlvbigpO1xuXG4gICAgICAvLyBjaGFuZ2UgYWN0aW9uIHRvIFBPUFxuICAgICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwgeyBhY3Rpb246IF9BY3Rpb25zLlBPUCB9KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoVHJhbnNpdGlvbihsb2NhdGlvbikge1xuICAgIHN3aXRjaCAobG9jYXRpb24uYWN0aW9uKSB7XG4gICAgICBjYXNlIF9BY3Rpb25zLlBVU0g6XG4gICAgICAgIGN1cnJlbnQgKz0gMTtcblxuICAgICAgICAvLyBpZiB3ZSBhcmUgbm90IG9uIHRoZSB0b3Agb2Ygc3RhY2tcbiAgICAgICAgLy8gcmVtb3ZlIHJlc3QgYW5kIHB1c2ggbmV3XG4gICAgICAgIGlmIChjdXJyZW50IDwgZW50cmllcy5sZW5ndGgpIGVudHJpZXMuc3BsaWNlKGN1cnJlbnQpO1xuXG4gICAgICAgIGVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICAgIHNhdmVTdGF0ZShsb2NhdGlvbi5rZXksIGxvY2F0aW9uLnN0YXRlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIF9BY3Rpb25zLlJFUExBQ0U6XG4gICAgICAgIGVudHJpZXNbY3VycmVudF0gPSBsb2NhdGlvbjtcbiAgICAgICAgc2F2ZVN0YXRlKGxvY2F0aW9uLmtleSwgbG9jYXRpb24uc3RhdGUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gY3JlYXRlTWVtb3J5SGlzdG9yeTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQWN0aW9uc1wiOjE1LFwiLi9QYXRoVXRpbHNcIjoyMCxcIi4vY3JlYXRlSGlzdG9yeVwiOjI0LFwiX3Byb2Nlc3NcIjozMyxcImludmFyaWFudFwiOjMyLFwid2FybmluZ1wiOjczfV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlKGZuLCBtZXNzYWdlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKGZhbHNlLCAnW2hpc3RvcnldICcgKyBtZXNzYWdlKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZGVwcmVjYXRlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiX3Byb2Nlc3NcIjozMyxcIndhcm5pbmdcIjo3M31dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIHJ1blRyYW5zaXRpb25Ib29rKGhvb2ssIGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gaG9vayhsb2NhdGlvbiwgY2FsbGJhY2spO1xuXG4gIGlmIChob29rLmxlbmd0aCA8IDIpIHtcbiAgICAvLyBBc3N1bWUgdGhlIGhvb2sgcnVucyBzeW5jaHJvbm91c2x5IGFuZCBhdXRvbWF0aWNhbGx5XG4gICAgLy8gY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCB0aGUgcmV0dXJuIHZhbHVlLlxuICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKHJlc3VsdCA9PT0gdW5kZWZpbmVkLCAnWW91IHNob3VsZCBub3QgXCJyZXR1cm5cIiBpbiBhIHRyYW5zaXRpb24gaG9vayB3aXRoIGEgY2FsbGJhY2sgYXJndW1lbnQ7IGNhbGwgdGhlIGNhbGxiYWNrIGluc3RlYWQnKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBydW5UcmFuc2l0aW9uSG9vaztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MzMsXCJ3YXJuaW5nXCI6NzN9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX0V4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2sgPSByZXF1aXJlKCcuL3J1blRyYW5zaXRpb25Ib29rJyk7XG5cbnZhciBfcnVuVHJhbnNpdGlvbkhvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnVuVHJhbnNpdGlvbkhvb2spO1xuXG52YXIgX2RlcHJlY2F0ZSA9IHJlcXVpcmUoJy4vZGVwcmVjYXRlJyk7XG5cbnZhciBfZGVwcmVjYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZSk7XG5cbmZ1bmN0aW9uIHVzZUJhc2VuYW1lKGNyZWF0ZUhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gICAgdmFyIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KG9wdGlvbnMpO1xuXG4gICAgdmFyIGJhc2VuYW1lID0gb3B0aW9ucy5iYXNlbmFtZTtcblxuICAgIHZhciBjaGVja2VkQmFzZUhyZWYgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNoZWNrQmFzZUhyZWYoKSB7XG4gICAgICBpZiAoY2hlY2tlZEJhc2VIcmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQXV0b21hdGljYWxseSB1c2UgdGhlIHZhbHVlIG9mIDxiYXNlIGhyZWY+IGluIEhUTUxcbiAgICAgIC8vIGRvY3VtZW50cyBhcyBiYXNlbmFtZSBpZiBpdCdzIG5vdCBleHBsaWNpdGx5IGdpdmVuLlxuICAgICAgaWYgKGJhc2VuYW1lID09IG51bGwgJiYgX0V4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgICAgICB2YXIgYmFzZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF07XG4gICAgICAgIHZhciBiYXNlSHJlZiA9IGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgICAgICBpZiAoYmFzZUhyZWYgIT0gbnVsbCkge1xuICAgICAgICAgIGJhc2VuYW1lID0gYmFzZUhyZWY7XG5cbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oZmFsc2UsICdBdXRvbWF0aWNhbGx5IHNldHRpbmcgYmFzZW5hbWUgdXNpbmcgPGJhc2UgaHJlZj4gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCAnICsgJ2JlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gVGhlIHNlbWFudGljcyBvZiA8YmFzZSBocmVmPiBhcmUgJyArICdzdWJ0bHkgZGlmZmVyZW50IGZyb20gYmFzZW5hbWUuIFBsZWFzZSBwYXNzIHRoZSBiYXNlbmFtZSBleHBsaWNpdGx5IGluICcgKyAndGhlIG9wdGlvbnMgdG8gY3JlYXRlSGlzdG9yeScpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoZWNrZWRCYXNlSHJlZiA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQmFzZW5hbWUobG9jYXRpb24pIHtcbiAgICAgIGNoZWNrQmFzZUhyZWYoKTtcblxuICAgICAgaWYgKGJhc2VuYW1lICYmIGxvY2F0aW9uLmJhc2VuYW1lID09IG51bGwpIHtcbiAgICAgICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZW5hbWUpID09PSAwKSB7XG4gICAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHJpbmcoYmFzZW5hbWUubGVuZ3RoKTtcbiAgICAgICAgICBsb2NhdGlvbi5iYXNlbmFtZSA9IGJhc2VuYW1lO1xuXG4gICAgICAgICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSAnJykgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uYmFzZW5hbWUgPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGVuZEJhc2VuYW1lKGxvY2F0aW9uKSB7XG4gICAgICBjaGVja0Jhc2VIcmVmKCk7XG5cbiAgICAgIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycpIGxvY2F0aW9uID0gX1BhdGhVdGlscy5wYXJzZVBhdGgobG9jYXRpb24pO1xuXG4gICAgICB2YXIgcG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgIHZhciBub3JtYWxpemVkQmFzZW5hbWUgPSBiYXNlbmFtZS5zbGljZSgtMSkgPT09ICcvJyA/IGJhc2VuYW1lIDogYmFzZW5hbWUgKyAnLyc7XG4gICAgICB2YXIgbm9ybWFsaXplZFBhdGhuYW1lID0gcG5hbWUuY2hhckF0KDApID09PSAnLycgPyBwbmFtZS5zbGljZSgxKSA6IHBuYW1lO1xuICAgICAgdmFyIHBhdGhuYW1lID0gbm9ybWFsaXplZEJhc2VuYW1lICsgbm9ybWFsaXplZFBhdGhuYW1lO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGUgYWxsIHJlYWQgbWV0aG9kcyB3aXRoIGJhc2VuYW1lLWF3YXJlIHZlcnNpb25zLlxuICAgIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShob29rKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW5CZWZvcmUoZnVuY3Rpb24gKGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICBfcnVuVHJhbnNpdGlvbkhvb2syWydkZWZhdWx0J10oaG9vaywgYWRkQmFzZW5hbWUobG9jYXRpb24pLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgbGlzdGVuZXIoYWRkQmFzZW5hbWUobG9jYXRpb24pKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIGFsbCB3cml0ZSBtZXRob2RzIHdpdGggYmFzZW5hbWUtYXdhcmUgdmVyc2lvbnMuXG4gICAgZnVuY3Rpb24gcHVzaChsb2NhdGlvbikge1xuICAgICAgaGlzdG9yeS5wdXNoKHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24pIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZShwcmVwZW5kQmFzZW5hbWUobG9jYXRpb24pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVQYXRoKHByZXBlbmRCYXNlbmFtZShsb2NhdGlvbikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUhyZWYocHJlcGVuZEJhc2VuYW1lKGxvY2F0aW9uKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFkZEJhc2VuYW1lKGhpc3RvcnkuY3JlYXRlTG9jYXRpb24uYXBwbHkoaGlzdG9yeSwgW3ByZXBlbmRCYXNlbmFtZShsb2NhdGlvbildLmNvbmNhdChhcmdzKSkpO1xuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBmdW5jdGlvbiBwdXNoU3RhdGUoc3RhdGUsIHBhdGgpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHBhdGggPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChwYXRoKTtcblxuICAgICAgcHVzaChfZXh0ZW5kcyh7IHN0YXRlOiBzdGF0ZSB9LCBwYXRoKSk7XG4gICAgfVxuXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VTdGF0ZShzdGF0ZSwgcGF0aCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKHBhdGgpO1xuXG4gICAgICByZXBsYWNlKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgICBwdXNoOiBwdXNoLFxuICAgICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxuXG4gICAgICBwdXNoU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocHVzaFN0YXRlLCAncHVzaFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBwdXNoIGluc3RlYWQnKSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHVzZUJhc2VuYW1lO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9FeGVjdXRpb25FbnZpcm9ubWVudFwiOjE5LFwiLi9QYXRoVXRpbHNcIjoyMCxcIi4vZGVwcmVjYXRlXCI6MjcsXCIuL3J1blRyYW5zaXRpb25Ib29rXCI6MjgsXCJfcHJvY2Vzc1wiOjMzLFwid2FybmluZ1wiOjczfV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9xdWVyeVN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5LXN0cmluZycpO1xuXG52YXIgX3J1blRyYW5zaXRpb25Ib29rID0gcmVxdWlyZSgnLi9ydW5UcmFuc2l0aW9uSG9vaycpO1xuXG52YXIgX3J1blRyYW5zaXRpb25Ib29rMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3J1blRyYW5zaXRpb25Ib29rKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2RlcHJlY2F0ZSA9IHJlcXVpcmUoJy4vZGVwcmVjYXRlJyk7XG5cbnZhciBfZGVwcmVjYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlcHJlY2F0ZSk7XG5cbnZhciBTRUFSQ0hfQkFTRV9LRVkgPSAnJHNlYXJjaEJhc2UnO1xuXG5mdW5jdGlvbiBkZWZhdWx0U3RyaW5naWZ5UXVlcnkocXVlcnkpIHtcbiAgcmV0dXJuIF9xdWVyeVN0cmluZy5zdHJpbmdpZnkocXVlcnkpLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xufVxuXG52YXIgZGVmYXVsdFBhcnNlUXVlcnlTdHJpbmcgPSBfcXVlcnlTdHJpbmcucGFyc2U7XG5cbmZ1bmN0aW9uIGlzTmVzdGVkT2JqZWN0KG9iamVjdCkge1xuICBmb3IgKHZhciBwIGluIG9iamVjdCkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwKSAmJiB0eXBlb2Ygb2JqZWN0W3BdID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShvYmplY3RbcF0pICYmIG9iamVjdFtwXSAhPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIH1yZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjcmVhdGVIaXN0b3J5IGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY3JlYXRlXG4gKiBoaXN0b3J5IG9iamVjdHMgdGhhdCBrbm93IGhvdyB0byBoYW5kbGUgVVJMIHF1ZXJpZXMuXG4gKi9cbmZ1bmN0aW9uIHVzZVF1ZXJpZXMoY3JlYXRlSGlzdG9yeSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cbiAgICB2YXIgaGlzdG9yeSA9IGNyZWF0ZUhpc3Rvcnkob3B0aW9ucyk7XG5cbiAgICB2YXIgc3RyaW5naWZ5UXVlcnkgPSBvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuICAgIHZhciBwYXJzZVF1ZXJ5U3RyaW5nID0gb3B0aW9ucy5wYXJzZVF1ZXJ5U3RyaW5nO1xuXG4gICAgaWYgKHR5cGVvZiBzdHJpbmdpZnlRdWVyeSAhPT0gJ2Z1bmN0aW9uJykgc3RyaW5naWZ5UXVlcnkgPSBkZWZhdWx0U3RyaW5naWZ5UXVlcnk7XG5cbiAgICBpZiAodHlwZW9mIHBhcnNlUXVlcnlTdHJpbmcgIT09ICdmdW5jdGlvbicpIHBhcnNlUXVlcnlTdHJpbmcgPSBkZWZhdWx0UGFyc2VRdWVyeVN0cmluZztcblxuICAgIGZ1bmN0aW9uIGFkZFF1ZXJ5KGxvY2F0aW9uKSB7XG4gICAgICBpZiAobG9jYXRpb24ucXVlcnkgPT0gbnVsbCkge1xuICAgICAgICB2YXIgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuXG4gICAgICAgIGxvY2F0aW9uLnF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhzZWFyY2guc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgbG9jYXRpb25bU0VBUkNIX0JBU0VfS0VZXSA9IHsgc2VhcmNoOiBzZWFyY2gsIHNlYXJjaEJhc2U6ICcnIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE86IEluc3RlYWQgb2YgYWxsIHRoZSBib29rLWtlZXBpbmcgaGVyZSwgdGhpcyBzaG91bGQganVzdCBzdHJpcCB0aGVcbiAgICAgIC8vIHN0cmluZ2lmaWVkIHF1ZXJ5IGZyb20gdGhlIHNlYXJjaC5cblxuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBxdWVyeSkge1xuICAgICAgdmFyIF9leHRlbmRzMjtcblxuICAgICAgdmFyIHNlYXJjaEJhc2VTcGVjID0gbG9jYXRpb25bU0VBUkNIX0JBU0VfS0VZXTtcbiAgICAgIHZhciBxdWVyeVN0cmluZyA9IHF1ZXJ5ID8gc3RyaW5naWZ5UXVlcnkocXVlcnkpIDogJyc7XG4gICAgICBpZiAoIXNlYXJjaEJhc2VTcGVjICYmICFxdWVyeVN0cmluZykge1xuICAgICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfd2FybmluZzJbJ2RlZmF1bHQnXShzdHJpbmdpZnlRdWVyeSAhPT0gZGVmYXVsdFN0cmluZ2lmeVF1ZXJ5IHx8ICFpc05lc3RlZE9iamVjdChxdWVyeSksICd1c2VRdWVyaWVzIGRvZXMgbm90IHN0cmluZ2lmeSBuZXN0ZWQgcXVlcnkgb2JqZWN0cyBieSBkZWZhdWx0OyAnICsgJ3VzZSBhIGN1c3RvbSBzdHJpbmdpZnlRdWVyeSBmdW5jdGlvbicpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJykgbG9jYXRpb24gPSBfUGF0aFV0aWxzLnBhcnNlUGF0aChsb2NhdGlvbik7XG5cbiAgICAgIHZhciBzZWFyY2hCYXNlID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKHNlYXJjaEJhc2VTcGVjICYmIGxvY2F0aW9uLnNlYXJjaCA9PT0gc2VhcmNoQmFzZVNwZWMuc2VhcmNoKSB7XG4gICAgICAgIHNlYXJjaEJhc2UgPSBzZWFyY2hCYXNlU3BlYy5zZWFyY2hCYXNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VhcmNoQmFzZSA9IGxvY2F0aW9uLnNlYXJjaCB8fCAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNlYXJjaCA9IHNlYXJjaEJhc2U7XG4gICAgICBpZiAocXVlcnlTdHJpbmcpIHtcbiAgICAgICAgc2VhcmNoICs9IChzZWFyY2ggPyAnJicgOiAnPycpICsgcXVlcnlTdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIChfZXh0ZW5kczIgPSB7XG4gICAgICAgIHNlYXJjaDogc2VhcmNoXG4gICAgICB9LCBfZXh0ZW5kczJbU0VBUkNIX0JBU0VfS0VZXSA9IHsgc2VhcmNoOiBzZWFyY2gsIHNlYXJjaEJhc2U6IHNlYXJjaEJhc2UgfSwgX2V4dGVuZHMyKSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGUgYWxsIHJlYWQgbWV0aG9kcyB3aXRoIHF1ZXJ5LWF3YXJlIHZlcnNpb25zLlxuICAgIGZ1bmN0aW9uIGxpc3RlbkJlZm9yZShob29rKSB7XG4gICAgICByZXR1cm4gaGlzdG9yeS5saXN0ZW5CZWZvcmUoZnVuY3Rpb24gKGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICBfcnVuVHJhbnNpdGlvbkhvb2syWydkZWZhdWx0J10oaG9vaywgYWRkUXVlcnkobG9jYXRpb24pLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgbGlzdGVuZXIoYWRkUXVlcnkobG9jYXRpb24pKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIGFsbCB3cml0ZSBtZXRob2RzIHdpdGggcXVlcnktYXdhcmUgdmVyc2lvbnMuXG4gICAgZnVuY3Rpb24gcHVzaChsb2NhdGlvbikge1xuICAgICAgaGlzdG9yeS5wdXNoKGFwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBsb2NhdGlvbi5xdWVyeSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcGxhY2UobG9jYXRpb24pIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZShhcHBlbmRRdWVyeShsb2NhdGlvbiwgbG9jYXRpb24ucXVlcnkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uLCBxdWVyeSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF93YXJuaW5nMlsnZGVmYXVsdCddKCFxdWVyeSwgJ3RoZSBxdWVyeSBhcmd1bWVudCB0byBjcmVhdGVQYXRoIGlzIGRlcHJlY2F0ZWQ7IHVzZSBhIGxvY2F0aW9uIGRlc2NyaXB0b3IgaW5zdGVhZCcpIDogdW5kZWZpbmVkO1xuXG4gICAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVQYXRoKGFwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBxdWVyeSB8fCBsb2NhdGlvbi5xdWVyeSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24sIHF1ZXJ5KSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX3dhcm5pbmcyWydkZWZhdWx0J10oIXF1ZXJ5LCAndGhlIHF1ZXJ5IGFyZ3VtZW50IHRvIGNyZWF0ZUhyZWYgaXMgZGVwcmVjYXRlZDsgdXNlIGEgbG9jYXRpb24gZGVzY3JpcHRvciBpbnN0ZWFkJykgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBoaXN0b3J5LmNyZWF0ZUhyZWYoYXBwZW5kUXVlcnkobG9jYXRpb24sIHF1ZXJ5IHx8IGxvY2F0aW9uLnF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZ1bGxMb2NhdGlvbiA9IGhpc3RvcnkuY3JlYXRlTG9jYXRpb24uYXBwbHkoaGlzdG9yeSwgW2FwcGVuZFF1ZXJ5KGxvY2F0aW9uLCBsb2NhdGlvbi5xdWVyeSldLmNvbmNhdChhcmdzKSk7XG4gICAgICBpZiAobG9jYXRpb24ucXVlcnkpIHtcbiAgICAgICAgZnVsbExvY2F0aW9uLnF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWRkUXVlcnkoZnVsbExvY2F0aW9uKTtcbiAgICB9XG5cbiAgICAvLyBkZXByZWNhdGVkXG4gICAgZnVuY3Rpb24gcHVzaFN0YXRlKHN0YXRlLCBwYXRoLCBxdWVyeSkge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKHBhdGgpO1xuXG4gICAgICBwdXNoKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgsIHsgcXVlcnk6IHF1ZXJ5IH0pKTtcbiAgICB9XG5cbiAgICAvLyBkZXByZWNhdGVkXG4gICAgZnVuY3Rpb24gcmVwbGFjZVN0YXRlKHN0YXRlLCBwYXRoLCBxdWVyeSkge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykgcGF0aCA9IF9QYXRoVXRpbHMucGFyc2VQYXRoKHBhdGgpO1xuXG4gICAgICByZXBsYWNlKF9leHRlbmRzKHsgc3RhdGU6IHN0YXRlIH0sIHBhdGgsIHsgcXVlcnk6IHF1ZXJ5IH0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgIGxpc3RlbkJlZm9yZTogbGlzdGVuQmVmb3JlLFxuICAgICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgICBwdXNoOiBwdXNoLFxuICAgICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICAgIGNyZWF0ZVBhdGg6IGNyZWF0ZVBhdGgsXG4gICAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgICAgY3JlYXRlTG9jYXRpb246IGNyZWF0ZUxvY2F0aW9uLFxuXG4gICAgICBwdXNoU3RhdGU6IF9kZXByZWNhdGUyWydkZWZhdWx0J10ocHVzaFN0YXRlLCAncHVzaFN0YXRlIGlzIGRlcHJlY2F0ZWQ7IHVzZSBwdXNoIGluc3RlYWQnKSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogX2RlcHJlY2F0ZTJbJ2RlZmF1bHQnXShyZXBsYWNlU3RhdGUsICdyZXBsYWNlU3RhdGUgaXMgZGVwcmVjYXRlZDsgdXNlIHJlcGxhY2UgaW5zdGVhZCcpXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHVzZVF1ZXJpZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1BhdGhVdGlsc1wiOjIwLFwiLi9kZXByZWNhdGVcIjoyNyxcIi4vcnVuVHJhbnNpdGlvbkhvb2tcIjoyOCxcIl9wcm9jZXNzXCI6MzMsXCJxdWVyeS1zdHJpbmdcIjozNCxcIndhcm5pbmdcIjo3M31dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5c1tpXV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5c1tpXV0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRDb21wb25lbnRba2V5c1tpXV0gPSBzb3VyY2VDb21wb25lbnRba2V5c1tpXV07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59O1xuXG59LHt9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MzN9XSwzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxufSx7fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHN0cmljdFVyaUVuY29kZSA9IHJlcXVpcmUoJ3N0cmljdC11cmktZW5jb2RlJyk7XG5cbmV4cG9ydHMuZXh0cmFjdCA9IGZ1bmN0aW9uIChzdHIpIHtcblx0cmV0dXJuIHN0ci5zcGxpdCgnPycpWzFdIHx8ICcnO1xufTtcblxuZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHt9O1xuXHR9XG5cblx0c3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKC9eKFxcP3wjfCYpLywgJycpO1xuXG5cdGlmICghc3RyKSB7XG5cdFx0cmV0dXJuIHt9O1xuXHR9XG5cblx0cmV0dXJuIHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbiAocmV0LCBwYXJhbSkge1xuXHRcdHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG5cdFx0Ly8gRmlyZWZveCAocHJlIDQwKSBkZWNvZGVzIGAlM0RgIHRvIGA9YFxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nL3B1bGwvMzdcblx0XHR2YXIga2V5ID0gcGFydHMuc2hpZnQoKTtcblx0XHR2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzLmpvaW4oJz0nKSA6IHVuZGVmaW5lZDtcblxuXHRcdGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG5cdFx0Ly8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcblx0XHQvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG5cdFx0dmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cblx0XHRpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRyZXRba2V5XSA9IHZhbDtcblx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG5cdFx0XHRyZXRba2V5XS5wdXNoKHZhbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sIHt9KTtcbn07XG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gb2JqID8gT2JqZWN0LmtleXMob2JqKS5zb3J0KCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHR2YXIgdmFsID0gb2JqW2tleV07XG5cblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAodmFsID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4ga2V5O1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdHJldHVybiB2YWwuc2xpY2UoKS5zb3J0KCkubWFwKGZ1bmN0aW9uICh2YWwyKSB7XG5cdFx0XHRcdHJldHVybiBzdHJpY3RVcmlFbmNvZGUoa2V5KSArICc9JyArIHN0cmljdFVyaUVuY29kZSh2YWwyKTtcblx0XHRcdH0pLmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3RyaWN0VXJpRW5jb2RlKGtleSkgKyAnPScgKyBzdHJpY3RVcmlFbmNvZGUodmFsKTtcblx0fSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG5cdFx0cmV0dXJuIHgubGVuZ3RoID4gMDtcblx0fSkuam9pbignJicpIDogJyc7XG59O1xuXG59LHtcInN0cmljdC11cmktZW5jb2RlXCI6NzJ9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMubG9vcEFzeW5jID0gbG9vcEFzeW5jO1xuZXhwb3J0cy5tYXBBc3luYyA9IG1hcEFzeW5jO1xuZnVuY3Rpb24gbG9vcEFzeW5jKHR1cm5zLCB3b3JrLCBjYWxsYmFjaykge1xuICB2YXIgY3VycmVudFR1cm4gPSAwLFxuICAgICAgaXNEb25lID0gZmFsc2U7XG4gIHZhciBzeW5jID0gZmFsc2UsXG4gICAgICBoYXNOZXh0ID0gZmFsc2UsXG4gICAgICBkb25lQXJncyA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiBkb25lKCkge1xuICAgIGlzRG9uZSA9IHRydWU7XG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8vIEl0ZXJhdGUgaW5zdGVhZCBvZiByZWN1cnNpbmcgaWYgcG9zc2libGUuXG4gICAgICBkb25lQXJncyA9IFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICBpZiAoaXNEb25lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaGFzTmV4dCA9IHRydWU7XG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8vIEl0ZXJhdGUgaW5zdGVhZCBvZiByZWN1cnNpbmcgaWYgcG9zc2libGUuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luYyA9IHRydWU7XG5cbiAgICB3aGlsZSAoIWlzRG9uZSAmJiBjdXJyZW50VHVybiA8IHR1cm5zICYmIGhhc05leHQpIHtcbiAgICAgIGhhc05leHQgPSBmYWxzZTtcbiAgICAgIHdvcmsuY2FsbCh0aGlzLCBjdXJyZW50VHVybisrLCBuZXh0LCBkb25lKTtcbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG5cbiAgICBpZiAoaXNEb25lKSB7XG4gICAgICAvLyBUaGlzIG1lYW5zIHRoZSBsb29wIGZpbmlzaGVkIHN5bmNocm9ub3VzbHkuXG4gICAgICBjYWxsYmFjay5hcHBseSh0aGlzLCBkb25lQXJncyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRUdXJuID49IHR1cm5zICYmIGhhc05leHQpIHtcbiAgICAgIGlzRG9uZSA9IHRydWU7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIG5leHQoKTtcbn1cblxuZnVuY3Rpb24gbWFwQXN5bmMoYXJyYXksIHdvcmssIGNhbGxiYWNrKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciB2YWx1ZXMgPSBbXTtcblxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgdmFsdWVzKTtcblxuICB2YXIgaXNEb25lID0gZmFsc2UsXG4gICAgICBkb25lQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGRvbmUoaW5kZXgsIGVycm9yLCB2YWx1ZSkge1xuICAgIGlmIChpc0RvbmUpIHJldHVybjtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgaXNEb25lID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuXG4gICAgICBpc0RvbmUgPSArK2RvbmVDb3VudCA9PT0gbGVuZ3RoO1xuXG4gICAgICBpZiAoaXNEb25lKSBjYWxsYmFjayhudWxsLCB2YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgd29yayhpdGVtLCBpbmRleCwgZnVuY3Rpb24gKGVycm9yLCB2YWx1ZSkge1xuICAgICAgZG9uZShpbmRleCwgZXJyb3IsIHZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG59XG59LHt9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG52YXIgX0ludGVybmFsUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9JbnRlcm5hbFByb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEEgbWl4aW4gdGhhdCBhZGRzIHRoZSBcImhpc3RvcnlcIiBpbnN0YW5jZSB2YXJpYWJsZSB0byBjb21wb25lbnRzLlxuICovXG52YXIgSGlzdG9yeSA9IHtcblxuICBjb250ZXh0VHlwZXM6IHtcbiAgICBoaXN0b3J5OiBfSW50ZXJuYWxQcm9wVHlwZXMuaGlzdG9yeVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAndGhlIGBIaXN0b3J5YCBtaXhpbiBpcyBkZXByZWNhdGVkLCBwbGVhc2UgYWNjZXNzIGBjb250ZXh0LnJvdXRlcmAgd2l0aCB5b3VyIG93biBgY29udGV4dFR5cGVzYC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWhpc3RvcnltaXhpbicpIDogdm9pZCAwO1xuICAgIHRoaXMuaGlzdG9yeSA9IHRoaXMuY29udGV4dC5oaXN0b3J5O1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBIaXN0b3J5O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9JbnRlcm5hbFByb3BUeXBlc1wiOjQwLFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzfV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfTGluayA9IHJlcXVpcmUoJy4vTGluaycpO1xuXG52YXIgX0xpbmsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQW4gPEluZGV4TGluaz4gaXMgdXNlZCB0byBsaW5rIHRvIGFuIDxJbmRleFJvdXRlPi5cbiAqL1xudmFyIEluZGV4TGluayA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnSW5kZXhMaW5rJyxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MaW5rMi5kZWZhdWx0LCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgeyBvbmx5QWN0aXZlT25JbmRleDogdHJ1ZSB9KSk7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBJbmRleExpbms7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9MaW5rXCI6NDIsXCJyZWFjdFwiOlwicmVhY3RcIn1dLDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nID0gcmVxdWlyZSgnLi9yb3V0ZXJXYXJuaW5nJyk7XG5cbnZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9SZWRpcmVjdCA9IHJlcXVpcmUoJy4vUmVkaXJlY3QnKTtcblxudmFyIF9SZWRpcmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWRpcmVjdCk7XG5cbnZhciBfSW50ZXJuYWxQcm9wVHlwZXMgPSByZXF1aXJlKCcuL0ludGVybmFsUHJvcFR5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBfUmVhY3QkUHJvcFR5cGVzID0gX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcztcbnZhciBzdHJpbmcgPSBfUmVhY3QkUHJvcFR5cGVzLnN0cmluZztcbnZhciBvYmplY3QgPSBfUmVhY3QkUHJvcFR5cGVzLm9iamVjdDtcblxuLyoqXG4gKiBBbiA8SW5kZXhSZWRpcmVjdD4gaXMgdXNlZCB0byByZWRpcmVjdCBmcm9tIGFuIGluZGV4Um91dGUuXG4gKi9cblxudmFyIEluZGV4UmVkaXJlY3QgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0luZGV4UmVkaXJlY3QnLFxuXG5cbiAgc3RhdGljczoge1xuICAgIGNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudDogZnVuY3Rpb24gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQsIHBhcmVudFJvdXRlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZTogc2FuaXR5IGNoZWNrICovXG4gICAgICBpZiAocGFyZW50Um91dGUpIHtcbiAgICAgICAgcGFyZW50Um91dGUuaW5kZXhSb3V0ZSA9IF9SZWRpcmVjdDIuZGVmYXVsdC5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0FuIDxJbmRleFJlZGlyZWN0PiBkb2VzIG5vdCBtYWtlIHNlbnNlIGF0IHRoZSByb290IG9mIHlvdXIgcm91dGUgY29uZmlnJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHRvOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBxdWVyeTogb2JqZWN0LFxuICAgIHN0YXRlOiBvYmplY3QsXG4gICAgb25FbnRlcjogX0ludGVybmFsUHJvcFR5cGVzLmZhbHN5LFxuICAgIGNoaWxkcmVuOiBfSW50ZXJuYWxQcm9wVHlwZXMuZmFsc3lcbiAgfSxcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2FuaXR5IGNoZWNrICovXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICc8SW5kZXhSZWRpcmVjdD4gZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSW5kZXhSZWRpcmVjdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vSW50ZXJuYWxQcm9wVHlwZXNcIjo0MCxcIi4vUmVkaXJlY3RcIjo0NSxcIi4vcm91dGVyV2FybmluZ1wiOjY4LFwiX3Byb2Nlc3NcIjozMyxcImludmFyaWFudFwiOjMyLFwicmVhY3RcIjpcInJlYWN0XCJ9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcm91dGVyV2FybmluZyA9IHJlcXVpcmUoJy4vcm91dGVyV2FybmluZycpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG52YXIgX0ludGVybmFsUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9JbnRlcm5hbFByb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZnVuYyA9IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuZnVuYztcblxuLyoqXG4gKiBBbiA8SW5kZXhSb3V0ZT4gaXMgdXNlZCB0byBzcGVjaWZ5IGl0cyBwYXJlbnQncyA8Um91dGUgaW5kZXhSb3V0ZT4gaW5cbiAqIGEgSlNYIHJvdXRlIGNvbmZpZy5cbiAqL1xuXG52YXIgSW5kZXhSb3V0ZSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnSW5kZXhSb3V0ZScsXG5cblxuICBzdGF0aWNzOiB7XG4gICAgY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCwgcGFyZW50Um91dGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlOiBzYW5pdHkgY2hlY2sgKi9cbiAgICAgIGlmIChwYXJlbnRSb3V0ZSkge1xuICAgICAgICBwYXJlbnRSb3V0ZS5pbmRleFJvdXRlID0gKDAsIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCkoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0FuIDxJbmRleFJvdXRlPiBkb2VzIG5vdCBtYWtlIHNlbnNlIGF0IHRoZSByb290IG9mIHlvdXIgcm91dGUgY29uZmlnJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHBhdGg6IF9JbnRlcm5hbFByb3BUeXBlcy5mYWxzeSxcbiAgICBjb21wb25lbnQ6IF9JbnRlcm5hbFByb3BUeXBlcy5jb21wb25lbnQsXG4gICAgY29tcG9uZW50czogX0ludGVybmFsUHJvcFR5cGVzLmNvbXBvbmVudHMsXG4gICAgZ2V0Q29tcG9uZW50OiBmdW5jLFxuICAgIGdldENvbXBvbmVudHM6IGZ1bmNcbiAgfSxcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2FuaXR5IGNoZWNrICovXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICc8SW5kZXhSb3V0ZT4gZWxlbWVudHMgYXJlIGZvciByb3V0ZXIgY29uZmlndXJhdGlvbiBvbmx5IGFuZCBzaG91bGQgbm90IGJlIHJlbmRlcmVkJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSW5kZXhSb3V0ZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vSW50ZXJuYWxQcm9wVHlwZXNcIjo0MCxcIi4vUm91dGVVdGlsc1wiOjQ4LFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzLFwiaW52YXJpYW50XCI6MzIsXCJyZWFjdFwiOlwicmVhY3RcIn1dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucm91dGVzID0gZXhwb3J0cy5yb3V0ZSA9IGV4cG9ydHMuY29tcG9uZW50cyA9IGV4cG9ydHMuY29tcG9uZW50ID0gZXhwb3J0cy5oaXN0b3J5ID0gdW5kZWZpbmVkO1xuZXhwb3J0cy5mYWxzeSA9IGZhbHN5O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX3JlYWN0LlByb3BUeXBlcy5vYmplY3Q7XG52YXIgYXJyYXlPZiA9IF9yZWFjdC5Qcm9wVHlwZXMuYXJyYXlPZjtcbnZhciBvbmVPZlR5cGUgPSBfcmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZTtcbnZhciBlbGVtZW50ID0gX3JlYWN0LlByb3BUeXBlcy5lbGVtZW50O1xudmFyIHNoYXBlID0gX3JlYWN0LlByb3BUeXBlcy5zaGFwZTtcbnZhciBzdHJpbmcgPSBfcmVhY3QuUHJvcFR5cGVzLnN0cmluZztcbmZ1bmN0aW9uIGZhbHN5KHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAocHJvcHNbcHJvcE5hbWVdKSByZXR1cm4gbmV3IEVycm9yKCc8JyArIGNvbXBvbmVudE5hbWUgKyAnPiBzaG91bGQgbm90IGhhdmUgYSBcIicgKyBwcm9wTmFtZSArICdcIiBwcm9wJyk7XG59XG5cbnZhciBoaXN0b3J5ID0gZXhwb3J0cy5oaXN0b3J5ID0gc2hhcGUoe1xuICBsaXN0ZW46IGZ1bmMuaXNSZXF1aXJlZCxcbiAgcHVzaDogZnVuYy5pc1JlcXVpcmVkLFxuICByZXBsYWNlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGdvOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGdvQmFjazogZnVuYy5pc1JlcXVpcmVkLFxuICBnb0ZvcndhcmQ6IGZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbnZhciBjb21wb25lbnQgPSBleHBvcnRzLmNvbXBvbmVudCA9IG9uZU9mVHlwZShbZnVuYywgc3RyaW5nXSk7XG52YXIgY29tcG9uZW50cyA9IGV4cG9ydHMuY29tcG9uZW50cyA9IG9uZU9mVHlwZShbY29tcG9uZW50LCBvYmplY3RdKTtcbnZhciByb3V0ZSA9IGV4cG9ydHMucm91dGUgPSBvbmVPZlR5cGUoW29iamVjdCwgZWxlbWVudF0pO1xudmFyIHJvdXRlcyA9IGV4cG9ydHMucm91dGVzID0gb25lT2ZUeXBlKFtyb3V0ZSwgYXJyYXlPZihyb3V0ZSldKTtcbn0se1wicmVhY3RcIjpcInJlYWN0XCJ9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBvYmplY3QgPSBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLm9iamVjdDtcblxuLyoqXG4gKiBUaGUgTGlmZWN5Y2xlIG1peGluIGFkZHMgdGhlIHJvdXRlcldpbGxMZWF2ZSBsaWZlY3ljbGUgbWV0aG9kIHRvIGFcbiAqIGNvbXBvbmVudCB0aGF0IG1heSBiZSB1c2VkIHRvIGNhbmNlbCBhIHRyYW5zaXRpb24gb3IgcHJvbXB0IHRoZSB1c2VyXG4gKiBmb3IgY29uZmlybWF0aW9uLlxuICpcbiAqIE9uIHN0YW5kYXJkIHRyYW5zaXRpb25zLCByb3V0ZXJXaWxsTGVhdmUgcmVjZWl2ZXMgYSBzaW5nbGUgYXJndW1lbnQ6IHRoZVxuICogbG9jYXRpb24gd2UncmUgdHJhbnNpdGlvbmluZyB0by4gVG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLCByZXR1cm4gZmFsc2UuXG4gKiBUbyBwcm9tcHQgdGhlIHVzZXIgZm9yIGNvbmZpcm1hdGlvbiwgcmV0dXJuIGEgcHJvbXB0IG1lc3NhZ2UgKHN0cmluZykuXG4gKlxuICogRHVyaW5nIHRoZSBiZWZvcmV1bmxvYWQgZXZlbnQgKGFzc3VtaW5nIHlvdSdyZSB1c2luZyB0aGUgdXNlQmVmb3JlVW5sb2FkXG4gKiBoaXN0b3J5IGVuaGFuY2VyKSwgcm91dGVyV2lsbExlYXZlIGRvZXMgbm90IHJlY2VpdmUgYSBsb2NhdGlvbiBvYmplY3RcbiAqIGJlY2F1c2UgaXQgaXNuJ3QgcG9zc2libGUgZm9yIHVzIHRvIGtub3cgdGhlIGxvY2F0aW9uIHdlJ3JlIHRyYW5zaXRpb25pbmdcbiAqIHRvLiBJbiB0aGlzIGNhc2Ugcm91dGVyV2lsbExlYXZlIG11c3QgcmV0dXJuIGEgcHJvbXB0IG1lc3NhZ2UgdG8gcHJldmVudFxuICogdGhlIHVzZXIgZnJvbSBjbG9zaW5nIHRoZSB3aW5kb3cvdGFiLlxuICovXG5cbnZhciBMaWZlY3ljbGUgPSB7XG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgaGlzdG9yeTogb2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgLy8gTmVzdGVkIGNoaWxkcmVuIHJlY2VpdmUgdGhlIHJvdXRlIGFzIGNvbnRleHQsIGVpdGhlclxuICAgIC8vIHNldCBieSB0aGUgcm91dGUgY29tcG9uZW50IHVzaW5nIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW5cbiAgICAvLyBvciBieSBzb21lIG90aGVyIGFuY2VzdG9yLlxuICAgIHJvdXRlOiBvYmplY3RcbiAgfSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvLyBSb3V0ZSBjb21wb25lbnRzIHJlY2VpdmUgdGhlIHJvdXRlIG9iamVjdCBhcyBhIHByb3AuXG4gICAgcm91dGU6IG9iamVjdFxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ3RoZSBgTGlmZWN5Y2xlYCBtaXhpbiBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIGBjb250ZXh0LnJvdXRlci5zZXRSb3V0ZUxlYXZlSG9vayhyb3V0ZSwgaG9vaylgLiBodHRwOi8vdGlueS5jYy9yb3V0ZXItbGlmZWN5Y2xlbWl4aW4nKSA6IHZvaWQgMDtcbiAgICAhdGhpcy5yb3V0ZXJXaWxsTGVhdmUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnVGhlIExpZmVjeWNsZSBtaXhpbiByZXF1aXJlcyB5b3UgdG8gZGVmaW5lIGEgcm91dGVyV2lsbExlYXZlIG1ldGhvZCcpIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciByb3V0ZSA9IHRoaXMucHJvcHMucm91dGUgfHwgdGhpcy5jb250ZXh0LnJvdXRlO1xuXG4gICAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ1RoZSBMaWZlY3ljbGUgbWl4aW4gbXVzdCBiZSB1c2VkIG9uIGVpdGhlciBhKSBhIDxSb3V0ZSBjb21wb25lbnQ+IG9yICcgKyAnYikgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlIGNvbXBvbmVudD4gdGhhdCB1c2VzIHRoZSBSb3V0ZUNvbnRleHQgbWl4aW4nKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB0aGlzLl91bmxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSA9IHRoaXMuY29udGV4dC5oaXN0b3J5Lmxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZShyb3V0ZSwgdGhpcy5yb3V0ZXJXaWxsTGVhdmUpO1xuICB9LFxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX3VubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKSB0aGlzLl91bmxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZSgpO1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBMaWZlY3ljbGU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL3JvdXRlcldhcm5pbmdcIjo2OCxcIl9wcm9jZXNzXCI6MzMsXCJpbnZhcmlhbnRcIjozMixcInJlYWN0XCI6XCJyZWFjdFwifV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG52YXIgX1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzO1xudmFyIGJvb2wgPSBfUmVhY3QkUHJvcFR5cGVzLmJvb2w7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG52YXIgc3RyaW5nID0gX1JlYWN0JFByb3BUeXBlcy5zdHJpbmc7XG52YXIgZnVuYyA9IF9SZWFjdCRQcm9wVHlwZXMuZnVuYztcbnZhciBvbmVPZlR5cGUgPSBfUmVhY3QkUHJvcFR5cGVzLm9uZU9mVHlwZTtcblxuXG5mdW5jdGlvbiBpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbi8vIFRPRE86IERlLWR1cGxpY2F0ZSBhZ2FpbnN0IGhhc0FueVByb3BlcnRpZXMgaW4gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuXG5mdW5jdGlvbiBpc0VtcHR5T2JqZWN0KG9iamVjdCkge1xuICBmb3IgKHZhciBwIGluIG9iamVjdCkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwKSkgcmV0dXJuIGZhbHNlO1xuICB9cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uRGVzY3JpcHRvcih0bywgX3JlZikge1xuICB2YXIgcXVlcnkgPSBfcmVmLnF1ZXJ5O1xuICB2YXIgaGFzaCA9IF9yZWYuaGFzaDtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICBpZiAocXVlcnkgfHwgaGFzaCB8fCBzdGF0ZSkge1xuICAgIHJldHVybiB7IHBhdGhuYW1lOiB0bywgcXVlcnk6IHF1ZXJ5LCBoYXNoOiBoYXNoLCBzdGF0ZTogc3RhdGUgfTtcbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiBpcyB1c2VkIHRvIGNyZWF0ZSBhbiA8YT4gZWxlbWVudCB0aGF0IGxpbmtzIHRvIGEgcm91dGUuXG4gKiBXaGVuIHRoYXQgcm91dGUgaXMgYWN0aXZlLCB0aGUgbGluayBnZXRzIHRoZSB2YWx1ZSBvZiBpdHNcbiAqIGFjdGl2ZUNsYXNzTmFtZSBwcm9wLlxuICpcbiAqIEZvciBleGFtcGxlLCBhc3N1bWluZyB5b3UgaGF2ZSB0aGUgZm9sbG93aW5nIHJvdXRlOlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvcG9zdHMvOnBvc3RJRFwiIGNvbXBvbmVudD17UG9zdH0gLz5cbiAqXG4gKiBZb3UgY291bGQgdXNlIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50IHRvIGxpbmsgdG8gdGhhdCByb3V0ZTpcbiAqXG4gKiAgIDxMaW5rIHRvPXtgL3Bvc3RzLyR7cG9zdC5pZH1gfSAvPlxuICpcbiAqIExpbmtzIG1heSBwYXNzIGFsb25nIGxvY2F0aW9uIHN0YXRlIGFuZC9vciBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyc1xuICogaW4gdGhlIHN0YXRlL3F1ZXJ5IHByb3BzLCByZXNwZWN0aXZlbHkuXG4gKlxuICogICA8TGluayAuLi4gcXVlcnk9e3sgc2hvdzogdHJ1ZSB9fSBzdGF0ZT17eyB0aGU6ICdzdGF0ZScgfX0gLz5cbiAqL1xudmFyIExpbmsgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ0xpbmsnLFxuXG5cbiAgY29udGV4dFR5cGVzOiB7XG4gICAgcm91dGVyOiBfUHJvcFR5cGVzLnJvdXRlclNoYXBlXG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgdG86IG9uZU9mVHlwZShbc3RyaW5nLCBvYmplY3RdKS5pc1JlcXVpcmVkLFxuICAgIHF1ZXJ5OiBvYmplY3QsXG4gICAgaGFzaDogc3RyaW5nLFxuICAgIHN0YXRlOiBvYmplY3QsXG4gICAgYWN0aXZlU3R5bGU6IG9iamVjdCxcbiAgICBhY3RpdmVDbGFzc05hbWU6IHN0cmluZyxcbiAgICBvbmx5QWN0aXZlT25JbmRleDogYm9vbC5pc1JlcXVpcmVkLFxuICAgIG9uQ2xpY2s6IGZ1bmMsXG4gICAgdGFyZ2V0OiBzdHJpbmdcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25seUFjdGl2ZU9uSW5kZXg6IGZhbHNlLFxuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgfSxcbiAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIGFsbG93VHJhbnNpdGlvbiA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgaWYgKGlzTW9kaWZpZWRFdmVudChldmVudCkgfHwgIWlzTGVmdENsaWNrRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZSkgYWxsb3dUcmFuc2l0aW9uID0gZmFsc2U7XG5cbiAgICAvLyBJZiB0YXJnZXQgcHJvcCBpcyBzZXQgKGUuZy4gdG8gXCJfYmxhbmtcIikgbGV0IGJyb3dzZXIgaGFuZGxlIGxpbmsuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmOiB1bnRlc3RhYmxlIHdpdGggS2FybWEgKi9cbiAgICBpZiAodGhpcy5wcm9wcy50YXJnZXQpIHtcbiAgICAgIGlmICghYWxsb3dUcmFuc2l0aW9uKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmIChhbGxvd1RyYW5zaXRpb24pIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIHRvID0gX3Byb3BzLnRvO1xuICAgICAgdmFyIHF1ZXJ5ID0gX3Byb3BzLnF1ZXJ5O1xuICAgICAgdmFyIGhhc2ggPSBfcHJvcHMuaGFzaDtcbiAgICAgIHZhciBzdGF0ZSA9IF9wcm9wcy5zdGF0ZTtcblxuICAgICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb25EZXNjcmlwdG9yKHRvLCB7IHF1ZXJ5OiBxdWVyeSwgaGFzaDogaGFzaCwgc3RhdGU6IHN0YXRlIH0pO1xuXG4gICAgICB0aGlzLmNvbnRleHQucm91dGVyLnB1c2gobG9jYXRpb24pO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzO1xuICAgIHZhciB0byA9IF9wcm9wczIudG87XG4gICAgdmFyIHF1ZXJ5ID0gX3Byb3BzMi5xdWVyeTtcbiAgICB2YXIgaGFzaCA9IF9wcm9wczIuaGFzaDtcbiAgICB2YXIgc3RhdGUgPSBfcHJvcHMyLnN0YXRlO1xuICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSBfcHJvcHMyLmFjdGl2ZUNsYXNzTmFtZTtcbiAgICB2YXIgYWN0aXZlU3R5bGUgPSBfcHJvcHMyLmFjdGl2ZVN0eWxlO1xuICAgIHZhciBvbmx5QWN0aXZlT25JbmRleCA9IF9wcm9wczIub25seUFjdGl2ZU9uSW5kZXg7XG5cbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzMiwgWyd0bycsICdxdWVyeScsICdoYXNoJywgJ3N0YXRlJywgJ2FjdGl2ZUNsYXNzTmFtZScsICdhY3RpdmVTdHlsZScsICdvbmx5QWN0aXZlT25JbmRleCddKTtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKCEocXVlcnkgfHwgaGFzaCB8fCBzdGF0ZSksICd0aGUgYHF1ZXJ5YCwgYGhhc2hgLCBhbmQgYHN0YXRlYCBwcm9wcyBvbiBgPExpbms+YCBhcmUgZGVwcmVjYXRlZCwgdXNlIGA8TGluayB0bz17eyBwYXRobmFtZSwgcXVlcnksIGhhc2gsIHN0YXRlIH19Lz4uIGh0dHA6Ly90aW55LmNjL3JvdXRlci1pc0FjdGl2ZWRlcHJlY2F0ZWQnKSA6IHZvaWQgMDtcblxuICAgIC8vIElnbm9yZSBpZiByZW5kZXJlZCBvdXRzaWRlIHRoZSBjb250ZXh0IG9mIHJvdXRlciwgc2ltcGxpZmllcyB1bml0IHRlc3RpbmcuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXI7XG5cblxuICAgIGlmIChyb3V0ZXIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uRGVzY3JpcHRvcih0bywgeyBxdWVyeTogcXVlcnksIGhhc2g6IGhhc2gsIHN0YXRlOiBzdGF0ZSB9KTtcbiAgICAgIHByb3BzLmhyZWYgPSByb3V0ZXIuY3JlYXRlSHJlZihsb2NhdGlvbik7XG5cbiAgICAgIGlmIChhY3RpdmVDbGFzc05hbWUgfHwgYWN0aXZlU3R5bGUgIT0gbnVsbCAmJiAhaXNFbXB0eU9iamVjdChhY3RpdmVTdHlsZSkpIHtcbiAgICAgICAgaWYgKHJvdXRlci5pc0FjdGl2ZShsb2NhdGlvbiwgb25seUFjdGl2ZU9uSW5kZXgpKSB7XG4gICAgICAgICAgaWYgKGFjdGl2ZUNsYXNzTmFtZSkge1xuICAgICAgICAgICAgaWYgKHByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICBwcm9wcy5jbGFzc05hbWUgKz0gJyAnICsgYWN0aXZlQ2xhc3NOYW1lO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvcHMuY2xhc3NOYW1lID0gYWN0aXZlQ2xhc3NOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhY3RpdmVTdHlsZSkgcHJvcHMuc3R5bGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMuc3R5bGUsIGFjdGl2ZVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnYScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrIH0pKTtcbiAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IExpbms7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1Byb3BUeXBlc1wiOjQ0LFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzLFwicmVhY3RcIjpcInJlYWN0XCJ9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb21waWxlUGF0dGVybiA9IGNvbXBpbGVQYXR0ZXJuO1xuZXhwb3J0cy5tYXRjaFBhdHRlcm4gPSBtYXRjaFBhdHRlcm47XG5leHBvcnRzLmdldFBhcmFtTmFtZXMgPSBnZXRQYXJhbU5hbWVzO1xuZXhwb3J0cy5nZXRQYXJhbXMgPSBnZXRQYXJhbXM7XG5leHBvcnRzLmZvcm1hdFBhdHRlcm4gPSBmb3JtYXRQYXR0ZXJuO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKTtcbn1cblxuZnVuY3Rpb24gX2NvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgdmFyIHJlZ2V4cFNvdXJjZSA9ICcnO1xuICB2YXIgcGFyYW1OYW1lcyA9IFtdO1xuICB2YXIgdG9rZW5zID0gW107XG5cbiAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgbGFzdEluZGV4ID0gMCxcbiAgICAgIG1hdGNoZXIgPSAvOihbYS16QS1aXyRdW2EtekEtWjAtOV8kXSopfFxcKlxcKnxcXCp8XFwofFxcKS9nO1xuICB3aGlsZSAobWF0Y2ggPSBtYXRjaGVyLmV4ZWMocGF0dGVybikpIHtcbiAgICBpZiAobWF0Y2guaW5kZXggIT09IGxhc3RJbmRleCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICByZWdleHBTb3VyY2UgKz0gZXNjYXBlUmVnRXhwKHBhdHRlcm4uc2xpY2UobGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgIH1cblxuICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgcmVnZXhwU291cmNlICs9ICcoW14vXSspJztcbiAgICAgIHBhcmFtTmFtZXMucHVzaChtYXRjaFsxXSk7XG4gICAgfSBlbHNlIGlmIChtYXRjaFswXSA9PT0gJyoqJykge1xuICAgICAgcmVnZXhwU291cmNlICs9ICcoLiopJztcbiAgICAgIHBhcmFtTmFtZXMucHVzaCgnc3BsYXQnKTtcbiAgICB9IGVsc2UgaWYgKG1hdGNoWzBdID09PSAnKicpIHtcbiAgICAgIHJlZ2V4cFNvdXJjZSArPSAnKC4qPyknO1xuICAgICAgcGFyYW1OYW1lcy5wdXNoKCdzcGxhdCcpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09ICcoJykge1xuICAgICAgcmVnZXhwU291cmNlICs9ICcoPzonO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hbMF0gPT09ICcpJykge1xuICAgICAgcmVnZXhwU291cmNlICs9ICcpPyc7XG4gICAgfVxuXG4gICAgdG9rZW5zLnB1c2gobWF0Y2hbMF0pO1xuXG4gICAgbGFzdEluZGV4ID0gbWF0Y2hlci5sYXN0SW5kZXg7XG4gIH1cblxuICBpZiAobGFzdEluZGV4ICE9PSBwYXR0ZXJuLmxlbmd0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdHRlcm4uc2xpY2UobGFzdEluZGV4LCBwYXR0ZXJuLmxlbmd0aCkpO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBlc2NhcGVSZWdFeHAocGF0dGVybi5zbGljZShsYXN0SW5kZXgsIHBhdHRlcm4ubGVuZ3RoKSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdHRlcm46IHBhdHRlcm4sXG4gICAgcmVnZXhwU291cmNlOiByZWdleHBTb3VyY2UsXG4gICAgcGFyYW1OYW1lczogcGFyYW1OYW1lcyxcbiAgICB0b2tlbnM6IHRva2Vuc1xuICB9O1xufVxuXG52YXIgQ29tcGlsZWRQYXR0ZXJuc0NhY2hlID0ge307XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgaWYgKCEocGF0dGVybiBpbiBDb21waWxlZFBhdHRlcm5zQ2FjaGUpKSBDb21waWxlZFBhdHRlcm5zQ2FjaGVbcGF0dGVybl0gPSBfY29tcGlsZVBhdHRlcm4ocGF0dGVybik7XG5cbiAgcmV0dXJuIENvbXBpbGVkUGF0dGVybnNDYWNoZVtwYXR0ZXJuXTtcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBtYXRjaCBhIHBhdHRlcm4gb24gdGhlIGdpdmVuIHBhdGhuYW1lLiBQYXR0ZXJucyBtYXkgdXNlXG4gKiB0aGUgZm9sbG93aW5nIHNwZWNpYWwgY2hhcmFjdGVyczpcbiAqXG4gKiAtIDpwYXJhbU5hbWUgICAgIE1hdGNoZXMgYSBVUkwgc2VnbWVudCB1cCB0byB0aGUgbmV4dCAvLCA/LCBvciAjLiBUaGVcbiAqICAgICAgICAgICAgICAgICAgY2FwdHVyZWQgc3RyaW5nIGlzIGNvbnNpZGVyZWQgYSBcInBhcmFtXCJcbiAqIC0gKCkgICAgICAgICAgICAgV3JhcHMgYSBzZWdtZW50IG9mIHRoZSBVUkwgdGhhdCBpcyBvcHRpb25hbFxuICogLSAqICAgICAgICAgICAgICBDb25zdW1lcyAobm9uLWdyZWVkeSkgYWxsIGNoYXJhY3RlcnMgdXAgdG8gdGhlIG5leHRcbiAqICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIGluIHRoZSBwYXR0ZXJuLCBvciB0byB0aGUgZW5kIG9mIHRoZSBVUkwgaWZcbiAqICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm9uZVxuICogLSAqKiAgICAgICAgICAgICBDb25zdW1lcyAoZ3JlZWR5KSBhbGwgY2hhcmFjdGVycyB1cCB0byB0aGUgbmV4dCBjaGFyYWN0ZXJcbiAqICAgICAgICAgICAgICAgICAgaW4gdGhlIHBhdHRlcm4sIG9yIHRvIHRoZSBlbmQgb2YgdGhlIFVSTCBpZiB0aGVyZSBpcyBub25lXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSByZW1haW5pbmdQYXRobmFtZVxuICogLSBwYXJhbU5hbWVzXG4gKiAtIHBhcmFtVmFsdWVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0dGVybihwYXR0ZXJuLCBwYXRobmFtZSkge1xuICAvLyBFbnN1cmUgcGF0dGVybiBzdGFydHMgd2l0aCBsZWFkaW5nIHNsYXNoIGZvciBjb25zaXN0ZW5jeSB3aXRoIHBhdGhuYW1lLlxuICBpZiAocGF0dGVybi5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgIHBhdHRlcm4gPSAnLycgKyBwYXR0ZXJuO1xuICB9XG5cbiAgdmFyIF9jb21waWxlUGF0dGVybjIgPSBjb21waWxlUGF0dGVybihwYXR0ZXJuKTtcblxuICB2YXIgcmVnZXhwU291cmNlID0gX2NvbXBpbGVQYXR0ZXJuMi5yZWdleHBTb3VyY2U7XG4gIHZhciBwYXJhbU5hbWVzID0gX2NvbXBpbGVQYXR0ZXJuMi5wYXJhbU5hbWVzO1xuICB2YXIgdG9rZW5zID0gX2NvbXBpbGVQYXR0ZXJuMi50b2tlbnM7XG5cblxuICBpZiAocGF0dGVybi5jaGFyQXQocGF0dGVybi5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgcmVnZXhwU291cmNlICs9ICcvPyc7IC8vIEFsbG93IG9wdGlvbmFsIHBhdGggc2VwYXJhdG9yIGF0IGVuZC5cbiAgfVxuXG4gIC8vIFNwZWNpYWwtY2FzZSBwYXR0ZXJucyBsaWtlICcqJyBmb3IgY2F0Y2gtYWxsIHJvdXRlcy5cbiAgaWYgKHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJlZ2V4cFNvdXJjZSArPSAnJCc7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChuZXcgUmVnRXhwKCdeJyArIHJlZ2V4cFNvdXJjZSwgJ2knKSk7XG4gIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWF0Y2hlZFBhdGggPSBtYXRjaFswXTtcbiAgdmFyIHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKG1hdGNoZWRQYXRoLmxlbmd0aCk7XG5cbiAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lKSB7XG4gICAgLy8gUmVxdWlyZSB0aGF0IHRoZSBtYXRjaCBlbmRzIGF0IGEgcGF0aCBzZXBhcmF0b3IsIGlmIHdlIGRpZG4ndCBtYXRjaFxuICAgIC8vIHRoZSBmdWxsIHBhdGgsIHNvIGFueSByZW1haW5pbmcgcGF0aG5hbWUgaXMgYSBuZXcgcGF0aCBzZWdtZW50LlxuICAgIGlmIChtYXRjaGVkUGF0aC5jaGFyQXQobWF0Y2hlZFBhdGgubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSByZW1haW5pbmcgcGF0aG5hbWUsIHRyZWF0IHRoZSBwYXRoIHNlcGFyYXRvciBhcyBwYXJ0IG9mXG4gICAgLy8gdGhlIHJlbWFpbmluZyBwYXRobmFtZSBmb3IgcHJvcGVybHkgY29udGludWluZyB0aGUgbWF0Y2guXG4gICAgcmVtYWluaW5nUGF0aG5hbWUgPSAnLycgKyByZW1haW5pbmdQYXRobmFtZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVtYWluaW5nUGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lLFxuICAgIHBhcmFtTmFtZXM6IHBhcmFtTmFtZXMsXG4gICAgcGFyYW1WYWx1ZXM6IG1hdGNoLnNsaWNlKDEpLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHYgJiYgZGVjb2RlVVJJQ29tcG9uZW50KHYpO1xuICAgIH0pXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcmFtTmFtZXMocGF0dGVybikge1xuICByZXR1cm4gY29tcGlsZVBhdHRlcm4ocGF0dGVybikucGFyYW1OYW1lcztcbn1cblxuZnVuY3Rpb24gZ2V0UGFyYW1zKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIHZhciBtYXRjaCA9IG1hdGNoUGF0dGVybihwYXR0ZXJuLCBwYXRobmFtZSk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwYXJhbU5hbWVzID0gbWF0Y2gucGFyYW1OYW1lcztcbiAgdmFyIHBhcmFtVmFsdWVzID0gbWF0Y2gucGFyYW1WYWx1ZXM7XG5cbiAgdmFyIHBhcmFtcyA9IHt9O1xuXG4gIHBhcmFtTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1OYW1lLCBpbmRleCkge1xuICAgIHBhcmFtc1twYXJhbU5hbWVdID0gcGFyYW1WYWx1ZXNbaW5kZXhdO1xuICB9KTtcblxuICByZXR1cm4gcGFyYW1zO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBwYXR0ZXJuIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC4gVGhyb3dzXG4gKiBpZiB0aGVyZSBpcyBhIGR5bmFtaWMgc2VnbWVudCBvZiB0aGUgcGF0dGVybiBmb3Igd2hpY2ggdGhlcmUgaXMgbm8gcGFyYW0uXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFBhdHRlcm4ocGF0dGVybiwgcGFyYW1zKSB7XG4gIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcblxuICB2YXIgX2NvbXBpbGVQYXR0ZXJuMyA9IGNvbXBpbGVQYXR0ZXJuKHBhdHRlcm4pO1xuXG4gIHZhciB0b2tlbnMgPSBfY29tcGlsZVBhdHRlcm4zLnRva2VucztcblxuICB2YXIgcGFyZW5Db3VudCA9IDAsXG4gICAgICBwYXRobmFtZSA9ICcnLFxuICAgICAgc3BsYXRJbmRleCA9IDA7XG5cbiAgdmFyIHRva2VuID0gdm9pZCAwLFxuICAgICAgcGFyYW1OYW1lID0gdm9pZCAwLFxuICAgICAgcGFyYW1WYWx1ZSA9IHZvaWQgMDtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRva2Vucy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgaWYgKHRva2VuID09PSAnKicgfHwgdG9rZW4gPT09ICcqKicpIHtcbiAgICAgIHBhcmFtVmFsdWUgPSBBcnJheS5pc0FycmF5KHBhcmFtcy5zcGxhdCkgPyBwYXJhbXMuc3BsYXRbc3BsYXRJbmRleCsrXSA6IHBhcmFtcy5zcGxhdDtcblxuICAgICAgIShwYXJhbVZhbHVlICE9IG51bGwgfHwgcGFyZW5Db3VudCA+IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ01pc3Npbmcgc3BsYXQgIyVzIGZvciBwYXRoIFwiJXNcIicsIHNwbGF0SW5kZXgsIHBhdHRlcm4pIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcblxuICAgICAgaWYgKHBhcmFtVmFsdWUgIT0gbnVsbCkgcGF0aG5hbWUgKz0gZW5jb2RlVVJJKHBhcmFtVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09ICcoJykge1xuICAgICAgcGFyZW5Db3VudCArPSAxO1xuICAgIH0gZWxzZSBpZiAodG9rZW4gPT09ICcpJykge1xuICAgICAgcGFyZW5Db3VudCAtPSAxO1xuICAgIH0gZWxzZSBpZiAodG9rZW4uY2hhckF0KDApID09PSAnOicpIHtcbiAgICAgIHBhcmFtTmFtZSA9IHRva2VuLnN1YnN0cmluZygxKTtcbiAgICAgIHBhcmFtVmFsdWUgPSBwYXJhbXNbcGFyYW1OYW1lXTtcblxuICAgICAgIShwYXJhbVZhbHVlICE9IG51bGwgfHwgcGFyZW5Db3VudCA+IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ01pc3NpbmcgXCIlc1wiIHBhcmFtZXRlciBmb3IgcGF0aCBcIiVzXCInLCBwYXJhbU5hbWUsIHBhdHRlcm4pIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcblxuICAgICAgaWYgKHBhcmFtVmFsdWUgIT0gbnVsbCkgcGF0aG5hbWUgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRobmFtZSArPSB0b2tlbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKy9nLCAnLycpO1xufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIl9wcm9jZXNzXCI6MzMsXCJpbnZhcmlhbnRcIjozMn1dLDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnJvdXRlciA9IGV4cG9ydHMucm91dGVzID0gZXhwb3J0cy5yb3V0ZSA9IGV4cG9ydHMuY29tcG9uZW50cyA9IGV4cG9ydHMuY29tcG9uZW50ID0gZXhwb3J0cy5sb2NhdGlvbiA9IGV4cG9ydHMuaGlzdG9yeSA9IGV4cG9ydHMuZmFsc3kgPSBleHBvcnRzLmxvY2F0aW9uU2hhcGUgPSBleHBvcnRzLnJvdXRlclNoYXBlID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzJyk7XG5cbnZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzKTtcblxudmFyIF9JbnRlcm5hbFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vSW50ZXJuYWxQcm9wVHlwZXMnKTtcblxudmFyIEludGVybmFsUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX0ludGVybmFsUHJvcFR5cGVzKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nID0gcmVxdWlyZSgnLi9yb3V0ZXJXYXJuaW5nJyk7XG5cbnZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGZ1bmMgPSBfcmVhY3QuUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX3JlYWN0LlByb3BUeXBlcy5vYmplY3Q7XG52YXIgc2hhcGUgPSBfcmVhY3QuUHJvcFR5cGVzLnNoYXBlO1xudmFyIHN0cmluZyA9IF9yZWFjdC5Qcm9wVHlwZXMuc3RyaW5nO1xudmFyIHJvdXRlclNoYXBlID0gZXhwb3J0cy5yb3V0ZXJTaGFwZSA9IHNoYXBlKHtcbiAgcHVzaDogZnVuYy5pc1JlcXVpcmVkLFxuICByZXBsYWNlOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGdvOiBmdW5jLmlzUmVxdWlyZWQsXG4gIGdvQmFjazogZnVuYy5pc1JlcXVpcmVkLFxuICBnb0ZvcndhcmQ6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgc2V0Um91dGVMZWF2ZUhvb2s6IGZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNBY3RpdmU6IGZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbnZhciBsb2NhdGlvblNoYXBlID0gZXhwb3J0cy5sb2NhdGlvblNoYXBlID0gc2hhcGUoe1xuICBwYXRobmFtZTogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHNlYXJjaDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHN0YXRlOiBvYmplY3QsXG4gIGFjdGlvbjogc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGtleTogc3RyaW5nXG59KTtcblxuLy8gRGVwcmVjYXRlZCBzdHVmZiBiZWxvdzpcblxudmFyIGZhbHN5ID0gZXhwb3J0cy5mYWxzeSA9IEludGVybmFsUHJvcFR5cGVzLmZhbHN5O1xudmFyIGhpc3RvcnkgPSBleHBvcnRzLmhpc3RvcnkgPSBJbnRlcm5hbFByb3BUeXBlcy5oaXN0b3J5O1xudmFyIGxvY2F0aW9uID0gZXhwb3J0cy5sb2NhdGlvbiA9IGxvY2F0aW9uU2hhcGU7XG52YXIgY29tcG9uZW50ID0gZXhwb3J0cy5jb21wb25lbnQgPSBJbnRlcm5hbFByb3BUeXBlcy5jb21wb25lbnQ7XG52YXIgY29tcG9uZW50cyA9IGV4cG9ydHMuY29tcG9uZW50cyA9IEludGVybmFsUHJvcFR5cGVzLmNvbXBvbmVudHM7XG52YXIgcm91dGUgPSBleHBvcnRzLnJvdXRlID0gSW50ZXJuYWxQcm9wVHlwZXMucm91dGU7XG52YXIgcm91dGVzID0gZXhwb3J0cy5yb3V0ZXMgPSBJbnRlcm5hbFByb3BUeXBlcy5yb3V0ZXM7XG52YXIgcm91dGVyID0gZXhwb3J0cy5yb3V0ZXIgPSByb3V0ZXJTaGFwZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVwcmVjYXRlUHJvcFR5cGUgPSBmdW5jdGlvbiBkZXByZWNhdGVQcm9wVHlwZShwcm9wVHlwZSwgbWVzc2FnZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gcHJvcFR5cGUuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUgPSBmdW5jdGlvbiBkZXByZWNhdGVJbnRlcm5hbFByb3BUeXBlKHByb3BUeXBlKSB7XG4gICAgICByZXR1cm4gZGVwcmVjYXRlUHJvcFR5cGUocHJvcFR5cGUsICdUaGlzIHByb3AgdHlwZSBpcyBub3QgaW50ZW5kZWQgZm9yIGV4dGVybmFsIHVzZSwgYW5kIHdhcyBwcmV2aW91c2x5IGV4cG9ydGVkIGJ5IG1pc3Rha2UuIFRoZXNlIGludGVybmFsIHByb3AgdHlwZXMgYXJlIGRlcHJlY2F0ZWQgZm9yIGV4dGVybmFsIHVzZSwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGxhdGVyIHZlcnNpb24uJyk7XG4gICAgfTtcblxuICAgIHZhciBkZXByZWNhdGVSZW5hbWVkUHJvcFR5cGUgPSBmdW5jdGlvbiBkZXByZWNhdGVSZW5hbWVkUHJvcFR5cGUocHJvcFR5cGUsIG5hbWUpIHtcbiAgICAgIHJldHVybiBkZXByZWNhdGVQcm9wVHlwZShwcm9wVHlwZSwgJ1RoZSBgJyArIG5hbWUgKyAnYCBwcm9wIHR5cGUgaXMgbm93IGV4cG9ydGVkIGFzIGAnICsgbmFtZSArICdTaGFwZWAgdG8gYXZvaWQgbmFtZSBjb25mbGljdHMuIFRoaXMgZXhwb3J0IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGxhdGVyIHZlcnNpb24uJyk7XG4gICAgfTtcblxuICAgIGV4cG9ydHMuZmFsc3kgPSBmYWxzeSA9IGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUoZmFsc3kpO1xuICAgIGV4cG9ydHMuaGlzdG9yeSA9IGhpc3RvcnkgPSBkZXByZWNhdGVJbnRlcm5hbFByb3BUeXBlKGhpc3RvcnkpO1xuICAgIGV4cG9ydHMuY29tcG9uZW50ID0gY29tcG9uZW50ID0gZGVwcmVjYXRlSW50ZXJuYWxQcm9wVHlwZShjb21wb25lbnQpO1xuICAgIGV4cG9ydHMuY29tcG9uZW50cyA9IGNvbXBvbmVudHMgPSBkZXByZWNhdGVJbnRlcm5hbFByb3BUeXBlKGNvbXBvbmVudHMpO1xuICAgIGV4cG9ydHMucm91dGUgPSByb3V0ZSA9IGRlcHJlY2F0ZUludGVybmFsUHJvcFR5cGUocm91dGUpO1xuICAgIGV4cG9ydHMucm91dGVzID0gcm91dGVzID0gZGVwcmVjYXRlSW50ZXJuYWxQcm9wVHlwZShyb3V0ZXMpO1xuXG4gICAgZXhwb3J0cy5sb2NhdGlvbiA9IGxvY2F0aW9uID0gZGVwcmVjYXRlUmVuYW1lZFByb3BUeXBlKGxvY2F0aW9uLCAnbG9jYXRpb24nKTtcbiAgICBleHBvcnRzLnJvdXRlciA9IHJvdXRlciA9IGRlcHJlY2F0ZVJlbmFtZWRQcm9wVHlwZShyb3V0ZXIsICdyb3V0ZXInKTtcbiAgfSkoKTtcbn1cblxudmFyIGRlZmF1bHRFeHBvcnQgPSB7XG4gIGZhbHN5OiBmYWxzeSxcbiAgaGlzdG9yeTogaGlzdG9yeSxcbiAgbG9jYXRpb246IGxvY2F0aW9uLFxuICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgcm91dGU6IHJvdXRlLFxuICAvLyBGb3Igc29tZSByZWFzb24sIHJvdXRlcyB3YXMgbmV2ZXIgaGVyZS5cbiAgcm91dGVyOiByb3V0ZXJcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlZmF1bHRFeHBvcnQgPSAoMCwgX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMyLmRlZmF1bHQpKGRlZmF1bHRFeHBvcnQsICdUaGUgZGVmYXVsdCBleHBvcnQgZnJvbSBgcmVhY3Qtcm91dGVyL2xpYi9Qcm9wVHlwZXNgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdGhlIG5hbWVkIGV4cG9ydHMgaW5zdGVhZC4nKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZGVmYXVsdEV4cG9ydDtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0ludGVybmFsUHJvcFR5cGVzXCI6NDAsXCIuL2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXNcIjo2MCxcIi4vcm91dGVyV2FybmluZ1wiOjY4LFwiX3Byb2Nlc3NcIjozMyxcInJlYWN0XCI6XCJyZWFjdFwifV0sNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG52YXIgX0ludGVybmFsUHJvcFR5cGVzID0gcmVxdWlyZSgnLi9JbnRlcm5hbFByb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX1JlYWN0JFByb3BUeXBlcyA9IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXM7XG52YXIgc3RyaW5nID0gX1JlYWN0JFByb3BUeXBlcy5zdHJpbmc7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogQSA8UmVkaXJlY3Q+IGlzIHVzZWQgdG8gZGVjbGFyZSBhbm90aGVyIFVSTCBwYXRoIGEgY2xpZW50IHNob3VsZFxuICogYmUgc2VudCB0byB3aGVuIHRoZXkgcmVxdWVzdCBhIGdpdmVuIFVSTC5cbiAqXG4gKiBSZWRpcmVjdHMgYXJlIHBsYWNlZCBhbG9uZ3NpZGUgcm91dGVzIGluIHRoZSByb3V0ZSBjb25maWd1cmF0aW9uXG4gKiBhbmQgYXJlIHRyYXZlcnNlZCBpbiB0aGUgc2FtZSBtYW5uZXIuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6ICdSZWRpcmVjdCcsXG5cblxuICBzdGF0aWNzOiB7XG4gICAgY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHJvdXRlID0gKDAsIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudCkoZWxlbWVudCk7XG5cbiAgICAgIGlmIChyb3V0ZS5mcm9tKSByb3V0ZS5wYXRoID0gcm91dGUuZnJvbTtcblxuICAgICAgcm91dGUub25FbnRlciA9IGZ1bmN0aW9uIChuZXh0U3RhdGUsIHJlcGxhY2UpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gbmV4dFN0YXRlLmxvY2F0aW9uO1xuICAgICAgICB2YXIgcGFyYW1zID0gbmV4dFN0YXRlLnBhcmFtcztcblxuXG4gICAgICAgIHZhciBwYXRobmFtZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHJvdXRlLnRvLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICAgICAgcGF0aG5hbWUgPSAoMCwgX1BhdHRlcm5VdGlscy5mb3JtYXRQYXR0ZXJuKShyb3V0ZS50bywgcGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIGlmICghcm91dGUudG8pIHtcbiAgICAgICAgICBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByb3V0ZUluZGV4ID0gbmV4dFN0YXRlLnJvdXRlcy5pbmRleE9mKHJvdXRlKTtcbiAgICAgICAgICB2YXIgcGFyZW50UGF0dGVybiA9IFJlZGlyZWN0LmdldFJvdXRlUGF0dGVybihuZXh0U3RhdGUucm91dGVzLCByb3V0ZUluZGV4IC0gMSk7XG4gICAgICAgICAgdmFyIHBhdHRlcm4gPSBwYXJlbnRQYXR0ZXJuLnJlcGxhY2UoL1xcLyokLywgJy8nKSArIHJvdXRlLnRvO1xuICAgICAgICAgIHBhdGhuYW1lID0gKDAsIF9QYXR0ZXJuVXRpbHMuZm9ybWF0UGF0dGVybikocGF0dGVybiwgcGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcGxhY2Uoe1xuICAgICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgICAgICBxdWVyeTogcm91dGUucXVlcnkgfHwgbG9jYXRpb24ucXVlcnksXG4gICAgICAgICAgc3RhdGU6IHJvdXRlLnN0YXRlIHx8IGxvY2F0aW9uLnN0YXRlXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHJvdXRlO1xuICAgIH0sXG4gICAgZ2V0Um91dGVQYXR0ZXJuOiBmdW5jdGlvbiBnZXRSb3V0ZVBhdHRlcm4ocm91dGVzLCByb3V0ZUluZGV4KSB7XG4gICAgICB2YXIgcGFyZW50UGF0dGVybiA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpID0gcm91dGVJbmRleDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIHJvdXRlID0gcm91dGVzW2ldO1xuICAgICAgICB2YXIgcGF0dGVybiA9IHJvdXRlLnBhdGggfHwgJyc7XG5cbiAgICAgICAgcGFyZW50UGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwvKiQvLCAnLycpICsgcGFyZW50UGF0dGVybjtcblxuICAgICAgICBpZiAocGF0dGVybi5pbmRleE9mKCcvJykgPT09IDApIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJy8nICsgcGFyZW50UGF0dGVybjtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgcGF0aDogc3RyaW5nLFxuICAgIGZyb206IHN0cmluZywgLy8gQWxpYXMgZm9yIHBhdGhcbiAgICB0bzogc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcXVlcnk6IG9iamVjdCxcbiAgICBzdGF0ZTogb2JqZWN0LFxuICAgIG9uRW50ZXI6IF9JbnRlcm5hbFByb3BUeXBlcy5mYWxzeSxcbiAgICBjaGlsZHJlbjogX0ludGVybmFsUHJvcFR5cGVzLmZhbHN5XG4gIH0sXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhbml0eSBjaGVjayAqL1xuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlLCAnPFJlZGlyZWN0PiBlbGVtZW50cyBhcmUgZm9yIHJvdXRlciBjb25maWd1cmF0aW9uIG9ubHkgYW5kIHNob3VsZCBub3QgYmUgcmVuZGVyZWQnKSA6ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSkgOiB2b2lkIDA7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSZWRpcmVjdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vSW50ZXJuYWxQcm9wVHlwZXNcIjo0MCxcIi4vUGF0dGVyblV0aWxzXCI6NDMsXCIuL1JvdXRlVXRpbHNcIjo0OCxcIl9wcm9jZXNzXCI6MzMsXCJpbnZhcmlhbnRcIjozMixcInJlYWN0XCI6XCJyZWFjdFwifV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX1JvdXRlVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlVXRpbHMnKTtcblxudmFyIF9JbnRlcm5hbFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vSW50ZXJuYWxQcm9wVHlwZXMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzO1xudmFyIHN0cmluZyA9IF9SZWFjdCRQcm9wVHlwZXMuc3RyaW5nO1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG5cbi8qKlxuICogQSA8Um91dGU+IGlzIHVzZWQgdG8gZGVjbGFyZSB3aGljaCBjb21wb25lbnRzIGFyZSByZW5kZXJlZCB0byB0aGVcbiAqIHBhZ2Ugd2hlbiB0aGUgVVJMIG1hdGNoZXMgYSBnaXZlbiBwYXR0ZXJuLlxuICpcbiAqIFJvdXRlcyBhcmUgYXJyYW5nZWQgaW4gYSBuZXN0ZWQgdHJlZSBzdHJ1Y3R1cmUuIFdoZW4gYSBuZXcgVVJMIGlzXG4gKiByZXF1ZXN0ZWQsIHRoZSB0cmVlIGlzIHNlYXJjaGVkIGRlcHRoLWZpcnN0IHRvIGZpbmQgYSByb3V0ZSB3aG9zZVxuICogcGF0aCBtYXRjaGVzIHRoZSBVUkwuICBXaGVuIG9uZSBpcyBmb3VuZCwgYWxsIHJvdXRlcyBpbiB0aGUgdHJlZVxuICogdGhhdCBsZWFkIHRvIGl0IGFyZSBjb25zaWRlcmVkIFwiYWN0aXZlXCIgYW5kIHRoZWlyIGNvbXBvbmVudHMgYXJlXG4gKiByZW5kZXJlZCBpbnRvIHRoZSBET00sIG5lc3RlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyBpbiB0aGUgdHJlZS5cbiAqL1xuXG52YXIgUm91dGUgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JvdXRlJyxcblxuXG4gIHN0YXRpY3M6IHtcbiAgICBjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQ6IF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudFxuICB9LFxuXG4gIHByb3BUeXBlczoge1xuICAgIHBhdGg6IHN0cmluZyxcbiAgICBjb21wb25lbnQ6IF9JbnRlcm5hbFByb3BUeXBlcy5jb21wb25lbnQsXG4gICAgY29tcG9uZW50czogX0ludGVybmFsUHJvcFR5cGVzLmNvbXBvbmVudHMsXG4gICAgZ2V0Q29tcG9uZW50OiBmdW5jLFxuICAgIGdldENvbXBvbmVudHM6IGZ1bmNcbiAgfSxcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2FuaXR5IGNoZWNrICovXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICc8Um91dGU+IGVsZW1lbnRzIGFyZSBmb3Igcm91dGVyIGNvbmZpZ3VyYXRpb24gb25seSBhbmQgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCcpIDogKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFJvdXRlO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9JbnRlcm5hbFByb3BUeXBlc1wiOjQwLFwiLi9Sb3V0ZVV0aWxzXCI6NDgsXCJfcHJvY2Vzc1wiOjMzLFwiaW52YXJpYW50XCI6MzIsXCJyZWFjdFwiOlwicmVhY3RcIn1dLDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcm91dGVyV2FybmluZyA9IHJlcXVpcmUoJy4vcm91dGVyV2FybmluZycpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG9iamVjdCA9IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMub2JqZWN0O1xuXG4vKipcbiAqIFRoZSBSb3V0ZUNvbnRleHQgbWl4aW4gcHJvdmlkZXMgYSBjb252ZW5pZW50IHdheSBmb3Igcm91dGVcbiAqIGNvbXBvbmVudHMgdG8gc2V0IHRoZSByb3V0ZSBpbiBjb250ZXh0LiBUaGlzIGlzIG5lZWRlZCBmb3JcbiAqIHJvdXRlcyB0aGF0IHJlbmRlciBlbGVtZW50cyB0aGF0IHdhbnQgdG8gdXNlIHRoZSBMaWZlY3ljbGVcbiAqIG1peGluIHRvIHByZXZlbnQgdHJhbnNpdGlvbnMuXG4gKi9cblxudmFyIFJvdXRlQ29udGV4dCA9IHtcblxuICBwcm9wVHlwZXM6IHtcbiAgICByb3V0ZTogb2JqZWN0LmlzUmVxdWlyZWRcbiAgfSxcblxuICBjaGlsZENvbnRleHRUeXBlczoge1xuICAgIHJvdXRlOiBvYmplY3QuaXNSZXF1aXJlZFxuICB9LFxuXG4gIGdldENoaWxkQ29udGV4dDogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZTogdGhpcy5wcm9wcy5yb3V0ZVxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnVGhlIGBSb3V0ZUNvbnRleHRgIG1peGluIGlzIGRlcHJlY2F0ZWQuIFlvdSBjYW4gcHJvdmlkZSBgdGhpcy5wcm9wcy5yb3V0ZWAgb24gY29udGV4dCB3aXRoIHlvdXIgb3duIGBjb250ZXh0VHlwZXNgLiBodHRwOi8vdGlueS5jYy9yb3V0ZXItcm91dGVjb250ZXh0bWl4aW4nKSA6IHZvaWQgMDtcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUm91dGVDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzLFwicmVhY3RcIjpcInJlYWN0XCJ9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLmlzUmVhY3RDaGlsZHJlbiA9IGlzUmVhY3RDaGlsZHJlbjtcbmV4cG9ydHMuY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50ID0gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50O1xuZXhwb3J0cy5jcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuO1xuZXhwb3J0cy5jcmVhdGVSb3V0ZXMgPSBjcmVhdGVSb3V0ZXM7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nID0gcmVxdWlyZSgnLi9yb3V0ZXJXYXJuaW5nJyk7XG5cbnZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaXNWYWxpZENoaWxkKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KG9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGlzUmVhY3RDaGlsZHJlbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzVmFsaWRDaGlsZChvYmplY3QpIHx8IEFycmF5LmlzQXJyYXkob2JqZWN0KSAmJiBvYmplY3QuZXZlcnkoaXNWYWxpZENoaWxkKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXMoY29tcG9uZW50TmFtZSwgcHJvcFR5cGVzLCBwcm9wcykge1xuICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCAnVW5rbm93bkNvbXBvbmVudCc7XG5cbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wVHlwZXMsIHByb3BOYW1lKSkge1xuICAgICAgdmFyIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWY6IGVycm9yIGxvZ2dpbmcgKi9cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgZXJyb3IubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHMsIHByb3BzKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVGcm9tUmVhY3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gIHZhciByb3V0ZSA9IGNyZWF0ZVJvdXRlKHR5cGUuZGVmYXVsdFByb3BzLCBlbGVtZW50LnByb3BzKTtcblxuICBpZiAodHlwZS5wcm9wVHlwZXMpIGNoZWNrUHJvcFR5cGVzKHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lLCB0eXBlLnByb3BUeXBlcywgcm91dGUpO1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIHZhciBjaGlsZFJvdXRlcyA9IGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuKHJvdXRlLmNoaWxkcmVuLCByb3V0ZSk7XG5cbiAgICBpZiAoY2hpbGRSb3V0ZXMubGVuZ3RoKSByb3V0ZS5jaGlsZFJvdXRlcyA9IGNoaWxkUm91dGVzO1xuXG4gICAgZGVsZXRlIHJvdXRlLmNoaWxkcmVuO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgYSByb3V0ZXMgb2JqZWN0IGZyb20gdGhlIGdpdmVuIFJlYWN0Q2hpbGRyZW4uIEpTWFxuICogcHJvdmlkZXMgYSBjb252ZW5pZW50IHdheSB0byB2aXN1YWxpemUgaG93IHJvdXRlcyBpbiB0aGUgaGllcmFyY2h5IGFyZVxuICogbmVzdGVkLlxuICpcbiAqICAgaW1wb3J0IHsgUm91dGUsIGNyZWF0ZVJvdXRlc0Zyb21SZWFjdENoaWxkcmVuIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuICogICBcbiAqICAgY29uc3Qgcm91dGVzID0gY3JlYXRlUm91dGVzRnJvbVJlYWN0Q2hpbGRyZW4oXG4gKiAgICAgPFJvdXRlIGNvbXBvbmVudD17QXBwfT5cbiAqICAgICAgIDxSb3V0ZSBwYXRoPVwiaG9tZVwiIGNvbXBvbmVudD17RGFzaGJvYXJkfS8+XG4gKiAgICAgICA8Um91dGUgcGF0aD1cIm5ld3NcIiBjb21wb25lbnQ9e05ld3NGZWVkfS8+XG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgKVxuICpcbiAqIE5vdGU6IFRoaXMgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHkgdXNlZCB3aGVuIHlvdSBwcm92aWRlIDxSb3V0ZT4gY2hpbGRyZW5cbiAqIHRvIGEgPFJvdXRlcj4gY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50Um91dGUpIHtcbiAgdmFyIHJvdXRlcyA9IFtdO1xuXG4gIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmIChfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIENvbXBvbmVudCBjbGFzc2VzIG1heSBoYXZlIGEgc3RhdGljIGNyZWF0ZSogbWV0aG9kLlxuICAgICAgaWYgKGVsZW1lbnQudHlwZS5jcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHJvdXRlID0gZWxlbWVudC50eXBlLmNyZWF0ZVJvdXRlRnJvbVJlYWN0RWxlbWVudChlbGVtZW50LCBwYXJlbnRSb3V0ZSk7XG5cbiAgICAgICAgaWYgKHJvdXRlKSByb3V0ZXMucHVzaChyb3V0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb3V0ZXMucHVzaChjcmVhdGVSb3V0ZUZyb21SZWFjdEVsZW1lbnQoZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHJvdXRlcyBmcm9tIHRoZSBnaXZlbiBvYmplY3Qgd2hpY2hcbiAqIG1heSBiZSBhIEpTWCByb3V0ZSwgYSBwbGFpbiBvYmplY3Qgcm91dGUsIG9yIGFuIGFycmF5IG9mIGVpdGhlci5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzKHJvdXRlcykge1xuICBpZiAoaXNSZWFjdENoaWxkcmVuKHJvdXRlcykpIHtcbiAgICByb3V0ZXMgPSBjcmVhdGVSb3V0ZXNGcm9tUmVhY3RDaGlsZHJlbihyb3V0ZXMpO1xuICB9IGVsc2UgaWYgKHJvdXRlcyAmJiAhQXJyYXkuaXNBcnJheShyb3V0ZXMpKSB7XG4gICAgcm91dGVzID0gW3JvdXRlc107XG4gIH1cblxuICByZXR1cm4gcm91dGVzO1xufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vcm91dGVyV2FybmluZ1wiOjY4LFwiX3Byb2Nlc3NcIjozMyxcInJlYWN0XCI6XCJyZWFjdFwifV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeSA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL2NyZWF0ZUhhc2hIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlSGFzaEhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlSGFzaEhpc3RvcnkpO1xuXG52YXIgX3VzZVF1ZXJpZXMgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi91c2VRdWVyaWVzJyk7XG5cbnZhciBfdXNlUXVlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VRdWVyaWVzKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9JbnRlcm5hbFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vSW50ZXJuYWxQcm9wVHlwZXMnKTtcblxudmFyIF9Sb3V0ZXJDb250ZXh0ID0gcmVxdWlyZSgnLi9Sb3V0ZXJDb250ZXh0Jyk7XG5cbnZhciBfUm91dGVyQ29udGV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXJDb250ZXh0KTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbnZhciBfUm91dGVyVXRpbHMgPSByZXF1aXJlKCcuL1JvdXRlclV0aWxzJyk7XG5cbnZhciBfcm91dGVyV2FybmluZyA9IHJlcXVpcmUoJy4vcm91dGVyV2FybmluZycpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcm91dGVyV2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gaXNEZXByZWNhdGVkSGlzdG9yeShoaXN0b3J5KSB7XG4gIHJldHVybiAhaGlzdG9yeSB8fCAhaGlzdG9yeS5fX3YyX2NvbXBhdGlibGVfXztcbn1cblxudmFyIF9SZWFjdCRQcm9wVHlwZXMgPSBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzO1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogQSA8Um91dGVyPiBpcyBhIGhpZ2gtbGV2ZWwgQVBJIGZvciBhdXRvbWF0aWNhbGx5IHNldHRpbmcgdXBcbiAqIGEgcm91dGVyIHRoYXQgcmVuZGVycyBhIDxSb3V0ZXJDb250ZXh0PiB3aXRoIGFsbCB0aGUgcHJvcHNcbiAqIGl0IG5lZWRzIGVhY2ggdGltZSB0aGUgVVJMIGNoYW5nZXMuXG4gKi9cblxudmFyIFJvdXRlciA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnUm91dGVyJyxcblxuXG4gIHByb3BUeXBlczoge1xuICAgIGhpc3Rvcnk6IG9iamVjdCxcbiAgICBjaGlsZHJlbjogX0ludGVybmFsUHJvcFR5cGVzLnJvdXRlcyxcbiAgICByb3V0ZXM6IF9JbnRlcm5hbFByb3BUeXBlcy5yb3V0ZXMsIC8vIGFsaWFzIGZvciBjaGlsZHJlblxuICAgIHJlbmRlcjogZnVuYyxcbiAgICBjcmVhdGVFbGVtZW50OiBmdW5jLFxuICAgIG9uRXJyb3I6IGZ1bmMsXG4gICAgb25VcGRhdGU6IGZ1bmMsXG5cbiAgICAvLyBQUklWQVRFOiBGb3IgY2xpZW50LXNpZGUgcmVoeWRyYXRpb24gb2Ygc2VydmVyIG1hdGNoLlxuICAgIG1hdGNoQ29udGV4dDogb2JqZWN0XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUm91dGVyQ29udGV4dDIuZGVmYXVsdCwgcHJvcHMpO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbjogbnVsbCxcbiAgICAgIHJvdXRlczogbnVsbCxcbiAgICAgIHBhcmFtczogbnVsbCxcbiAgICAgIGNvbXBvbmVudHM6IG51bGxcbiAgICB9O1xuICB9LFxuICBoYW5kbGVFcnJvcjogZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLnByb3BzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRocm93IGVycm9ycyBieSBkZWZhdWx0IHNvIHdlIGRvbid0IHNpbGVudGx5IHN3YWxsb3cgdGhlbSFcbiAgICAgIHRocm93IGVycm9yOyAvLyBUaGlzIGVycm9yIHByb2JhYmx5IG9jY3VycmVkIGluIGdldENoaWxkUm91dGVzIG9yIGdldENvbXBvbmVudHMuXG4gICAgfVxuICB9LFxuICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHBhcnNlUXVlcnlTdHJpbmcgPSBfcHJvcHMucGFyc2VRdWVyeVN0cmluZztcbiAgICB2YXIgc3RyaW5naWZ5UXVlcnkgPSBfcHJvcHMuc3RyaW5naWZ5UXVlcnk7XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KSghKHBhcnNlUXVlcnlTdHJpbmcgfHwgc3RyaW5naWZ5UXVlcnkpLCAnYHBhcnNlUXVlcnlTdHJpbmdgIGFuZCBgc3RyaW5naWZ5UXVlcnlgIGFyZSBkZXByZWNhdGVkLiBQbGVhc2UgY3JlYXRlIGEgY3VzdG9tIGhpc3RvcnkuIGh0dHA6Ly90aW55LmNjL3JvdXRlci1jdXN0b21xdWVyeXN0cmluZycpIDogdm9pZCAwO1xuXG4gICAgdmFyIF9jcmVhdGVSb3V0ZXJPYmplY3RzID0gdGhpcy5jcmVhdGVSb3V0ZXJPYmplY3RzKCk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IF9jcmVhdGVSb3V0ZXJPYmplY3RzLmhpc3Rvcnk7XG4gICAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gX2NyZWF0ZVJvdXRlck9iamVjdHMudHJhbnNpdGlvbk1hbmFnZXI7XG4gICAgdmFyIHJvdXRlciA9IF9jcmVhdGVSb3V0ZXJPYmplY3RzLnJvdXRlcjtcblxuXG4gICAgdGhpcy5fdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5saXN0ZW4oZnVuY3Rpb24gKGVycm9yLCBzdGF0ZSkge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIF90aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHN0YXRlLCBfdGhpcy5wcm9wcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmhpc3RvcnkgPSBoaXN0b3J5O1xuICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB9LFxuICBjcmVhdGVSb3V0ZXJPYmplY3RzOiBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJPYmplY3RzKCkge1xuICAgIHZhciBtYXRjaENvbnRleHQgPSB0aGlzLnByb3BzLm1hdGNoQ29udGV4dDtcblxuICAgIGlmIChtYXRjaENvbnRleHQpIHtcbiAgICAgIHJldHVybiBtYXRjaENvbnRleHQ7XG4gICAgfVxuXG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLnByb3BzLmhpc3Rvcnk7XG4gICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzO1xuICAgIHZhciByb3V0ZXMgPSBfcHJvcHMyLnJvdXRlcztcbiAgICB2YXIgY2hpbGRyZW4gPSBfcHJvcHMyLmNoaWxkcmVuO1xuXG5cbiAgICBpZiAoaXNEZXByZWNhdGVkSGlzdG9yeShoaXN0b3J5KSkge1xuICAgICAgaGlzdG9yeSA9IHRoaXMud3JhcERlcHJlY2F0ZWRIaXN0b3J5KGhpc3RvcnkpO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKGhpc3RvcnksICgwLCBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMpKHJvdXRlcyB8fCBjaGlsZHJlbikpO1xuICAgIHZhciByb3V0ZXIgPSAoMCwgX1JvdXRlclV0aWxzLmNyZWF0ZVJvdXRlck9iamVjdCkoaGlzdG9yeSwgdHJhbnNpdGlvbk1hbmFnZXIpO1xuICAgIHZhciByb3V0aW5nSGlzdG9yeSA9ICgwLCBfUm91dGVyVXRpbHMuY3JlYXRlUm91dGluZ0hpc3RvcnkpKGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblxuICAgIHJldHVybiB7IGhpc3Rvcnk6IHJvdXRpbmdIaXN0b3J5LCB0cmFuc2l0aW9uTWFuYWdlcjogdHJhbnNpdGlvbk1hbmFnZXIsIHJvdXRlcjogcm91dGVyIH07XG4gIH0sXG4gIHdyYXBEZXByZWNhdGVkSGlzdG9yeTogZnVuY3Rpb24gd3JhcERlcHJlY2F0ZWRIaXN0b3J5KGhpc3RvcnkpIHtcbiAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHBhcnNlUXVlcnlTdHJpbmcgPSBfcHJvcHMzLnBhcnNlUXVlcnlTdHJpbmc7XG4gICAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gX3Byb3BzMy5zdHJpbmdpZnlRdWVyeTtcblxuXG4gICAgdmFyIGNyZWF0ZUhpc3RvcnkgPSB2b2lkIDA7XG4gICAgaWYgKGhpc3RvcnkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSXQgYXBwZWFycyB5b3UgaGF2ZSBwcm92aWRlZCBhIGRlcHJlY2F0ZWQgaGlzdG9yeSBvYmplY3QgdG8gYDxSb3V0ZXIvPmAsIHBsZWFzZSB1c2UgYSBoaXN0b3J5IHByb3ZpZGVkIGJ5ICcgKyAnUmVhY3QgUm91dGVyIHdpdGggYGltcG9ydCB7IGJyb3dzZXJIaXN0b3J5IH0gZnJvbSBcXCdyZWFjdC1yb3V0ZXJcXCdgIG9yIGBpbXBvcnQgeyBoYXNoSGlzdG9yeSB9IGZyb20gXFwncmVhY3Qtcm91dGVyXFwnYC4gJyArICdJZiB5b3UgYXJlIHVzaW5nIGEgY3VzdG9tIGhpc3RvcnkgcGxlYXNlIGNyZWF0ZSBpdCB3aXRoIGB1c2VSb3V0ZXJIaXN0b3J5YCwgc2VlIGh0dHA6Ly90aW55LmNjL3JvdXRlci11c2luZ2hpc3RvcnkgZm9yIGRldGFpbHMuJykgOiB2b2lkIDA7XG4gICAgICBjcmVhdGVIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGlzdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIGhpc3Rvcnk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2BSb3V0ZXJgIG5vIGxvbmdlciBkZWZhdWx0cyB0aGUgaGlzdG9yeSBwcm9wIHRvIGhhc2ggaGlzdG9yeS4gUGxlYXNlIHVzZSB0aGUgYGhhc2hIaXN0b3J5YCBzaW5nbGV0b24gaW5zdGVhZC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWRlZmF1bHRoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICBjcmVhdGVIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5Mi5kZWZhdWx0O1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3VzZVF1ZXJpZXMyLmRlZmF1bHQpKGNyZWF0ZUhpc3RvcnkpKHsgcGFyc2VRdWVyeVN0cmluZzogcGFyc2VRdWVyeVN0cmluZywgc3RyaW5naWZ5UXVlcnk6IHN0cmluZ2lmeVF1ZXJ5IH0pO1xuICB9LFxuXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNhbml0eSBjaGVjayAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKG5leHRQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksICdZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+OyBpdCB3aWxsIGJlIGlnbm9yZWQnKSA6IHZvaWQgMDtcblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKChuZXh0UHJvcHMucm91dGVzIHx8IG5leHRQcm9wcy5jaGlsZHJlbikgPT09ICh0aGlzLnByb3BzLnJvdXRlcyB8fCB0aGlzLnByb3BzLmNoaWxkcmVuKSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgcm91dGVzPjsgaXQgd2lsbCBiZSBpZ25vcmVkJykgOiB2b2lkIDA7XG4gIH0sXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5fdW5saXN0ZW4pIHRoaXMuX3VubGlzdGVuKCk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHZhciBsb2NhdGlvbiA9IF9zdGF0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGVzID0gX3N0YXRlLnJvdXRlcztcbiAgICB2YXIgcGFyYW1zID0gX3N0YXRlLnBhcmFtcztcbiAgICB2YXIgY29tcG9uZW50cyA9IF9zdGF0ZS5jb21wb25lbnRzO1xuICAgIHZhciBfcHJvcHM0ID0gdGhpcy5wcm9wcztcbiAgICB2YXIgY3JlYXRlRWxlbWVudCA9IF9wcm9wczQuY3JlYXRlRWxlbWVudDtcbiAgICB2YXIgcmVuZGVyID0gX3Byb3BzNC5yZW5kZXI7XG5cbiAgICB2YXIgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzNCwgWydjcmVhdGVFbGVtZW50JywgJ3JlbmRlciddKTtcblxuICAgIGlmIChsb2NhdGlvbiA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gQXN5bmMgbWF0Y2hcblxuICAgIC8vIE9ubHkgZm9yd2FyZCBub24tUm91dGVyLXNwZWNpZmljIHByb3BzIHRvIHJvdXRpbmcgY29udGV4dCwgYXMgdGhvc2UgYXJlXG4gICAgLy8gdGhlIG9ubHkgb25lcyB0aGF0IG1pZ2h0IGJlIGN1c3RvbSByb3V0aW5nIGNvbnRleHQgcHJvcHMuXG4gICAgT2JqZWN0LmtleXMoUm91dGVyLnByb3BUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcFR5cGUpIHtcbiAgICAgIHJldHVybiBkZWxldGUgcHJvcHNbcHJvcFR5cGVdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlbmRlcihfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIHJvdXRlcjogdGhpcy5yb3V0ZXIsXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByb3V0ZXM6IHJvdXRlcyxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgY29tcG9uZW50czogY29tcG9uZW50cyxcbiAgICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRcbiAgICB9KSk7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSb3V0ZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL0ludGVybmFsUHJvcFR5cGVzXCI6NDAsXCIuL1JvdXRlVXRpbHNcIjo0OCxcIi4vUm91dGVyQ29udGV4dFwiOjUwLFwiLi9Sb3V0ZXJVdGlsc1wiOjUxLFwiLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlclwiOjU5LFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzLFwiaGlzdG9yeS9saWIvY3JlYXRlSGFzaEhpc3RvcnlcIjoyMyxcImhpc3RvcnkvbGliL3VzZVF1ZXJpZXNcIjozMCxcInJlYWN0XCI6XCJyZWFjdFwifV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzJyk7XG5cbnZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzKTtcblxudmFyIF9nZXRSb3V0ZVBhcmFtcyA9IHJlcXVpcmUoJy4vZ2V0Um91dGVQYXJhbXMnKTtcblxudmFyIF9nZXRSb3V0ZVBhcmFtczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRSb3V0ZVBhcmFtcyk7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX1JlYWN0JFByb3BUeXBlcyA9IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXM7XG52YXIgYXJyYXkgPSBfUmVhY3QkUHJvcFR5cGVzLmFycmF5O1xudmFyIGZ1bmMgPSBfUmVhY3QkUHJvcFR5cGVzLmZ1bmM7XG52YXIgb2JqZWN0ID0gX1JlYWN0JFByb3BUeXBlcy5vYmplY3Q7XG5cbi8qKlxuICogQSA8Um91dGVyQ29udGV4dD4gcmVuZGVycyB0aGUgY29tcG9uZW50IHRyZWUgZm9yIGEgZ2l2ZW4gcm91dGVyIHN0YXRlXG4gKiBhbmQgc2V0cyB0aGUgaGlzdG9yeSBvYmplY3QgYW5kIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlckNvbnRleHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JvdXRlckNvbnRleHQnLFxuXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgaGlzdG9yeTogb2JqZWN0LFxuICAgIHJvdXRlcjogb2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgbG9jYXRpb246IG9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlczogYXJyYXkuaXNSZXF1aXJlZCxcbiAgICBwYXJhbXM6IG9iamVjdC5pc1JlcXVpcmVkLFxuICAgIGNvbXBvbmVudHM6IGFycmF5LmlzUmVxdWlyZWQsXG4gICAgY3JlYXRlRWxlbWVudDogZnVuYy5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUVsZW1lbnQ6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50XG4gICAgfTtcbiAgfSxcblxuXG4gIGNoaWxkQ29udGV4dFR5cGVzOiB7XG4gICAgaGlzdG9yeTogb2JqZWN0LFxuICAgIGxvY2F0aW9uOiBvYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZXI6IG9iamVjdC5pc1JlcXVpcmVkXG4gIH0sXG5cbiAgZ2V0Q2hpbGRDb250ZXh0OiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHJvdXRlciA9IF9wcm9wcy5yb3V0ZXI7XG4gICAgdmFyIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb247XG5cbiAgICBpZiAoIXJvdXRlcikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdgPFJvdXRlckNvbnRleHQ+YCBleHBlY3RzIGEgYHJvdXRlcmAgcmF0aGVyIHRoYW4gYSBgaGlzdG9yeWAnKSA6IHZvaWQgMDtcblxuICAgICAgcm91dGVyID0gX2V4dGVuZHMoe30sIGhpc3RvcnksIHtcbiAgICAgICAgc2V0Um91dGVMZWF2ZUhvb2s6IGhpc3RvcnkubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSByb3V0ZXIubGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBsb2NhdGlvbiA9ICgwLCBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIuZGVmYXVsdCkobG9jYXRpb24sICdgY29udGV4dC5sb2NhdGlvbmAgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBhIHJvdXRlIGNvbXBvbmVudFxcJ3MgYHByb3BzLmxvY2F0aW9uYCBpbnN0ZWFkLiBodHRwOi8vdGlueS5jYy9yb3V0ZXItYWNjZXNzaW5nbG9jYXRpb24nKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBoaXN0b3J5OiBoaXN0b3J5LCBsb2NhdGlvbjogbG9jYXRpb24sIHJvdXRlcjogcm91dGVyIH07XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykge1xuICAgIHJldHVybiBjb21wb25lbnQgPT0gbnVsbCA/IG51bGwgOiB0aGlzLnByb3BzLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHM7XG4gICAgdmFyIGhpc3RvcnkgPSBfcHJvcHMyLmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gX3Byb3BzMi5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGVzID0gX3Byb3BzMi5yb3V0ZXM7XG4gICAgdmFyIHBhcmFtcyA9IF9wcm9wczIucGFyYW1zO1xuICAgIHZhciBjb21wb25lbnRzID0gX3Byb3BzMi5jb21wb25lbnRzO1xuXG4gICAgdmFyIGVsZW1lbnQgPSBudWxsO1xuXG4gICAgaWYgKGNvbXBvbmVudHMpIHtcbiAgICAgIGVsZW1lbnQgPSBjb21wb25lbnRzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChlbGVtZW50LCBjb21wb25lbnRzLCBpbmRleCkge1xuICAgICAgICBpZiAoY29tcG9uZW50cyA9PSBudWxsKSByZXR1cm4gZWxlbWVudDsgLy8gRG9uJ3QgY3JlYXRlIG5ldyBjaGlsZHJlbjsgdXNlIHRoZSBncmFuZGNoaWxkcmVuLlxuXG4gICAgICAgIHZhciByb3V0ZSA9IHJvdXRlc1tpbmRleF07XG4gICAgICAgIHZhciByb3V0ZVBhcmFtcyA9ICgwLCBfZ2V0Um91dGVQYXJhbXMyLmRlZmF1bHQpKHJvdXRlLCBwYXJhbXMpO1xuICAgICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICAgIHJvdXRlUGFyYW1zOiByb3V0ZVBhcmFtcyxcbiAgICAgICAgICByb3V0ZXM6IHJvdXRlc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgoMCwgX1JvdXRlVXRpbHMuaXNSZWFjdENoaWxkcmVuKShlbGVtZW50KSkge1xuICAgICAgICAgIHByb3BzLmNoaWxkcmVuID0gZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW1lbnQsIHByb3ApKSBwcm9wc1twcm9wXSA9IGVsZW1lbnRbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh0eXBlb2YgY29tcG9uZW50cyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY29tcG9uZW50cykpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IHt9O1xuXG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29tcG9uZW50cywga2V5KSkge1xuICAgICAgICAgICAgICAvLyBQYXNzIHRocm91Z2ggdGhlIGtleSBhcyBhIHByb3AgdG8gY3JlYXRlRWxlbWVudCB0byBhbGxvd1xuICAgICAgICAgICAgICAvLyBjdXN0b20gY3JlYXRlRWxlbWVudCBmdW5jdGlvbnMgdG8ga25vdyB3aGljaCBuYW1lZCBjb21wb25lbnRcbiAgICAgICAgICAgICAgLy8gdGhleSdyZSByZW5kZXJpbmcsIGZvciBlLmcuIG1hdGNoaW5nIHVwIHRvIGZldGNoZWQgZGF0YS5cbiAgICAgICAgICAgICAgZWxlbWVudHNba2V5XSA9IF90aGlzLmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c1trZXldLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICAgICAga2V5OiBrZXkgfSwgcHJvcHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3RoaXMuY3JlYXRlRWxlbWVudChjb21wb25lbnRzLCBwcm9wcyk7XG4gICAgICB9LCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICAhKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UgfHwgX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UsICdUaGUgcm9vdCByb3V0ZSBtdXN0IHJlbmRlciBhIHNpbmdsZSBlbGVtZW50JykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSb3V0ZXJDb250ZXh0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9Sb3V0ZVV0aWxzXCI6NDgsXCIuL2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXNcIjo2MCxcIi4vZ2V0Um91dGVQYXJhbXNcIjo2MixcIi4vcm91dGVyV2FybmluZ1wiOjY4LFwiX3Byb2Nlc3NcIjozMyxcImludmFyaWFudFwiOjMyLFwicmVhY3RcIjpcInJlYWN0XCJ9XSw1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLmNyZWF0ZVJvdXRlck9iamVjdCA9IGNyZWF0ZVJvdXRlck9iamVjdDtcbmV4cG9ydHMuY3JlYXRlUm91dGluZ0hpc3RvcnkgPSBjcmVhdGVSb3V0aW5nSGlzdG9yeTtcblxudmFyIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzJyk7XG5cbnZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVyT2JqZWN0KGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgaGlzdG9yeSwge1xuICAgIHNldFJvdXRlTGVhdmVIb29rOiB0cmFuc2l0aW9uTWFuYWdlci5saXN0ZW5CZWZvcmVMZWF2aW5nUm91dGUsXG4gICAgaXNBY3RpdmU6IHRyYW5zaXRpb25NYW5hZ2VyLmlzQWN0aXZlXG4gIH0pO1xufVxuXG4vLyBkZXByZWNhdGVkXG5mdW5jdGlvbiBjcmVhdGVSb3V0aW5nSGlzdG9yeShoaXN0b3J5LCB0cmFuc2l0aW9uTWFuYWdlcikge1xuICBoaXN0b3J5ID0gX2V4dGVuZHMoe30sIGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGhpc3RvcnkgPSAoMCwgX2RlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMyLmRlZmF1bHQpKGhpc3RvcnksICdgcHJvcHMuaGlzdG9yeWAgYW5kIGBjb250ZXh0Lmhpc3RvcnlgIGFyZSBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBjb250ZXh0LnJvdXRlcmAuIGh0dHA6Ly90aW55LmNjL3JvdXRlci1jb250ZXh0Y2hhbmdlcycpO1xuICB9XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzXCI6NjAsXCJfcHJvY2Vzc1wiOjMzfV0sNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX1JvdXRlckNvbnRleHQgPSByZXF1aXJlKCcuL1JvdXRlckNvbnRleHQnKTtcblxudmFyIF9Sb3V0ZXJDb250ZXh0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRlckNvbnRleHQpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUm91dGluZ0NvbnRleHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1JvdXRpbmdDb250ZXh0JyxcbiAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdgUm91dGluZ0NvbnRleHRgIGhhcyBiZWVuIHJlbmFtZWQgdG8gYFJvdXRlckNvbnRleHRgLiBQbGVhc2UgdXNlIGBpbXBvcnQgeyBSb3V0ZXJDb250ZXh0IH0gZnJvbSBcXCdyZWFjdC1yb3V0ZXJcXCdgLiBodHRwOi8vdGlueS5jYy9yb3V0ZXItcm91dGVyY29udGV4dCcpIDogdm9pZCAwO1xuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JvdXRlckNvbnRleHQyLmRlZmF1bHQsIHRoaXMucHJvcHMpO1xuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUm91dGluZ0NvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1JvdXRlckNvbnRleHRcIjo1MCxcIi4vcm91dGVyV2FybmluZ1wiOjY4LFwiX3Byb2Nlc3NcIjozMyxcInJlYWN0XCI6XCJyZWFjdFwifV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucnVuRW50ZXJIb29rcyA9IHJ1bkVudGVySG9va3M7XG5leHBvcnRzLnJ1bkNoYW5nZUhvb2tzID0gcnVuQ2hhbmdlSG9va3M7XG5leHBvcnRzLnJ1bkxlYXZlSG9va3MgPSBydW5MZWF2ZUhvb2tzO1xuXG52YXIgX0FzeW5jVXRpbHMgPSByZXF1aXJlKCcuL0FzeW5jVXRpbHMnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nID0gcmVxdWlyZSgnLi9yb3V0ZXJXYXJuaW5nJyk7XG5cbnZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbkhvb2soaG9vaywgcm91dGUsIGFzeW5jQXJpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBob29rLmFwcGx5KHJvdXRlLCBhcmdzKTtcblxuICAgIGlmIChob29rLmxlbmd0aCA8IGFzeW5jQXJpdHkpIHtcbiAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgIC8vIEFzc3VtZSBob29rIGV4ZWN1dGVzIHN5bmNocm9ub3VzbHkgYW5kXG4gICAgICAvLyBhdXRvbWF0aWNhbGx5IGNhbGwgdGhlIGNhbGxiYWNrLlxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEVudGVySG9va3Mocm91dGVzKSB7XG4gIHJldHVybiByb3V0ZXMucmVkdWNlKGZ1bmN0aW9uIChob29rcywgcm91dGUpIHtcbiAgICBpZiAocm91dGUub25FbnRlcikgaG9va3MucHVzaChjcmVhdGVUcmFuc2l0aW9uSG9vayhyb3V0ZS5vbkVudGVyLCByb3V0ZSwgMykpO1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIGdldENoYW5nZUhvb2tzKHJvdXRlcykge1xuICByZXR1cm4gcm91dGVzLnJlZHVjZShmdW5jdGlvbiAoaG9va3MsIHJvdXRlKSB7XG4gICAgaWYgKHJvdXRlLm9uQ2hhbmdlKSBob29rcy5wdXNoKGNyZWF0ZVRyYW5zaXRpb25Ib29rKHJvdXRlLm9uQ2hhbmdlLCByb3V0ZSwgNCkpO1xuICAgIHJldHVybiBob29rcztcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBydW5UcmFuc2l0aW9uSG9va3MobGVuZ3RoLCBpdGVyLCBjYWxsYmFjaykge1xuICBpZiAoIWxlbmd0aCkge1xuICAgIGNhbGxiYWNrKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlZGlyZWN0SW5mbyA9IHZvaWQgMDtcbiAgZnVuY3Rpb24gcmVwbGFjZShsb2NhdGlvbiwgZGVwcmVjYXRlZFBhdGhuYW1lLCBkZXByZWNhdGVkUXVlcnkpIHtcbiAgICBpZiAoZGVwcmVjYXRlZFBhdGhuYW1lKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2ByZXBsYWNlU3RhdGUoc3RhdGUsIHBhdGhuYW1lLCBxdWVyeSkgaXMgZGVwcmVjYXRlZDsgdXNlIGByZXBsYWNlKGxvY2F0aW9uKWAgd2l0aCBhIGxvY2F0aW9uIGRlc2NyaXB0b3IgaW5zdGVhZC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWlzQWN0aXZlZGVwcmVjYXRlZCcpIDogdm9pZCAwO1xuICAgICAgcmVkaXJlY3RJbmZvID0ge1xuICAgICAgICBwYXRobmFtZTogZGVwcmVjYXRlZFBhdGhuYW1lLFxuICAgICAgICBxdWVyeTogZGVwcmVjYXRlZFF1ZXJ5LFxuICAgICAgICBzdGF0ZTogbG9jYXRpb25cbiAgICAgIH07XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZWRpcmVjdEluZm8gPSBsb2NhdGlvbjtcbiAgfVxuXG4gICgwLCBfQXN5bmNVdGlscy5sb29wQXN5bmMpKGxlbmd0aCwgZnVuY3Rpb24gKGluZGV4LCBuZXh0LCBkb25lKSB7XG4gICAgaXRlcihpbmRleCwgcmVwbGFjZSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgfHwgcmVkaXJlY3RJbmZvKSB7XG4gICAgICAgIGRvbmUoZXJyb3IsIHJlZGlyZWN0SW5mbyk7IC8vIE5vIG5lZWQgdG8gY29udGludWUuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICB9LCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogUnVucyBhbGwgb25FbnRlciBob29rcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgb2Ygcm91dGVzIGluIG9yZGVyXG4gKiB3aXRoIG9uRW50ZXIobmV4dFN0YXRlLCByZXBsYWNlLCBjYWxsYmFjaykgYW5kIGNhbGxzXG4gKiBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RJbmZvKSB3aGVuIGZpbmlzaGVkLiBUaGUgZmlyc3QgaG9va1xuICogdG8gdXNlIHJlcGxhY2Ugc2hvcnQtY2lyY3VpdHMgdGhlIGxvb3AuXG4gKlxuICogSWYgYSBob29rIG5lZWRzIHRvIHJ1biBhc3luY2hyb25vdXNseSwgaXQgbWF5IHVzZSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLiBIb3dldmVyLCBkb2luZyBzbyB3aWxsIGNhdXNlIHRoZSB0cmFuc2l0aW9uIHRvIHBhdXNlLFxuICogd2hpY2ggY291bGQgbGVhZCB0byBhIG5vbi1yZXNwb25zaXZlIFVJIGlmIHRoZSBob29rIGlzIHNsb3cuXG4gKi9cbmZ1bmN0aW9uIHJ1bkVudGVySG9va3Mocm91dGVzLCBuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gIHZhciBob29rcyA9IGdldEVudGVySG9va3Mocm91dGVzKTtcbiAgcmV0dXJuIHJ1blRyYW5zaXRpb25Ib29rcyhob29rcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZSwgbmV4dCkge1xuICAgIGhvb2tzW2luZGV4XShuZXh0U3RhdGUsIHJlcGxhY2UsIG5leHQpO1xuICB9LCBjYWxsYmFjayk7XG59XG5cbi8qKlxuICogUnVucyBhbGwgb25DaGFuZ2UgaG9va3MgaW4gdGhlIGdpdmVuIGFycmF5IG9mIHJvdXRlcyBpbiBvcmRlclxuICogd2l0aCBvbkNoYW5nZShwcmV2U3RhdGUsIG5leHRTdGF0ZSwgcmVwbGFjZSwgY2FsbGJhY2spIGFuZCBjYWxsc1xuICogY2FsbGJhY2soZXJyb3IsIHJlZGlyZWN0SW5mbykgd2hlbiBmaW5pc2hlZC4gVGhlIGZpcnN0IGhvb2tcbiAqIHRvIHVzZSByZXBsYWNlIHNob3J0LWNpcmN1aXRzIHRoZSBsb29wLlxuICpcbiAqIElmIGEgaG9vayBuZWVkcyB0byBydW4gYXN5bmNocm9ub3VzbHksIGl0IG1heSB1c2UgdGhlIGNhbGxiYWNrXG4gKiBmdW5jdGlvbi4gSG93ZXZlciwgZG9pbmcgc28gd2lsbCBjYXVzZSB0aGUgdHJhbnNpdGlvbiB0byBwYXVzZSxcbiAqIHdoaWNoIGNvdWxkIGxlYWQgdG8gYSBub24tcmVzcG9uc2l2ZSBVSSBpZiB0aGUgaG9vayBpcyBzbG93LlxuICovXG5mdW5jdGlvbiBydW5DaGFuZ2VIb29rcyhyb3V0ZXMsIHN0YXRlLCBuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gIHZhciBob29rcyA9IGdldENoYW5nZUhvb2tzKHJvdXRlcyk7XG4gIHJldHVybiBydW5UcmFuc2l0aW9uSG9va3MoaG9va3MubGVuZ3RoLCBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2UsIG5leHQpIHtcbiAgICBob29rc1tpbmRleF0oc3RhdGUsIG5leHRTdGF0ZSwgcmVwbGFjZSwgbmV4dCk7XG4gIH0sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBSdW5zIGFsbCBvbkxlYXZlIGhvb2tzIGluIHRoZSBnaXZlbiBhcnJheSBvZiByb3V0ZXMgaW4gb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIHJ1bkxlYXZlSG9va3Mocm91dGVzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSByb3V0ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAocm91dGVzW2ldLm9uTGVhdmUpIHJvdXRlc1tpXS5vbkxlYXZlLmNhbGwocm91dGVzW2ldKTtcbiAgfVxufVxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQXN5bmNVdGlsc1wiOjM1LFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzfV0sNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfUm91dGVyQ29udGV4dCA9IHJlcXVpcmUoJy4vUm91dGVyQ29udGV4dCcpO1xuXG52YXIgX1JvdXRlckNvbnRleHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVyQ29udGV4dCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgd2l0aENvbnRleHQgPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gbS5yZW5kZXJSb3V0ZXJDb250ZXh0O1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZjtcbiAgfSk7XG4gIHZhciB3aXRoQ29tcG9uZW50ID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIG0ucmVuZGVyUm91dGVDb21wb25lbnQ7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmO1xuICB9KTtcbiAgdmFyIG1ha2VDcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gbWFrZUNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgdmFyIGJhc2VDcmVhdGVFbGVtZW50ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gX3JlYWN0LmNyZWF0ZUVsZW1lbnQgOiBhcmd1bWVudHNbMF07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQsIHByb3BzKSB7XG4gICAgICByZXR1cm4gd2l0aENvbXBvbmVudC5yZWR1Y2VSaWdodChmdW5jdGlvbiAocHJldmlvdXMsIHJlbmRlclJvdXRlQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiByZW5kZXJSb3V0ZUNvbXBvbmVudChwcmV2aW91cywgcHJvcHMpO1xuICAgICAgfSwgYmFzZUNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcykpO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChyZW5kZXJQcm9wcykge1xuICAgIHJldHVybiB3aXRoQ29udGV4dC5yZWR1Y2VSaWdodChmdW5jdGlvbiAocHJldmlvdXMsIHJlbmRlclJvdXRlckNvbnRleHQpIHtcbiAgICAgIHJldHVybiByZW5kZXJSb3V0ZXJDb250ZXh0KHByZXZpb3VzLCByZW5kZXJQcm9wcyk7XG4gICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JvdXRlckNvbnRleHQyLmRlZmF1bHQsIF9leHRlbmRzKHt9LCByZW5kZXJQcm9wcywge1xuICAgICAgY3JlYXRlRWxlbWVudDogbWFrZUNyZWF0ZUVsZW1lbnQocmVuZGVyUHJvcHMuY3JlYXRlRWxlbWVudClcbiAgICB9KSkpO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUm91dGVyQ29udGV4dFwiOjUwLFwicmVhY3RcIjpcInJlYWN0XCJ9XSw1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi9jcmVhdGVCcm93c2VySGlzdG9yeScpO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUJyb3dzZXJIaXN0b3J5KTtcblxudmFyIF9jcmVhdGVSb3V0ZXJIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVSb3V0ZXJIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlUm91dGVySGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVSb3V0ZXJIaXN0b3J5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVSb3V0ZXJIaXN0b3J5Mi5kZWZhdWx0KShfY3JlYXRlQnJvd3Nlckhpc3RvcnkyLmRlZmF1bHQpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vY3JlYXRlUm91dGVySGlzdG9yeVwiOjU4LFwiaGlzdG9yeS9saWIvY3JlYXRlQnJvd3Nlckhpc3RvcnlcIjoyMX1dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG5mdW5jdGlvbiByb3V0ZVBhcmFtc0NoYW5nZWQocm91dGUsIHByZXZTdGF0ZSwgbmV4dFN0YXRlKSB7XG4gIGlmICghcm91dGUucGF0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBwYXJhbU5hbWVzID0gKDAsIF9QYXR0ZXJuVXRpbHMuZ2V0UGFyYW1OYW1lcykocm91dGUucGF0aCk7XG5cbiAgcmV0dXJuIHBhcmFtTmFtZXMuc29tZShmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG4gICAgcmV0dXJuIHByZXZTdGF0ZS5wYXJhbXNbcGFyYW1OYW1lXSAhPT0gbmV4dFN0YXRlLnBhcmFtc1twYXJhbU5hbWVdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiB7IGxlYXZlUm91dGVzLCBjaGFuZ2VSb3V0ZXMsIGVudGVyUm91dGVzIH0gZGV0ZXJtaW5lZCBieVxuICogdGhlIGNoYW5nZSBmcm9tIHByZXZTdGF0ZSB0byBuZXh0U3RhdGUuIFdlIGxlYXZlIHJvdXRlcyBpZiBlaXRoZXJcbiAqIDEpIHRoZXkgYXJlIG5vdCBpbiB0aGUgbmV4dCBzdGF0ZSBvciAyKSB0aGV5IGFyZSBpbiB0aGUgbmV4dCBzdGF0ZVxuICogYnV0IHRoZWlyIHBhcmFtcyBoYXZlIGNoYW5nZWQgKGkuZS4gL3VzZXJzLzEyMyA9PiAvdXNlcnMvNDU2KS5cbiAqXG4gKiBsZWF2ZVJvdXRlcyBhcmUgb3JkZXJlZCBzdGFydGluZyBhdCB0aGUgbGVhZiByb3V0ZSBvZiB0aGUgdHJlZVxuICogd2UncmUgbGVhdmluZyB1cCB0byB0aGUgY29tbW9uIHBhcmVudCByb3V0ZS4gZW50ZXJSb3V0ZXMgYXJlIG9yZGVyZWRcbiAqIGZyb20gdGhlIHRvcCBvZiB0aGUgdHJlZSB3ZSdyZSBlbnRlcmluZyBkb3duIHRvIHRoZSBsZWFmIHJvdXRlLlxuICpcbiAqIGNoYW5nZVJvdXRlcyBhcmUgYW55IHJvdXRlcyB0aGF0IGRpZG4ndCBsZWF2ZSBvciBlbnRlciBkdXJpbmdcbiAqIHRoZSB0cmFuc2l0aW9uLlxuICovXG5mdW5jdGlvbiBjb21wdXRlQ2hhbmdlZFJvdXRlcyhwcmV2U3RhdGUsIG5leHRTdGF0ZSkge1xuICB2YXIgcHJldlJvdXRlcyA9IHByZXZTdGF0ZSAmJiBwcmV2U3RhdGUucm91dGVzO1xuICB2YXIgbmV4dFJvdXRlcyA9IG5leHRTdGF0ZS5yb3V0ZXM7XG5cbiAgdmFyIGxlYXZlUm91dGVzID0gdm9pZCAwLFxuICAgICAgY2hhbmdlUm91dGVzID0gdm9pZCAwLFxuICAgICAgZW50ZXJSb3V0ZXMgPSB2b2lkIDA7XG4gIGlmIChwcmV2Um91dGVzKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnRJc0xlYXZpbmcgPSBmYWxzZTtcbiAgICAgIGxlYXZlUm91dGVzID0gcHJldlJvdXRlcy5maWx0ZXIoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChwYXJlbnRJc0xlYXZpbmcpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaXNMZWF2aW5nID0gbmV4dFJvdXRlcy5pbmRleE9mKHJvdXRlKSA9PT0gLTEgfHwgcm91dGVQYXJhbXNDaGFuZ2VkKHJvdXRlLCBwcmV2U3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgICAgICAgaWYgKGlzTGVhdmluZykgcGFyZW50SXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gaXNMZWF2aW5nO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gb25MZWF2ZSBob29rcyBzdGFydCBhdCB0aGUgbGVhZiByb3V0ZS5cbiAgICAgIGxlYXZlUm91dGVzLnJldmVyc2UoKTtcblxuICAgICAgZW50ZXJSb3V0ZXMgPSBbXTtcbiAgICAgIGNoYW5nZVJvdXRlcyA9IFtdO1xuXG4gICAgICBuZXh0Um91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHZhciBpc05ldyA9IHByZXZSb3V0ZXMuaW5kZXhPZihyb3V0ZSkgPT09IC0xO1xuICAgICAgICB2YXIgcGFyYW1zQ2hhbmdlZCA9IGxlYXZlUm91dGVzLmluZGV4T2Yocm91dGUpICE9PSAtMTtcblxuICAgICAgICBpZiAoaXNOZXcgfHwgcGFyYW1zQ2hhbmdlZCkgZW50ZXJSb3V0ZXMucHVzaChyb3V0ZSk7ZWxzZSBjaGFuZ2VSb3V0ZXMucHVzaChyb3V0ZSk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIGxlYXZlUm91dGVzID0gW107XG4gICAgY2hhbmdlUm91dGVzID0gW107XG4gICAgZW50ZXJSb3V0ZXMgPSBuZXh0Um91dGVzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZWF2ZVJvdXRlczogbGVhdmVSb3V0ZXMsXG4gICAgY2hhbmdlUm91dGVzOiBjaGFuZ2VSb3V0ZXMsXG4gICAgZW50ZXJSb3V0ZXM6IGVudGVyUm91dGVzXG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNvbXB1dGVDaGFuZ2VkUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59LHtcIi4vUGF0dGVyblV0aWxzXCI6NDN9XSw1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5O1xuXG52YXIgX3VzZVF1ZXJpZXMgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi91c2VRdWVyaWVzJyk7XG5cbnZhciBfdXNlUXVlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VRdWVyaWVzKTtcblxudmFyIF91c2VCYXNlbmFtZSA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL3VzZUJhc2VuYW1lJyk7XG5cbnZhciBfdXNlQmFzZW5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlQmFzZW5hbWUpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShvcHRpb25zKSB7XG4gIC8vIHNpZ25hdHVyZXMgYW5kIHR5cGUgY2hlY2tpbmcgZGlmZmVyIGJldHdlZW4gYHVzZVJvdXRlc2AgYW5kXG4gIC8vIGBjcmVhdGVNZW1vcnlIaXN0b3J5YCwgaGF2ZSB0byBjcmVhdGUgYG1lbW9yeUhpc3RvcnlgIGZpcnN0IGJlY2F1c2VcbiAgLy8gYHVzZVF1ZXJpZXNgIGRvZXNuJ3QgdW5kZXJzdGFuZCB0aGUgc2lnbmF0dXJlXG4gIHZhciBtZW1vcnlIaXN0b3J5ID0gKDAsIF9jcmVhdGVNZW1vcnlIaXN0b3J5Mi5kZWZhdWx0KShvcHRpb25zKTtcbiAgdmFyIGNyZWF0ZUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIaXN0b3J5KCkge1xuICAgIHJldHVybiBtZW1vcnlIaXN0b3J5O1xuICB9O1xuICB2YXIgaGlzdG9yeSA9ICgwLCBfdXNlUXVlcmllczIuZGVmYXVsdCkoKDAsIF91c2VCYXNlbmFtZTIuZGVmYXVsdCkoY3JlYXRlSGlzdG9yeSkpKG9wdGlvbnMpO1xuICBoaXN0b3J5Ll9fdjJfY29tcGF0aWJsZV9fID0gdHJ1ZTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiaGlzdG9yeS9saWIvY3JlYXRlTWVtb3J5SGlzdG9yeVwiOjI2LFwiaGlzdG9yeS9saWIvdXNlQmFzZW5hbWVcIjoyOSxcImhpc3RvcnkvbGliL3VzZVF1ZXJpZXNcIjozMH1dLDU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGNyZWF0ZUhpc3RvcnkpIHtcbiAgdmFyIGhpc3RvcnkgPSB2b2lkIDA7XG4gIGlmIChjYW5Vc2VET00pIGhpc3RvcnkgPSAoMCwgX3VzZVJvdXRlckhpc3RvcnkyLmRlZmF1bHQpKGNyZWF0ZUhpc3RvcnkpKCk7XG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxudmFyIF91c2VSb3V0ZXJIaXN0b3J5ID0gcmVxdWlyZSgnLi91c2VSb3V0ZXJIaXN0b3J5Jyk7XG5cbnZhciBfdXNlUm91dGVySGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VSb3V0ZXJIaXN0b3J5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7XCIuL3VzZVJvdXRlckhpc3RvcnlcIjo2OX1dLDU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG52YXIgX0FjdGlvbnMgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi9BY3Rpb25zJyk7XG5cbnZhciBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMyID0gcmVxdWlyZSgnLi9jb21wdXRlQ2hhbmdlZFJvdXRlcycpO1xuXG52YXIgX2NvbXB1dGVDaGFuZ2VkUm91dGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXB1dGVDaGFuZ2VkUm91dGVzMik7XG5cbnZhciBfVHJhbnNpdGlvblV0aWxzID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uVXRpbHMnKTtcblxudmFyIF9pc0FjdGl2ZTIgPSByZXF1aXJlKCcuL2lzQWN0aXZlJyk7XG5cbnZhciBfaXNBY3RpdmUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNBY3RpdmUyKTtcblxudmFyIF9nZXRDb21wb25lbnRzID0gcmVxdWlyZSgnLi9nZXRDb21wb25lbnRzJyk7XG5cbnZhciBfZ2V0Q29tcG9uZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRDb21wb25lbnRzKTtcblxudmFyIF9tYXRjaFJvdXRlcyA9IHJlcXVpcmUoJy4vbWF0Y2hSb3V0ZXMnKTtcblxudmFyIF9tYXRjaFJvdXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXRjaFJvdXRlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGhhc0FueVByb3BlcnRpZXMob2JqZWN0KSB7XG4gIGZvciAodmFyIHAgaW4gb2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHApKSByZXR1cm4gdHJ1ZTtcbiAgfXJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoaGlzdG9yeSwgcm91dGVzKSB7XG4gIHZhciBzdGF0ZSA9IHt9O1xuXG4gIC8vIFNpZ25hdHVyZSBzaG91bGQgYmUgKGxvY2F0aW9uLCBpbmRleE9ubHkpLCBidXQgbmVlZHMgdG8gc3VwcG9ydCAocGF0aCxcbiAgLy8gcXVlcnksIGluZGV4T25seSlcbiAgZnVuY3Rpb24gaXNBY3RpdmUobG9jYXRpb24pIHtcbiAgICB2YXIgaW5kZXhPbmx5T3JEZXByZWNhdGVkUXVlcnkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgZGVwcmVjYXRlZEluZGV4T25seSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBhcmd1bWVudHNbMl07XG5cbiAgICB2YXIgaW5kZXhPbmx5ID0gdm9pZCAwO1xuICAgIGlmIChpbmRleE9ubHlPckRlcHJlY2F0ZWRRdWVyeSAmJiBpbmRleE9ubHlPckRlcHJlY2F0ZWRRdWVyeSAhPT0gdHJ1ZSB8fCBkZXByZWNhdGVkSW5kZXhPbmx5ICE9PSBudWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gKDAsIF9yb3V0ZXJXYXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ2Bpc0FjdGl2ZShwYXRobmFtZSwgcXVlcnksIGluZGV4T25seSkgaXMgZGVwcmVjYXRlZDsgdXNlIGBpc0FjdGl2ZShsb2NhdGlvbiwgaW5kZXhPbmx5KWAgd2l0aCBhIGxvY2F0aW9uIGRlc2NyaXB0b3IgaW5zdGVhZC4gaHR0cDovL3RpbnkuY2Mvcm91dGVyLWlzQWN0aXZlZGVwcmVjYXRlZCcpIDogdm9pZCAwO1xuICAgICAgbG9jYXRpb24gPSB7IHBhdGhuYW1lOiBsb2NhdGlvbiwgcXVlcnk6IGluZGV4T25seU9yRGVwcmVjYXRlZFF1ZXJ5IH07XG4gICAgICBpbmRleE9ubHkgPSBkZXByZWNhdGVkSW5kZXhPbmx5IHx8IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IGhpc3RvcnkuY3JlYXRlTG9jYXRpb24obG9jYXRpb24pO1xuICAgICAgaW5kZXhPbmx5ID0gaW5kZXhPbmx5T3JEZXByZWNhdGVkUXVlcnk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfaXNBY3RpdmUzLmRlZmF1bHQpKGxvY2F0aW9uLCBpbmRleE9ubHksIHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5yb3V0ZXMsIHN0YXRlLnBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbkZyb21SZWRpcmVjdEluZm8obG9jYXRpb24pIHtcbiAgICByZXR1cm4gaGlzdG9yeS5jcmVhdGVMb2NhdGlvbihsb2NhdGlvbiwgX0FjdGlvbnMuUkVQTEFDRSk7XG4gIH1cblxuICB2YXIgcGFydGlhbE5leHRTdGF0ZSA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiBtYXRjaChsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgICBpZiAocGFydGlhbE5leHRTdGF0ZSAmJiBwYXJ0aWFsTmV4dFN0YXRlLmxvY2F0aW9uID09PSBsb2NhdGlvbikge1xuICAgICAgLy8gQ29udGludWUgZnJvbSB3aGVyZSB3ZSBsZWZ0IG9mZi5cbiAgICAgIGZpbmlzaE1hdGNoKHBhcnRpYWxOZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKDAsIF9tYXRjaFJvdXRlczIuZGVmYXVsdCkocm91dGVzLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKG5leHRTdGF0ZSkge1xuICAgICAgICAgIGZpbmlzaE1hdGNoKF9leHRlbmRzKHt9LCBuZXh0U3RhdGUsIHsgbG9jYXRpb246IGxvY2F0aW9uIH0pLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluaXNoTWF0Y2gobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIHZhciBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMgPSAoMCwgX2NvbXB1dGVDaGFuZ2VkUm91dGVzMy5kZWZhdWx0KShzdGF0ZSwgbmV4dFN0YXRlKTtcblxuICAgIHZhciBsZWF2ZVJvdXRlcyA9IF9jb21wdXRlQ2hhbmdlZFJvdXRlcy5sZWF2ZVJvdXRlcztcbiAgICB2YXIgY2hhbmdlUm91dGVzID0gX2NvbXB1dGVDaGFuZ2VkUm91dGVzLmNoYW5nZVJvdXRlcztcbiAgICB2YXIgZW50ZXJSb3V0ZXMgPSBfY29tcHV0ZUNoYW5nZWRSb3V0ZXMuZW50ZXJSb3V0ZXM7XG5cblxuICAgICgwLCBfVHJhbnNpdGlvblV0aWxzLnJ1bkxlYXZlSG9va3MpKGxlYXZlUm91dGVzKTtcblxuICAgIC8vIFRlYXIgZG93biBjb25maXJtYXRpb24gaG9va3MgZm9yIGxlZnQgcm91dGVzXG4gICAgbGVhdmVSb3V0ZXMuZmlsdGVyKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcmV0dXJuIGVudGVyUm91dGVzLmluZGV4T2Yocm91dGUpID09PSAtMTtcbiAgICB9KS5mb3JFYWNoKHJlbW92ZUxpc3RlbkJlZm9yZUhvb2tzRm9yUm91dGUpO1xuXG4gICAgLy8gY2hhbmdlIGFuZCBlbnRlciBob29rcyBhcmUgcnVuIGluIHNlcmllc1xuICAgICgwLCBfVHJhbnNpdGlvblV0aWxzLnJ1bkNoYW5nZUhvb2tzKShjaGFuZ2VSb3V0ZXMsIHN0YXRlLCBuZXh0U3RhdGUsIGZ1bmN0aW9uIChlcnJvciwgcmVkaXJlY3RJbmZvKSB7XG4gICAgICBpZiAoZXJyb3IgfHwgcmVkaXJlY3RJbmZvKSByZXR1cm4gaGFuZGxlRXJyb3JPclJlZGlyZWN0KGVycm9yLCByZWRpcmVjdEluZm8pO1xuXG4gICAgICAoMCwgX1RyYW5zaXRpb25VdGlscy5ydW5FbnRlckhvb2tzKShlbnRlclJvdXRlcywgbmV4dFN0YXRlLCBmaW5pc2hFbnRlckhvb2tzKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGZpbmlzaEVudGVySG9va3MoZXJyb3IsIHJlZGlyZWN0SW5mbykge1xuICAgICAgaWYgKGVycm9yIHx8IHJlZGlyZWN0SW5mbykgcmV0dXJuIGhhbmRsZUVycm9yT3JSZWRpcmVjdChlcnJvciwgcmVkaXJlY3RJbmZvKTtcblxuICAgICAgLy8gVE9ETzogRmV0Y2ggY29tcG9uZW50cyBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgICAgKDAsIF9nZXRDb21wb25lbnRzMi5kZWZhdWx0KShuZXh0U3RhdGUsIGZ1bmN0aW9uIChlcnJvciwgY29tcG9uZW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVE9ETzogTWFrZSBtYXRjaCBhIHB1cmUgZnVuY3Rpb24gYW5kIGhhdmUgc29tZSBvdGhlciBBUElcbiAgICAgICAgICAvLyBmb3IgXCJtYXRjaCBhbmQgdXBkYXRlIHN0YXRlXCIuXG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgbnVsbCwgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgbmV4dFN0YXRlLCB7IGNvbXBvbmVudHM6IGNvbXBvbmVudHMgfSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFcnJvck9yUmVkaXJlY3QoZXJyb3IsIHJlZGlyZWN0SW5mbykge1xuICAgICAgaWYgKGVycm9yKSBjYWxsYmFjayhlcnJvcik7ZWxzZSBjYWxsYmFjayhudWxsLCBjcmVhdGVMb2NhdGlvbkZyb21SZWRpcmVjdEluZm8ocmVkaXJlY3RJbmZvKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIFJvdXRlR3VpZCA9IDE7XG5cbiAgZnVuY3Rpb24gZ2V0Um91dGVJRChyb3V0ZSkge1xuICAgIHZhciBjcmVhdGUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzFdO1xuXG4gICAgcmV0dXJuIHJvdXRlLl9faWRfXyB8fCBjcmVhdGUgJiYgKHJvdXRlLl9faWRfXyA9IFJvdXRlR3VpZCsrKTtcbiAgfVxuXG4gIHZhciBSb3V0ZUhvb2tzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmdW5jdGlvbiBnZXRSb3V0ZUhvb2tzRm9yUm91dGVzKHJvdXRlcykge1xuICAgIHJldHVybiByb3V0ZXMucmVkdWNlKGZ1bmN0aW9uIChob29rcywgcm91dGUpIHtcbiAgICAgIGhvb2tzLnB1c2guYXBwbHkoaG9va3MsIFJvdXRlSG9va3NbZ2V0Um91dGVJRChyb3V0ZSldKTtcbiAgICAgIHJldHVybiBob29rcztcbiAgICB9LCBbXSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uSG9vayhsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgICAoMCwgX21hdGNoUm91dGVzMi5kZWZhdWx0KShyb3V0ZXMsIGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIG5leHRTdGF0ZSkge1xuICAgICAgaWYgKG5leHRTdGF0ZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFdlIGRpZG4ndCBhY3R1YWxseSBtYXRjaCBhbnl0aGluZywgYnV0IGhhbmdcbiAgICAgICAgLy8gb250byBlcnJvci9uZXh0U3RhdGUgc28gd2UgZG9uJ3QgaGF2ZSB0byBtYXRjaFJvdXRlc1xuICAgICAgICAvLyBhZ2FpbiBpbiB0aGUgbGlzdGVuIGNhbGxiYWNrLlxuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIENhY2hlIHNvbWUgc3RhdGUgaGVyZSBzbyB3ZSBkb24ndCBoYXZlIHRvXG4gICAgICAvLyBtYXRjaFJvdXRlcygpIGFnYWluIGluIHRoZSBsaXN0ZW4gY2FsbGJhY2suXG4gICAgICBwYXJ0aWFsTmV4dFN0YXRlID0gX2V4dGVuZHMoe30sIG5leHRTdGF0ZSwgeyBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG5cbiAgICAgIHZhciBob29rcyA9IGdldFJvdXRlSG9va3NGb3JSb3V0ZXMoKDAsIF9jb21wdXRlQ2hhbmdlZFJvdXRlczMuZGVmYXVsdCkoc3RhdGUsIHBhcnRpYWxOZXh0U3RhdGUpLmxlYXZlUm91dGVzKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBob29rcy5sZW5ndGg7IHJlc3VsdCA9PSBudWxsICYmIGkgPCBsZW47ICsraSkge1xuICAgICAgICAvLyBQYXNzaW5nIHRoZSBsb2NhdGlvbiBhcmcgaGVyZSBpbmRpY2F0ZXMgdG9cbiAgICAgICAgLy8gdGhlIHVzZXIgdGhhdCB0aGlzIGlzIGEgdHJhbnNpdGlvbiBob29rLlxuICAgICAgICByZXN1bHQgPSBob29rc1tpXShsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogdW50ZXN0YWJsZSB3aXRoIEthcm1hICovXG4gIGZ1bmN0aW9uIGJlZm9yZVVubG9hZEhvb2soKSB7XG4gICAgLy8gU3luY2hyb25vdXNseSBjaGVjayB0byBzZWUgaWYgYW55IHJvdXRlIGhvb2tzIHdhbnRcbiAgICAvLyB0byBwcmV2ZW50IHRoZSBjdXJyZW50IHdpbmRvdy90YWIgZnJvbSBjbG9zaW5nLlxuICAgIGlmIChzdGF0ZS5yb3V0ZXMpIHtcbiAgICAgIHZhciBob29rcyA9IGdldFJvdXRlSG9va3NGb3JSb3V0ZXMoc3RhdGUucm91dGVzKTtcblxuICAgICAgdmFyIG1lc3NhZ2UgPSB2b2lkIDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaG9va3MubGVuZ3RoOyB0eXBlb2YgbWVzc2FnZSAhPT0gJ3N0cmluZycgJiYgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIC8vIFBhc3Npbmcgbm8gYXJncyBpbmRpY2F0ZXMgdG8gdGhlIHVzZXIgdGhhdCB0aGlzIGlzIGFcbiAgICAgICAgLy8gYmVmb3JldW5sb2FkIGhvb2suIFdlIGRvbid0IGtub3cgdGhlIG5leHQgbG9jYXRpb24uXG4gICAgICAgIG1lc3NhZ2UgPSBob29rc1tpXSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICB2YXIgdW5saXN0ZW5CZWZvcmUgPSB2b2lkIDAsXG4gICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5CZWZvcmVIb29rc0ZvclJvdXRlKHJvdXRlKSB7XG4gICAgdmFyIHJvdXRlSUQgPSBnZXRSb3V0ZUlEKHJvdXRlLCBmYWxzZSk7XG4gICAgaWYgKCFyb3V0ZUlEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIFJvdXRlSG9va3Nbcm91dGVJRF07XG5cbiAgICBpZiAoIWhhc0FueVByb3BlcnRpZXMoUm91dGVIb29rcykpIHtcbiAgICAgIC8vIHRlYXJkb3duIHRyYW5zaXRpb24gJiBiZWZvcmV1bmxvYWQgaG9va3NcbiAgICAgIGlmICh1bmxpc3RlbkJlZm9yZSkge1xuICAgICAgICB1bmxpc3RlbkJlZm9yZSgpO1xuICAgICAgICB1bmxpc3RlbkJlZm9yZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh1bmxpc3RlbkJlZm9yZVVubG9hZCkge1xuICAgICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCgpO1xuICAgICAgICB1bmxpc3RlbkJlZm9yZVVubG9hZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyB0aGUgZ2l2ZW4gaG9vayBmdW5jdGlvbiB0byBydW4gYmVmb3JlIGxlYXZpbmcgdGhlIGdpdmVuIHJvdXRlLlxuICAgKlxuICAgKiBEdXJpbmcgYSBub3JtYWwgdHJhbnNpdGlvbiwgdGhlIGhvb2sgZnVuY3Rpb24gcmVjZWl2ZXMgdGhlIG5leHQgbG9jYXRpb25cbiAgICogYXMgaXRzIG9ubHkgYXJndW1lbnQgYW5kIG11c3QgcmV0dXJuIGVpdGhlciBhKSBhIHByb21wdCBtZXNzYWdlIHRvIHNob3dcbiAgICogdGhlIHVzZXIsIHRvIG1ha2Ugc3VyZSB0aGV5IHdhbnQgdG8gbGVhdmUgdGhlIHBhZ2Ugb3IgYikgZmFsc2UsIHRvIHByZXZlbnRcbiAgICogdGhlIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIER1cmluZyB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IChpbiBicm93c2VycykgdGhlIGhvb2sgcmVjZWl2ZXMgbm8gYXJndW1lbnRzLlxuICAgKiBJbiB0aGlzIGNhc2UgaXQgbXVzdCByZXR1cm4gYSBwcm9tcHQgbWVzc2FnZSB0byBwcmV2ZW50IHRoZSB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byB1bmJpbmQgdGhlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKHJvdXRlLCBob29rKSB7XG4gICAgLy8gVE9ETzogV2FybiBpZiB0aGV5IHJlZ2lzdGVyIGZvciBhIHJvdXRlIHRoYXQgaXNuJ3QgY3VycmVudGx5XG4gICAgLy8gYWN0aXZlLiBUaGV5J3JlIHByb2JhYmx5IGRvaW5nIHNvbWV0aGluZyB3cm9uZywgbGlrZSByZS1jcmVhdGluZ1xuICAgIC8vIHJvdXRlIG9iamVjdHMgb24gZXZlcnkgbG9jYXRpb24gY2hhbmdlLlxuICAgIHZhciByb3V0ZUlEID0gZ2V0Um91dGVJRChyb3V0ZSk7XG4gICAgdmFyIGhvb2tzID0gUm91dGVIb29rc1tyb3V0ZUlEXTtcblxuICAgIGlmICghaG9va3MpIHtcbiAgICAgIHZhciB0aGVyZVdlcmVOb1JvdXRlSG9va3MgPSAhaGFzQW55UHJvcGVydGllcyhSb3V0ZUhvb2tzKTtcblxuICAgICAgUm91dGVIb29rc1tyb3V0ZUlEXSA9IFtob29rXTtcblxuICAgICAgaWYgKHRoZXJlV2VyZU5vUm91dGVIb29rcykge1xuICAgICAgICAvLyBzZXR1cCB0cmFuc2l0aW9uICYgYmVmb3JldW5sb2FkIGhvb2tzXG4gICAgICAgIHVubGlzdGVuQmVmb3JlID0gaGlzdG9yeS5saXN0ZW5CZWZvcmUodHJhbnNpdGlvbkhvb2spO1xuXG4gICAgICAgIGlmIChoaXN0b3J5Lmxpc3RlbkJlZm9yZVVubG9hZCkgdW5saXN0ZW5CZWZvcmVVbmxvYWQgPSBoaXN0b3J5Lmxpc3RlbkJlZm9yZVVubG9hZChiZWZvcmVVbmxvYWRIb29rKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhvb2tzLmluZGV4T2YoaG9vaykgPT09IC0xKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnYWRkaW5nIG11bHRpcGxlIGxlYXZlIGhvb2tzIGZvciB0aGUgc2FtZSByb3V0ZSBpcyBkZXByZWNhdGVkOyBtYW5hZ2UgbXVsdGlwbGUgY29uZmlybWF0aW9ucyBpbiB5b3VyIG93biBjb2RlIGluc3RlYWQnKSA6IHZvaWQgMDtcblxuICAgICAgICBob29rcy5wdXNoKGhvb2spO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaG9va3MgPSBSb3V0ZUhvb2tzW3JvdXRlSURdO1xuXG4gICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgdmFyIG5ld0hvb2tzID0gaG9va3MuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGhvb2s7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChuZXdIb29rcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5CZWZvcmVIb29rc0ZvclJvdXRlKHJvdXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSb3V0ZUhvb2tzW3JvdXRlSURdID0gbmV3SG9va3M7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIEFQSSBmb3Igc3RhdGVmdWwgZW52aXJvbm1lbnRzLiBBcyB0aGUgbG9jYXRpb25cbiAgICogY2hhbmdlcywgd2UgdXBkYXRlIHN0YXRlIGFuZCBjYWxsIHRoZSBsaXN0ZW5lci4gV2UgY2FuIGFsc29cbiAgICogZ3JhY2VmdWxseSBoYW5kbGUgZXJyb3JzIGFuZCByZWRpcmVjdHMuXG4gICAqL1xuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICAvLyBUT0RPOiBPbmx5IHVzZSBhIHNpbmdsZSBoaXN0b3J5IGxpc3RlbmVyLiBPdGhlcndpc2Ugd2UnbGxcbiAgICAvLyBlbmQgdXAgd2l0aCBtdWx0aXBsZSBjb25jdXJyZW50IGNhbGxzIHRvIG1hdGNoLlxuICAgIHJldHVybiBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIGlmIChzdGF0ZS5sb2NhdGlvbiA9PT0gbG9jYXRpb24pIHtcbiAgICAgICAgbGlzdGVuZXIobnVsbCwgc3RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0Y2gobG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZWRpcmVjdExvY2F0aW9uKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhyZWRpcmVjdExvY2F0aW9uKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRTdGF0ZSkge1xuICAgICAgICAgICAgbGlzdGVuZXIobnVsbCwgbmV4dFN0YXRlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdMb2NhdGlvbiBcIiVzXCIgZGlkIG5vdCBtYXRjaCBhbnkgcm91dGVzJywgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0FjdGl2ZTogaXNBY3RpdmUsXG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGxpc3RlbkJlZm9yZUxlYXZpbmdSb3V0ZTogbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG59XG5cbi8vZXhwb3J0IGRlZmF1bHQgdXNlUm91dGVzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCIuL1RyYW5zaXRpb25VdGlsc1wiOjUzLFwiLi9jb21wdXRlQ2hhbmdlZFJvdXRlc1wiOjU2LFwiLi9nZXRDb21wb25lbnRzXCI6NjEsXCIuL2lzQWN0aXZlXCI6NjUsXCIuL21hdGNoUm91dGVzXCI6NjcsXCIuL3JvdXRlcldhcm5pbmdcIjo2OCxcIl9wcm9jZXNzXCI6MzMsXCJoaXN0b3J5L2xpYi9BY3Rpb25zXCI6MTV9XSw2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jYW5Vc2VNZW1icmFuZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yb3V0ZXJXYXJuaW5nID0gcmVxdWlyZSgnLi9yb3V0ZXJXYXJuaW5nJyk7XG5cbnZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNhblVzZU1lbWJyYW5lID0gZXhwb3J0cy5jYW5Vc2VNZW1icmFuZSA9IGZhbHNlO1xuXG4vLyBOby1vcCBieSBkZWZhdWx0LlxudmFyIGRlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdHJ5IHtcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KS54KSB7XG4gICAgICBleHBvcnRzLmNhblVzZU1lbWJyYW5lID0gY2FuVXNlTWVtYnJhbmUgPSB0cnVlO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuICB9IGNhdGNoIChlKSB7fVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWVtcHR5ICovXG5cbiAgaWYgKGNhblVzZU1lbWJyYW5lKSB7XG4gICAgZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXMob2JqZWN0LCBtZXNzYWdlKSB7XG4gICAgICAvLyBXcmFwIHRoZSBkZXByZWNhdGVkIG9iamVjdCBpbiBhIG1lbWJyYW5lIHRvIHdhcm4gb24gcHJvcGVydHkgYWNjZXNzLlxuICAgICAgdmFyIG1lbWJyYW5lID0ge307XG5cbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHByb3ApIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgIHJldHVybiAnY29udGludWUnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBDYW4ndCB1c2UgZmF0IGFycm93IGhlcmUgYmVjYXVzZSBvZiB1c2Ugb2YgYXJndW1lbnRzIGJlbG93LlxuICAgICAgICAgIG1lbWJyYW5lW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtwcm9wXS5hcHBseShvYmplY3QsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gJ2NvbnRpbnVlJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXNlIHByb3BlcnRpZXMgYXJlIG5vbi1lbnVtZXJhYmxlIHRvIHByZXZlbnQgUmVhY3QgZGV2IHRvb2xzIGZyb21cbiAgICAgICAgLy8gc2VlaW5nIHRoZW0gYW5kIGNhdXNpbmcgc3B1cmlvdXMgd2FybmluZ3Mgd2hlbiBhY2Nlc3NpbmcgdGhlbS4gSW5cbiAgICAgICAgLy8gcHJpbmNpcGxlIHRoaXMgY291bGQgYmUgZG9uZSB3aXRoIGEgcHJveHksIGJ1dCBzdXBwb3J0IGZvciB0aGVcbiAgICAgICAgLy8gb3duS2V5cyB0cmFwIG9uIHByb3hpZXMgaXMgbm90IHVuaXZlcnNhbCwgZXZlbiBhbW9uZyBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIG90aGVyd2lzZSBzdXBwb3J0IHByb3hpZXMuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZW1icmFuZSwgcHJvcCwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtwcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmplY3QpIHtcbiAgICAgICAgdmFyIF9yZXQgPSBfbG9vcChwcm9wKTtcblxuICAgICAgICBpZiAoX3JldCA9PT0gJ2NvbnRpbnVlJykgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZW1icmFuZTtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGRlcHJlY2F0ZU9iamVjdFByb3BlcnRpZXM7XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzfV0sNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9Bc3luY1V0aWxzID0gcmVxdWlyZSgnLi9Bc3luY1V0aWxzJyk7XG5cbnZhciBfZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZGVwcmVjYXRlT2JqZWN0UHJvcGVydGllcycpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnRzRm9yUm91dGUobmV4dFN0YXRlLCByb3V0ZSwgY2FsbGJhY2spIHtcbiAgaWYgKHJvdXRlLmNvbXBvbmVudCB8fCByb3V0ZS5jb21wb25lbnRzKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgcm91dGUuY29tcG9uZW50IHx8IHJvdXRlLmNvbXBvbmVudHMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBnZXRDb21wb25lbnQgPSByb3V0ZS5nZXRDb21wb25lbnQgfHwgcm91dGUuZ2V0Q29tcG9uZW50cztcbiAgaWYgKCFnZXRDb21wb25lbnQpIHtcbiAgICBjYWxsYmFjaygpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IG5leHRTdGF0ZS5sb2NhdGlvbjtcblxuICB2YXIgbmV4dFN0YXRlV2l0aExvY2F0aW9uID0gdm9pZCAwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzLmNhblVzZU1lbWJyYW5lKSB7XG4gICAgbmV4dFN0YXRlV2l0aExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRTdGF0ZSk7XG5cbiAgICAvLyBJIGRvbid0IHVzZSBkZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBJIHdhbnQgdG8ga2VlcCB0aGVcbiAgICAvLyBzYW1lIGNvZGUgcGF0aCBiZXR3ZWVuIGRldmVsb3BtZW50IGFuZCBwcm9kdWN0aW9uLCBpbiB0aGF0IHdlIGp1c3RcbiAgICAvLyBhc3NpZ24gZXh0cmEgcHJvcGVydGllcyB0byB0aGUgY29weSBvZiB0aGUgc3RhdGUgb2JqZWN0IGluIGJvdGggY2FzZXMuXG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChwcm9wKSB7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChsb2NhdGlvbiwgcHJvcCkpIHtcbiAgICAgICAgcmV0dXJuICdjb250aW51ZSc7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXh0U3RhdGVXaXRoTG9jYXRpb24sIHByb3AsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBY2Nlc3NpbmcgbG9jYXRpb24gcHJvcGVydGllcyBmcm9tIHRoZSBmaXJzdCBhcmd1bWVudCB0byBgZ2V0Q29tcG9uZW50YCBhbmQgYGdldENvbXBvbmVudHNgIGlzIGRlcHJlY2F0ZWQuIFRoYXQgYXJndW1lbnQgaXMgbm93IHRoZSByb3V0ZXIgc3RhdGUgKGBuZXh0U3RhdGVgKSByYXRoZXIgdGhhbiB0aGUgbG9jYXRpb24uIFRvIGFjY2VzcyB0aGUgbG9jYXRpb24sIHVzZSBgbmV4dFN0YXRlLmxvY2F0aW9uYC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gbG9jYXRpb25bcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKHByb3ApO1xuXG4gICAgICBpZiAoX3JldCA9PT0gJ2NvbnRpbnVlJykgY29udGludWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5leHRTdGF0ZVdpdGhMb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBuZXh0U3RhdGUsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIGdldENvbXBvbmVudC5jYWxsKHJvdXRlLCBuZXh0U3RhdGVXaXRoTG9jYXRpb24sIGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBmZXRjaGVzIGFsbCBjb21wb25lbnRzIG5lZWRlZCBmb3IgdGhlIGdpdmVuIHJvdXRlclxuICogc3RhdGUgYW5kIGNhbGxzIGNhbGxiYWNrKGVycm9yLCBjb21wb25lbnRzKSB3aGVuIGZpbmlzaGVkLlxuICpcbiAqIE5vdGU6IFRoaXMgb3BlcmF0aW9uIG1heSBmaW5pc2ggc3luY2hyb25vdXNseSBpZiBubyByb3V0ZXMgaGF2ZSBhblxuICogYXN5bmNocm9ub3VzIGdldENvbXBvbmVudHMgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRzKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgKDAsIF9Bc3luY1V0aWxzLm1hcEFzeW5jKShuZXh0U3RhdGUucm91dGVzLCBmdW5jdGlvbiAocm91dGUsIGluZGV4LCBjYWxsYmFjaykge1xuICAgIGdldENvbXBvbmVudHNGb3JSb3V0ZShuZXh0U3RhdGUsIHJvdXRlLCBjYWxsYmFjayk7XG4gIH0sIGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0Q29tcG9uZW50cztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQXN5bmNVdGlsc1wiOjM1LFwiLi9kZXByZWNhdGVPYmplY3RQcm9wZXJ0aWVzXCI6NjAsXCIuL3JvdXRlcldhcm5pbmdcIjo2OCxcIl9wcm9jZXNzXCI6MzN9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfUGF0dGVyblV0aWxzID0gcmVxdWlyZSgnLi9QYXR0ZXJuVXRpbHMnKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhbiBvYmplY3Qgb2YgcGFyYW1zIHRoZSBnaXZlbiByb3V0ZSBjYXJlcyBhYm91dCBmcm9tXG4gKiB0aGUgZ2l2ZW4gcGFyYW1zIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91dGVQYXJhbXMocm91dGUsIHBhcmFtcykge1xuICB2YXIgcm91dGVQYXJhbXMgPSB7fTtcblxuICBpZiAoIXJvdXRlLnBhdGgpIHJldHVybiByb3V0ZVBhcmFtcztcblxuICB2YXIgcGFyYW1OYW1lcyA9ICgwLCBfUGF0dGVyblV0aWxzLmdldFBhcmFtTmFtZXMpKHJvdXRlLnBhdGgpO1xuXG4gIGZvciAodmFyIHAgaW4gcGFyYW1zKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsIHApICYmIHBhcmFtTmFtZXMuaW5kZXhPZihwKSAhPT0gLTEpIHtcbiAgICAgIHJvdXRlUGFyYW1zW3BdID0gcGFyYW1zW3BdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb3V0ZVBhcmFtcztcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0Um91dGVQYXJhbXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9QYXR0ZXJuVXRpbHNcIjo0M31dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeSA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL2NyZWF0ZUhhc2hIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlSGFzaEhpc3RvcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlSGFzaEhpc3RvcnkpO1xuXG52YXIgX2NyZWF0ZVJvdXRlckhpc3RvcnkgPSByZXF1aXJlKCcuL2NyZWF0ZVJvdXRlckhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVSb3V0ZXJIaXN0b3J5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVJvdXRlckhpc3RvcnkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVJvdXRlckhpc3RvcnkyLmRlZmF1bHQpKF9jcmVhdGVIYXNoSGlzdG9yeTIuZGVmYXVsdCk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0se1wiLi9jcmVhdGVSb3V0ZXJIaXN0b3J5XCI6NTgsXCJoaXN0b3J5L2xpYi9jcmVhdGVIYXNoSGlzdG9yeVwiOjIzfV0sNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gZXhwb3J0cy5oYXNoSGlzdG9yeSA9IGV4cG9ydHMuYnJvd3Nlckhpc3RvcnkgPSBleHBvcnRzLmFwcGx5Um91dGVyTWlkZGxld2FyZSA9IGV4cG9ydHMuZm9ybWF0UGF0dGVybiA9IGV4cG9ydHMudXNlUm91dGVySGlzdG9yeSA9IGV4cG9ydHMubWF0Y2ggPSBleHBvcnRzLnJvdXRlclNoYXBlID0gZXhwb3J0cy5sb2NhdGlvblNoYXBlID0gZXhwb3J0cy5Qcm9wVHlwZXMgPSBleHBvcnRzLlJvdXRpbmdDb250ZXh0ID0gZXhwb3J0cy5Sb3V0ZXJDb250ZXh0ID0gZXhwb3J0cy5jcmVhdGVSb3V0ZXMgPSBleHBvcnRzLnVzZVJvdXRlcyA9IGV4cG9ydHMuUm91dGVDb250ZXh0ID0gZXhwb3J0cy5MaWZlY3ljbGUgPSBleHBvcnRzLkhpc3RvcnkgPSBleHBvcnRzLlJvdXRlID0gZXhwb3J0cy5SZWRpcmVjdCA9IGV4cG9ydHMuSW5kZXhSb3V0ZSA9IGV4cG9ydHMuSW5kZXhSZWRpcmVjdCA9IGV4cG9ydHMud2l0aFJvdXRlciA9IGV4cG9ydHMuSW5kZXhMaW5rID0gZXhwb3J0cy5MaW5rID0gZXhwb3J0cy5Sb3V0ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVJvdXRlcycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcztcbiAgfVxufSk7XG5cbnZhciBfUHJvcFR5cGVzMiA9IHJlcXVpcmUoJy4vUHJvcFR5cGVzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbG9jYXRpb25TaGFwZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qcm9wVHlwZXMyLmxvY2F0aW9uU2hhcGU7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdyb3V0ZXJTaGFwZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qcm9wVHlwZXMyLnJvdXRlclNoYXBlO1xuICB9XG59KTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2Zvcm1hdFBhdHRlcm4nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0dGVyblV0aWxzLmZvcm1hdFBhdHRlcm47XG4gIH1cbn0pO1xuXG52YXIgX1JvdXRlcjIgPSByZXF1aXJlKCcuL1JvdXRlcicpO1xuXG52YXIgX1JvdXRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXIyKTtcblxudmFyIF9MaW5rMiA9IHJlcXVpcmUoJy4vTGluaycpO1xuXG52YXIgX0xpbmszID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGluazIpO1xuXG52YXIgX0luZGV4TGluazIgPSByZXF1aXJlKCcuL0luZGV4TGluaycpO1xuXG52YXIgX0luZGV4TGluazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JbmRleExpbmsyKTtcblxudmFyIF93aXRoUm91dGVyMiA9IHJlcXVpcmUoJy4vd2l0aFJvdXRlcicpO1xuXG52YXIgX3dpdGhSb3V0ZXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2l0aFJvdXRlcjIpO1xuXG52YXIgX0luZGV4UmVkaXJlY3QyID0gcmVxdWlyZSgnLi9JbmRleFJlZGlyZWN0Jyk7XG5cbnZhciBfSW5kZXhSZWRpcmVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JbmRleFJlZGlyZWN0Mik7XG5cbnZhciBfSW5kZXhSb3V0ZTIgPSByZXF1aXJlKCcuL0luZGV4Um91dGUnKTtcblxudmFyIF9JbmRleFJvdXRlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0luZGV4Um91dGUyKTtcblxudmFyIF9SZWRpcmVjdDIgPSByZXF1aXJlKCcuL1JlZGlyZWN0Jyk7XG5cbnZhciBfUmVkaXJlY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVkaXJlY3QyKTtcblxudmFyIF9Sb3V0ZTIgPSByZXF1aXJlKCcuL1JvdXRlJyk7XG5cbnZhciBfUm91dGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGUyKTtcblxudmFyIF9IaXN0b3J5MiA9IHJlcXVpcmUoJy4vSGlzdG9yeScpO1xuXG52YXIgX0hpc3RvcnkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSGlzdG9yeTIpO1xuXG52YXIgX0xpZmVjeWNsZTIgPSByZXF1aXJlKCcuL0xpZmVjeWNsZScpO1xuXG52YXIgX0xpZmVjeWNsZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaWZlY3ljbGUyKTtcblxudmFyIF9Sb3V0ZUNvbnRleHQyID0gcmVxdWlyZSgnLi9Sb3V0ZUNvbnRleHQnKTtcblxudmFyIF9Sb3V0ZUNvbnRleHQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm91dGVDb250ZXh0Mik7XG5cbnZhciBfdXNlUm91dGVzMiA9IHJlcXVpcmUoJy4vdXNlUm91dGVzJyk7XG5cbnZhciBfdXNlUm91dGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZVJvdXRlczIpO1xuXG52YXIgX1JvdXRlckNvbnRleHQyID0gcmVxdWlyZSgnLi9Sb3V0ZXJDb250ZXh0Jyk7XG5cbnZhciBfUm91dGVyQ29udGV4dDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3V0ZXJDb250ZXh0Mik7XG5cbnZhciBfUm91dGluZ0NvbnRleHQyID0gcmVxdWlyZSgnLi9Sb3V0aW5nQ29udGV4dCcpO1xuXG52YXIgX1JvdXRpbmdDb250ZXh0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JvdXRpbmdDb250ZXh0Mik7XG5cbnZhciBfUHJvcFR5cGVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3BUeXBlczIpO1xuXG52YXIgX21hdGNoMiA9IHJlcXVpcmUoJy4vbWF0Y2gnKTtcblxudmFyIF9tYXRjaDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXRjaDIpO1xuXG52YXIgX3VzZVJvdXRlckhpc3RvcnkyID0gcmVxdWlyZSgnLi91c2VSb3V0ZXJIaXN0b3J5Jyk7XG5cbnZhciBfdXNlUm91dGVySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VSb3V0ZXJIaXN0b3J5Mik7XG5cbnZhciBfYXBwbHlSb3V0ZXJNaWRkbGV3YXJlMiA9IHJlcXVpcmUoJy4vYXBwbHlSb3V0ZXJNaWRkbGV3YXJlJyk7XG5cbnZhciBfYXBwbHlSb3V0ZXJNaWRkbGV3YXJlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FwcGx5Um91dGVyTWlkZGxld2FyZTIpO1xuXG52YXIgX2Jyb3dzZXJIaXN0b3J5MiA9IHJlcXVpcmUoJy4vYnJvd3Nlckhpc3RvcnknKTtcblxudmFyIF9icm93c2VySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9icm93c2VySGlzdG9yeTIpO1xuXG52YXIgX2hhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vaGFzaEhpc3RvcnknKTtcblxudmFyIF9oYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNoSGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuUm91dGVyID0gX1JvdXRlcjMuZGVmYXVsdDsgLyogY29tcG9uZW50cyAqL1xuXG5leHBvcnRzLkxpbmsgPSBfTGluazMuZGVmYXVsdDtcbmV4cG9ydHMuSW5kZXhMaW5rID0gX0luZGV4TGluazMuZGVmYXVsdDtcbmV4cG9ydHMud2l0aFJvdXRlciA9IF93aXRoUm91dGVyMy5kZWZhdWx0O1xuXG4vKiBjb21wb25lbnRzIChjb25maWd1cmF0aW9uKSAqL1xuXG5leHBvcnRzLkluZGV4UmVkaXJlY3QgPSBfSW5kZXhSZWRpcmVjdDMuZGVmYXVsdDtcbmV4cG9ydHMuSW5kZXhSb3V0ZSA9IF9JbmRleFJvdXRlMy5kZWZhdWx0O1xuZXhwb3J0cy5SZWRpcmVjdCA9IF9SZWRpcmVjdDMuZGVmYXVsdDtcbmV4cG9ydHMuUm91dGUgPSBfUm91dGUzLmRlZmF1bHQ7XG5cbi8qIG1peGlucyAqL1xuXG5leHBvcnRzLkhpc3RvcnkgPSBfSGlzdG9yeTMuZGVmYXVsdDtcbmV4cG9ydHMuTGlmZWN5Y2xlID0gX0xpZmVjeWNsZTMuZGVmYXVsdDtcbmV4cG9ydHMuUm91dGVDb250ZXh0ID0gX1JvdXRlQ29udGV4dDMuZGVmYXVsdDtcblxuLyogdXRpbHMgKi9cblxuZXhwb3J0cy51c2VSb3V0ZXMgPSBfdXNlUm91dGVzMy5kZWZhdWx0O1xuZXhwb3J0cy5Sb3V0ZXJDb250ZXh0ID0gX1JvdXRlckNvbnRleHQzLmRlZmF1bHQ7XG5leHBvcnRzLlJvdXRpbmdDb250ZXh0ID0gX1JvdXRpbmdDb250ZXh0My5kZWZhdWx0O1xuZXhwb3J0cy5Qcm9wVHlwZXMgPSBfUHJvcFR5cGVzMy5kZWZhdWx0O1xuZXhwb3J0cy5tYXRjaCA9IF9tYXRjaDMuZGVmYXVsdDtcbmV4cG9ydHMudXNlUm91dGVySGlzdG9yeSA9IF91c2VSb3V0ZXJIaXN0b3J5My5kZWZhdWx0O1xuZXhwb3J0cy5hcHBseVJvdXRlck1pZGRsZXdhcmUgPSBfYXBwbHlSb3V0ZXJNaWRkbGV3YXJlMy5kZWZhdWx0O1xuXG4vKiBoaXN0b3JpZXMgKi9cblxuZXhwb3J0cy5icm93c2VySGlzdG9yeSA9IF9icm93c2VySGlzdG9yeTMuZGVmYXVsdDtcbmV4cG9ydHMuaGFzaEhpc3RvcnkgPSBfaGFzaEhpc3RvcnkzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBfY3JlYXRlTWVtb3J5SGlzdG9yeTMuZGVmYXVsdDtcbn0se1wiLi9IaXN0b3J5XCI6MzYsXCIuL0luZGV4TGlua1wiOjM3LFwiLi9JbmRleFJlZGlyZWN0XCI6MzgsXCIuL0luZGV4Um91dGVcIjozOSxcIi4vTGlmZWN5Y2xlXCI6NDEsXCIuL0xpbmtcIjo0MixcIi4vUGF0dGVyblV0aWxzXCI6NDMsXCIuL1Byb3BUeXBlc1wiOjQ0LFwiLi9SZWRpcmVjdFwiOjQ1LFwiLi9Sb3V0ZVwiOjQ2LFwiLi9Sb3V0ZUNvbnRleHRcIjo0NyxcIi4vUm91dGVVdGlsc1wiOjQ4LFwiLi9Sb3V0ZXJcIjo0OSxcIi4vUm91dGVyQ29udGV4dFwiOjUwLFwiLi9Sb3V0aW5nQ29udGV4dFwiOjUyLFwiLi9hcHBseVJvdXRlck1pZGRsZXdhcmVcIjo1NCxcIi4vYnJvd3Nlckhpc3RvcnlcIjo1NSxcIi4vY3JlYXRlTWVtb3J5SGlzdG9yeVwiOjU3LFwiLi9oYXNoSGlzdG9yeVwiOjYzLFwiLi9tYXRjaFwiOjY2LFwiLi91c2VSb3V0ZXJIaXN0b3J5XCI6NjksXCIuL3VzZVJvdXRlc1wiOjcwLFwiLi93aXRoUm91dGVyXCI6NzF9XSw2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBpc0FjdGl2ZTtcblxudmFyIF9QYXR0ZXJuVXRpbHMgPSByZXF1aXJlKCcuL1BhdHRlcm5VdGlscycpO1xuXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gZGVlcEVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBwIGluIGEpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIHApKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYVtwXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChiW3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFkZWVwRXF1YWwoYVtwXSwgYltwXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBwYXRobmFtZSBtYXRjaGVzIHRoZSBzdXBwbGllZCBvbmUsIG5ldCBvZlxuICogbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2ggbm9ybWFsaXphdGlvbi4gVGhpcyBpcyBzdWZmaWNpZW50IGZvciBhblxuICogaW5kZXhPbmx5IHJvdXRlIG1hdGNoLlxuICovXG5mdW5jdGlvbiBwYXRoSXNBY3RpdmUocGF0aG5hbWUsIGN1cnJlbnRQYXRobmFtZSkge1xuICAvLyBOb3JtYWxpemUgbGVhZGluZyBzbGFzaCBmb3IgY29uc2lzdGVuY3kuIExlYWRpbmcgc2xhc2ggb24gcGF0aG5hbWUgaGFzXG4gIC8vIGFscmVhZHkgYmVlbiBub3JtYWxpemVkIGluIGlzQWN0aXZlLiBTZWUgY2F2ZWF0IHRoZXJlLlxuICBpZiAoY3VycmVudFBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgY3VycmVudFBhdGhuYW1lID0gJy8nICsgY3VycmVudFBhdGhuYW1lO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBlbmQgb2YgYm90aCBwYXRoIG5hbWVzIHRvby4gTWF5YmUgYC9mb28vYCBzaG91bGRuJ3Qgc2hvd1xuICAvLyBgL2Zvb2AgYXMgYWN0aXZlLCBidXQgaW4gdGhpcyBjYXNlLCB3ZSB3b3VsZCBhbHJlYWR5IGhhdmUgZmFpbGVkIHRoZVxuICAvLyBtYXRjaC5cbiAgaWYgKHBhdGhuYW1lLmNoYXJBdChwYXRobmFtZS5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgcGF0aG5hbWUgKz0gJy8nO1xuICB9XG4gIGlmIChjdXJyZW50UGF0aG5hbWUuY2hhckF0KGN1cnJlbnRQYXRobmFtZS5sZW5ndGggLSAxKSAhPT0gJy8nKSB7XG4gICAgY3VycmVudFBhdGhuYW1lICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiBjdXJyZW50UGF0aG5hbWUgPT09IHBhdGhuYW1lO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gcGF0aG5hbWUgbWF0Y2hlcyB0aGUgYWN0aXZlIHJvdXRlcyBhbmQgcGFyYW1zLlxuICovXG5mdW5jdGlvbiByb3V0ZUlzQWN0aXZlKHBhdGhuYW1lLCByb3V0ZXMsIHBhcmFtcykge1xuICB2YXIgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXRobmFtZSxcbiAgICAgIHBhcmFtTmFtZXMgPSBbXSxcbiAgICAgIHBhcmFtVmFsdWVzID0gW107XG5cbiAgLy8gZm9yLi4ub2Ygd291bGQgd29yayBoZXJlIGJ1dCBpdCdzIHByb2JhYmx5IHNsb3dlciBwb3N0LXRyYW5zcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSByb3V0ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgcm91dGUgPSByb3V0ZXNbaV07XG4gICAgdmFyIHBhdHRlcm4gPSByb3V0ZS5wYXRoIHx8ICcnO1xuXG4gICAgaWYgKHBhdHRlcm4uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICBwYXJhbU5hbWVzID0gW107XG4gICAgICBwYXJhbVZhbHVlcyA9IFtdO1xuICAgIH1cblxuICAgIGlmIChyZW1haW5pbmdQYXRobmFtZSAhPT0gbnVsbCAmJiBwYXR0ZXJuKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9ICgwLCBfUGF0dGVyblV0aWxzLm1hdGNoUGF0dGVybikocGF0dGVybiwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkLnJlbWFpbmluZ1BhdGhuYW1lO1xuICAgICAgICBwYXJhbU5hbWVzID0gW10uY29uY2F0KHBhcmFtTmFtZXMsIG1hdGNoZWQucGFyYW1OYW1lcyk7XG4gICAgICAgIHBhcmFtVmFsdWVzID0gW10uY29uY2F0KHBhcmFtVmFsdWVzLCBtYXRjaGVkLnBhcmFtVmFsdWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbWFpbmluZ1BhdGhuYW1lID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lID09PSAnJykge1xuICAgICAgICAvLyBXZSBoYXZlIGFuIGV4YWN0IG1hdGNoIG9uIHRoZSByb3V0ZS4gSnVzdCBjaGVjayB0aGF0IGFsbCB0aGUgcGFyYW1zXG4gICAgICAgIC8vIG1hdGNoLlxuICAgICAgICAvLyBGSVhNRTogVGhpcyBkb2Vzbid0IHdvcmsgb24gcmVwZWF0ZWQgcGFyYW1zLlxuICAgICAgICByZXR1cm4gcGFyYW1OYW1lcy5ldmVyeShmdW5jdGlvbiAocGFyYW1OYW1lLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcocGFyYW1WYWx1ZXNbaW5kZXhdKSA9PT0gU3RyaW5nKHBhcmFtc1twYXJhbU5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhbGwga2V5L3ZhbHVlIHBhaXJzIGluIHRoZSBnaXZlbiBxdWVyeSBhcmVcbiAqIGN1cnJlbnRseSBhY3RpdmUuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5SXNBY3RpdmUocXVlcnksIGFjdGl2ZVF1ZXJ5KSB7XG4gIGlmIChhY3RpdmVRdWVyeSA9PSBudWxsKSByZXR1cm4gcXVlcnkgPT0gbnVsbDtcblxuICBpZiAocXVlcnkgPT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIGRlZXBFcXVhbChxdWVyeSwgYWN0aXZlUXVlcnkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIDxMaW5rPiB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUvcXVlcnkgY29tYmluYXRpb24gaXNcbiAqIGN1cnJlbnRseSBhY3RpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzQWN0aXZlKF9yZWYsIGluZGV4T25seSwgY3VycmVudExvY2F0aW9uLCByb3V0ZXMsIHBhcmFtcykge1xuICB2YXIgcGF0aG5hbWUgPSBfcmVmLnBhdGhuYW1lO1xuICB2YXIgcXVlcnkgPSBfcmVmLnF1ZXJ5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24gPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIFRPRE86IFRoaXMgaXMgYSBiaXQgdWdseS4gSXQga2VlcHMgYXJvdW5kIHN1cHBvcnQgZm9yIHRyZWF0aW5nIHBhdGhuYW1lc1xuICAvLyB3aXRob3V0IHByZWNlZGluZyBzbGFzaGVzIGFzIGFic29sdXRlIHBhdGhzLCBidXQgcG9zc2libHkgYWxzbyB3b3Jrc1xuICAvLyBhcm91bmQgdGhlIHNhbWUgcXVpcmtzIHdpdGggYmFzZW5hbWVzIGFzIGluIG1hdGNoUm91dGVzLlxuICBpZiAocGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9XG5cbiAgaWYgKCFwYXRoSXNBY3RpdmUocGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSkpIHtcbiAgICAvLyBUaGUgcGF0aCBjaGVjayBpcyBuZWNlc3NhcnkgYW5kIHN1ZmZpY2llbnQgZm9yIGluZGV4T25seSwgYnV0IG90aGVyd2lzZVxuICAgIC8vIHdlIHN0aWxsIG5lZWQgdG8gY2hlY2sgdGhlIHJvdXRlcy5cbiAgICBpZiAoaW5kZXhPbmx5IHx8ICFyb3V0ZUlzQWN0aXZlKHBhdGhuYW1lLCByb3V0ZXMsIHBhcmFtcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcXVlcnlJc0FjdGl2ZShxdWVyeSwgY3VycmVudExvY2F0aW9uLnF1ZXJ5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7XCIuL1BhdHRlcm5VdGlsc1wiOjQzfV0sNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9jcmVhdGVNZW1vcnlIaXN0b3J5ID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5KTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfUm91dGVVdGlscyA9IHJlcXVpcmUoJy4vUm91dGVVdGlscycpO1xuXG52YXIgX1JvdXRlclV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZXJVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8qKlxuICogQSBoaWdoLWxldmVsIEFQSSB0byBiZSB1c2VkIGZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBtYXRjaGVzIGEgbG9jYXRpb24gdG8gYSBzZXQgb2Ygcm91dGVzIGFuZCBjYWxsc1xuICogY2FsbGJhY2soZXJyb3IsIHJlZGlyZWN0TG9jYXRpb24sIHJlbmRlclByb3BzKSB3aGVuIGZpbmlzaGVkLlxuICpcbiAqIE5vdGU6IFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIHVzZSB0aGlzIGluIGEgYnJvd3NlciB1bmxlc3MgeW91J3JlIHVzaW5nXG4gKiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgd2l0aCBhc3luYyByb3V0ZXMuXG4gKi9cbmZ1bmN0aW9uIG1hdGNoKF9yZWYsIGNhbGxiYWNrKSB7XG4gIHZhciBoaXN0b3J5ID0gX3JlZi5oaXN0b3J5O1xuICB2YXIgcm91dGVzID0gX3JlZi5yb3V0ZXM7XG4gIHZhciBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb247XG5cbiAgdmFyIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydoaXN0b3J5JywgJ3JvdXRlcycsICdsb2NhdGlvbiddKTtcblxuICAhKGhpc3RvcnkgfHwgbG9jYXRpb24pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShmYWxzZSwgJ21hdGNoIG5lZWRzIGEgaGlzdG9yeSBvciBhIGxvY2F0aW9uJykgOiAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGhpc3RvcnkgPSBoaXN0b3J5ID8gaGlzdG9yeSA6ICgwLCBfY3JlYXRlTWVtb3J5SGlzdG9yeTIuZGVmYXVsdCkob3B0aW9ucyk7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKGhpc3RvcnksICgwLCBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMpKHJvdXRlcykpO1xuXG4gIHZhciB1bmxpc3RlbiA9IHZvaWQgMDtcblxuICBpZiAobG9jYXRpb24pIHtcbiAgICAvLyBBbGxvdyBtYXRjaCh7IGxvY2F0aW9uOiAnL3RoZS9wYXRoJywgLi4uIH0pXG4gICAgbG9jYXRpb24gPSBoaXN0b3J5LmNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBQaWNrIHVwIHRoZSBsb2NhdGlvbiBmcm9tIHRoZSBoaXN0b3J5IHZpYSBzeW5jaHJvbm91cyBoaXN0b3J5Lmxpc3RlblxuICAgIC8vIGNhbGwgaWYgbmVlZGVkLlxuICAgIHVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGhpc3RvcnlMb2NhdGlvbikge1xuICAgICAgbG9jYXRpb24gPSBoaXN0b3J5TG9jYXRpb247XG4gICAgfSk7XG4gIH1cblxuICB2YXIgcm91dGVyID0gKDAsIF9Sb3V0ZXJVdGlscy5jcmVhdGVSb3V0ZXJPYmplY3QpKGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcbiAgaGlzdG9yeSA9ICgwLCBfUm91dGVyVXRpbHMuY3JlYXRlUm91dGluZ0hpc3RvcnkpKGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcblxuICB0cmFuc2l0aW9uTWFuYWdlci5tYXRjaChsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCByZWRpcmVjdExvY2F0aW9uLCBuZXh0U3RhdGUpIHtcbiAgICBjYWxsYmFjayhlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlICYmIF9leHRlbmRzKHt9LCBuZXh0U3RhdGUsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICByb3V0ZXI6IHJvdXRlcixcbiAgICAgIG1hdGNoQ29udGV4dDogeyBoaXN0b3J5OiBoaXN0b3J5LCB0cmFuc2l0aW9uTWFuYWdlcjogdHJhbnNpdGlvbk1hbmFnZXIsIHJvdXRlcjogcm91dGVyIH1cbiAgICB9KSk7XG5cbiAgICAvLyBEZWZlciByZW1vdmluZyB0aGUgbGlzdGVuZXIgdG8gaGVyZSB0byBwcmV2ZW50IERPTSBoaXN0b3JpZXMgZnJvbSBoYXZpbmdcbiAgICAvLyB0byB1bndpbmQgRE9NIGV2ZW50IGxpc3RlbmVycyB1bm5lY2Vzc2FyaWx5LCBpbiBjYXNlIGNhbGxiYWNrIHJlbmRlcnMgYVxuICAgIC8vIDxSb3V0ZXI+IGFuZCBhdHRhY2hlcyBhbm90aGVyIGhpc3RvcnkgbGlzdGVuZXIuXG4gICAgaWYgKHVubGlzdGVuKSB7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG1hdGNoO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9Sb3V0ZVV0aWxzXCI6NDgsXCIuL1JvdXRlclV0aWxzXCI6NTEsXCIuL2NyZWF0ZU1lbW9yeUhpc3RvcnlcIjo1NyxcIi4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXJcIjo1OSxcIl9wcm9jZXNzXCI6MzMsXCJpbnZhcmlhbnRcIjozMn1dLDY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBtYXRjaFJvdXRlcztcblxudmFyIF9yb3V0ZXJXYXJuaW5nID0gcmVxdWlyZSgnLi9yb3V0ZXJXYXJuaW5nJyk7XG5cbnZhciBfcm91dGVyV2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yb3V0ZXJXYXJuaW5nKTtcblxudmFyIF9Bc3luY1V0aWxzID0gcmVxdWlyZSgnLi9Bc3luY1V0aWxzJyk7XG5cbnZhciBfUGF0dGVyblV0aWxzID0gcmVxdWlyZSgnLi9QYXR0ZXJuVXRpbHMnKTtcblxudmFyIF9Sb3V0ZVV0aWxzID0gcmVxdWlyZSgnLi9Sb3V0ZVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldENoaWxkUm91dGVzKHJvdXRlLCBsb2NhdGlvbiwgY2FsbGJhY2spIHtcbiAgaWYgKHJvdXRlLmNoaWxkUm91dGVzKSB7XG4gICAgcmV0dXJuIFtudWxsLCByb3V0ZS5jaGlsZFJvdXRlc107XG4gIH1cbiAgaWYgKCFyb3V0ZS5nZXRDaGlsZFJvdXRlcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBzeW5jID0gdHJ1ZSxcbiAgICAgIHJlc3VsdCA9IHZvaWQgMDtcblxuICByb3V0ZS5nZXRDaGlsZFJvdXRlcyhsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBjaGlsZFJvdXRlcykge1xuICAgIGNoaWxkUm91dGVzID0gIWVycm9yICYmICgwLCBfUm91dGVVdGlscy5jcmVhdGVSb3V0ZXMpKGNoaWxkUm91dGVzKTtcbiAgICBpZiAoc3luYykge1xuICAgICAgcmVzdWx0ID0gW2Vycm9yLCBjaGlsZFJvdXRlc107XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2soZXJyb3IsIGNoaWxkUm91dGVzKTtcbiAgfSk7XG5cbiAgc3luYyA9IGZhbHNlO1xuICByZXR1cm4gcmVzdWx0OyAvLyBNaWdodCBiZSB1bmRlZmluZWQuXG59XG5cbmZ1bmN0aW9uIGdldEluZGV4Um91dGUocm91dGUsIGxvY2F0aW9uLCBjYWxsYmFjaykge1xuICBpZiAocm91dGUuaW5kZXhSb3V0ZSkge1xuICAgIGNhbGxiYWNrKG51bGwsIHJvdXRlLmluZGV4Um91dGUpO1xuICB9IGVsc2UgaWYgKHJvdXRlLmdldEluZGV4Um91dGUpIHtcbiAgICByb3V0ZS5nZXRJbmRleFJvdXRlKGxvY2F0aW9uLCBmdW5jdGlvbiAoZXJyb3IsIGluZGV4Um91dGUpIHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCAhZXJyb3IgJiYgKDAsIF9Sb3V0ZVV0aWxzLmNyZWF0ZVJvdXRlcykoaW5kZXhSb3V0ZSlbMF0pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHJvdXRlLmNoaWxkUm91dGVzKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXRobGVzcyA9IHJvdXRlLmNoaWxkUm91dGVzLmZpbHRlcihmdW5jdGlvbiAoY2hpbGRSb3V0ZSkge1xuICAgICAgICByZXR1cm4gIWNoaWxkUm91dGUucGF0aDtcbiAgICAgIH0pO1xuXG4gICAgICAoMCwgX0FzeW5jVXRpbHMubG9vcEFzeW5jKShwYXRobGVzcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuICAgICAgICBnZXRJbmRleFJvdXRlKHBhdGhsZXNzW2luZGV4XSwgbG9jYXRpb24sIGZ1bmN0aW9uIChlcnJvciwgaW5kZXhSb3V0ZSkge1xuICAgICAgICAgIGlmIChlcnJvciB8fCBpbmRleFJvdXRlKSB7XG4gICAgICAgICAgICB2YXIgcm91dGVzID0gW3BhdGhsZXNzW2luZGV4XV0uY29uY2F0KEFycmF5LmlzQXJyYXkoaW5kZXhSb3V0ZSkgPyBpbmRleFJvdXRlIDogW2luZGV4Um91dGVdKTtcbiAgICAgICAgICAgIGRvbmUoZXJyb3IsIHJvdXRlcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKGVyciwgcm91dGVzKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJvdXRlcyk7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzaWduUGFyYW1zKHBhcmFtcywgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMpIHtcbiAgcmV0dXJuIHBhcmFtTmFtZXMucmVkdWNlKGZ1bmN0aW9uIChwYXJhbXMsIHBhcmFtTmFtZSwgaW5kZXgpIHtcbiAgICB2YXIgcGFyYW1WYWx1ZSA9IHBhcmFtVmFsdWVzICYmIHBhcmFtVmFsdWVzW2luZGV4XTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtc1twYXJhbU5hbWVdKSkge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0ucHVzaChwYXJhbVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtTmFtZSBpbiBwYXJhbXMpIHtcbiAgICAgIHBhcmFtc1twYXJhbU5hbWVdID0gW3BhcmFtc1twYXJhbU5hbWVdLCBwYXJhbVZhbHVlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYW1zW3BhcmFtTmFtZV0gPSBwYXJhbVZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH0sIHBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhcmFtcyhwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcykge1xuICByZXR1cm4gYXNzaWduUGFyYW1zKHt9LCBwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVEZWVwKHJvdXRlLCBsb2NhdGlvbiwgcmVtYWluaW5nUGF0aG5hbWUsIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzLCBjYWxsYmFjaykge1xuICB2YXIgcGF0dGVybiA9IHJvdXRlLnBhdGggfHwgJyc7XG5cbiAgaWYgKHBhdHRlcm4uY2hhckF0KDApID09PSAnLycpIHtcbiAgICByZW1haW5pbmdQYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIHBhcmFtTmFtZXMgPSBbXTtcbiAgICBwYXJhbVZhbHVlcyA9IFtdO1xuICB9XG5cbiAgLy8gT25seSB0cnkgdG8gbWF0Y2ggdGhlIHBhdGggaWYgdGhlIHJvdXRlIGFjdHVhbGx5IGhhcyBhIHBhdHRlcm4sIGFuZCBpZlxuICAvLyB3ZSdyZSBub3QganVzdCBzZWFyY2hpbmcgZm9yIHBvdGVudGlhbCBuZXN0ZWQgYWJzb2x1dGUgcGF0aHMuXG4gIGlmIChyZW1haW5pbmdQYXRobmFtZSAhPT0gbnVsbCAmJiBwYXR0ZXJuKSB7XG4gICAgdmFyIG1hdGNoZWQgPSAoMCwgX1BhdHRlcm5VdGlscy5tYXRjaFBhdHRlcm4pKHBhdHRlcm4sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkLnJlbWFpbmluZ1BhdGhuYW1lO1xuICAgICAgcGFyYW1OYW1lcyA9IFtdLmNvbmNhdChwYXJhbU5hbWVzLCBtYXRjaGVkLnBhcmFtTmFtZXMpO1xuICAgICAgcGFyYW1WYWx1ZXMgPSBbXS5jb25jYXQocGFyYW1WYWx1ZXMsIG1hdGNoZWQucGFyYW1WYWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1haW5pbmdQYXRobmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQnkgYXNzdW1wdGlvbiwgcGF0dGVybiBpcyBub24tZW1wdHkgaGVyZSwgd2hpY2ggaXMgdGhlIHByZXJlcXVpc2l0ZSBmb3JcbiAgICAvLyBhY3R1YWxseSB0ZXJtaW5hdGluZyBhIG1hdGNoLlxuICAgIGlmIChyZW1haW5pbmdQYXRobmFtZSA9PT0gJycpIHtcbiAgICAgIHZhciBfcmV0MiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0ge1xuICAgICAgICAgIHJvdXRlczogW3JvdXRlXSxcbiAgICAgICAgICBwYXJhbXM6IGNyZWF0ZVBhcmFtcyhwYXJhbU5hbWVzLCBwYXJhbVZhbHVlcylcbiAgICAgICAgfTtcblxuICAgICAgICBnZXRJbmRleFJvdXRlKHJvdXRlLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBpbmRleFJvdXRlKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGluZGV4Um91dGUpKSB7XG4gICAgICAgICAgICAgIHZhciBfbWF0Y2gkcm91dGVzO1xuXG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGluZGV4Um91dGUuZXZlcnkoZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFyb3V0ZS5wYXRoO1xuICAgICAgICAgICAgICB9KSwgJ0luZGV4IHJvdXRlcyBzaG91bGQgbm90IGhhdmUgcGF0aHMnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgKF9tYXRjaCRyb3V0ZXMgPSBtYXRjaC5yb3V0ZXMpLnB1c2guYXBwbHkoX21hdGNoJHJvdXRlcywgaW5kZXhSb3V0ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4Um91dGUpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfcm91dGVyV2FybmluZzIuZGVmYXVsdCkoIWluZGV4Um91dGUucGF0aCwgJ0luZGV4IHJvdXRlcyBzaG91bGQgbm90IGhhdmUgcGF0aHMnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgbWF0Y2gucm91dGVzLnB1c2goaW5kZXhSb3V0ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1hdGNoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdjogdm9pZCAwXG4gICAgICAgIH07XG4gICAgICB9KCk7XG5cbiAgICAgIGlmICgodHlwZW9mIF9yZXQyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihfcmV0MikpID09PSBcIm9iamVjdFwiKSByZXR1cm4gX3JldDIudjtcbiAgICB9XG4gIH1cblxuICBpZiAocmVtYWluaW5nUGF0aG5hbWUgIT0gbnVsbCB8fCByb3V0ZS5jaGlsZFJvdXRlcykge1xuICAgIC8vIEVpdGhlciBhKSB0aGlzIHJvdXRlIG1hdGNoZWQgYXQgbGVhc3Qgc29tZSBvZiB0aGUgcGF0aCBvciBiKVxuICAgIC8vIHdlIGRvbid0IGhhdmUgdG8gbG9hZCB0aGlzIHJvdXRlJ3MgY2hpbGRyZW4gYXN5bmNocm9ub3VzbHkuIEluXG4gICAgLy8gZWl0aGVyIGNhc2UgY29udGludWUgY2hlY2tpbmcgZm9yIG1hdGNoZXMgaW4gdGhlIHN1YnRyZWUuXG4gICAgdmFyIG9uQ2hpbGRSb3V0ZXMgPSBmdW5jdGlvbiBvbkNoaWxkUm91dGVzKGVycm9yLCBjaGlsZFJvdXRlcykge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRSb3V0ZXMpIHtcbiAgICAgICAgLy8gQ2hlY2sgdGhlIGNoaWxkIHJvdXRlcyB0byBzZWUgaWYgYW55IG9mIHRoZW0gbWF0Y2guXG4gICAgICAgIG1hdGNoUm91dGVzKGNoaWxkUm91dGVzLCBsb2NhdGlvbiwgZnVuY3Rpb24gKGVycm9yLCBtYXRjaCkge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIEEgY2hpbGQgcm91dGUgbWF0Y2hlZCEgQXVnbWVudCB0aGUgbWF0Y2ggYW5kIHBhc3MgaXQgdXAgdGhlIHN0YWNrLlxuICAgICAgICAgICAgbWF0Y2gucm91dGVzLnVuc2hpZnQocm91dGUpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgbWF0Y2gpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcmVtYWluaW5nUGF0aG5hbWUsIHBhcmFtTmFtZXMsIHBhcmFtVmFsdWVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXN1bHQgPSBnZXRDaGlsZFJvdXRlcyhyb3V0ZSwgbG9jYXRpb24sIG9uQ2hpbGRSb3V0ZXMpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIG9uQ2hpbGRSb3V0ZXMuYXBwbHkodW5kZWZpbmVkLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgbWF0Y2hlcyB0aGUgZ2l2ZW4gbG9jYXRpb24gdG8gYSBzZXQgb2Ygcm91dGVzIGFuZCBjYWxsc1xuICogY2FsbGJhY2soZXJyb3IsIHN0YXRlKSB3aGVuIGZpbmlzaGVkLiBUaGUgc3RhdGUgb2JqZWN0IHdpbGwgaGF2ZSB0aGVcbiAqIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIC0gcm91dGVzICAgICAgIEFuIGFycmF5IG9mIHJvdXRlcyB0aGF0IG1hdGNoZWQsIGluIGhpZXJhcmNoaWNhbCBvcmRlclxuICogLSBwYXJhbXMgICAgICAgQW4gb2JqZWN0IG9mIFVSTCBwYXJhbWV0ZXJzXG4gKlxuICogTm90ZTogVGhpcyBvcGVyYXRpb24gbWF5IGZpbmlzaCBzeW5jaHJvbm91c2x5IGlmIG5vIHJvdXRlcyBoYXZlIGFuXG4gKiBhc3luY2hyb25vdXMgZ2V0Q2hpbGRSb3V0ZXMgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uLCBjYWxsYmFjaywgcmVtYWluaW5nUGF0aG5hbWUpIHtcbiAgdmFyIHBhcmFtTmFtZXMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDQgfHwgYXJndW1lbnRzWzRdID09PSB1bmRlZmluZWQgPyBbXSA6IGFyZ3VtZW50c1s0XTtcbiAgdmFyIHBhcmFtVmFsdWVzID0gYXJndW1lbnRzLmxlbmd0aCA8PSA1IHx8IGFyZ3VtZW50c1s1XSA9PT0gdW5kZWZpbmVkID8gW10gOiBhcmd1bWVudHNbNV07XG5cbiAgaWYgKHJlbWFpbmluZ1BhdGhuYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIGEgbGl0dGxlIGJpdCB1Z2x5LCBidXQgaXQgd29ya3MgYXJvdW5kIGEgcXVpcmsgaW4gaGlzdG9yeVxuICAgIC8vIHRoYXQgc3RyaXBzIHRoZSBsZWFkaW5nIHNsYXNoIGZyb20gcGF0aG5hbWVzIHdoZW4gdXNpbmcgYmFzZW5hbWVzIHdpdGhcbiAgICAvLyB0cmFpbGluZyBzbGFzaGVzLlxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6ICcvJyArIGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVtYWluaW5nUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgfVxuXG4gICgwLCBfQXN5bmNVdGlscy5sb29wQXN5bmMpKHJvdXRlcy5sZW5ndGgsIGZ1bmN0aW9uIChpbmRleCwgbmV4dCwgZG9uZSkge1xuICAgIG1hdGNoUm91dGVEZWVwKHJvdXRlc1tpbmRleF0sIGxvY2F0aW9uLCByZW1haW5pbmdQYXRobmFtZSwgcGFyYW1OYW1lcywgcGFyYW1WYWx1ZXMsIGZ1bmN0aW9uIChlcnJvciwgbWF0Y2gpIHtcbiAgICAgIGlmIChlcnJvciB8fCBtYXRjaCkge1xuICAgICAgICBkb25lKGVycm9yLCBtYXRjaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIGNhbGxiYWNrKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG59LHtcIi4vQXN5bmNVdGlsc1wiOjM1LFwiLi9QYXR0ZXJuVXRpbHNcIjo0MyxcIi4vUm91dGVVdGlsc1wiOjQ4LFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzfV0sNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcm91dGVyV2FybmluZztcbmV4cG9ydHMuX3Jlc2V0V2FybmVkID0gX3Jlc2V0V2FybmVkO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHdhcm5lZCA9IHt9O1xuXG5mdW5jdGlvbiByb3V0ZXJXYXJuaW5nKGZhbHNlVG9XYXJuLCBtZXNzYWdlKSB7XG4gIC8vIE9ubHkgaXNzdWUgZGVwcmVjYXRpb24gd2FybmluZ3Mgb25jZS5cbiAgaWYgKG1lc3NhZ2UuaW5kZXhPZignZGVwcmVjYXRlZCcpICE9PSAtMSkge1xuICAgIGlmICh3YXJuZWRbbWVzc2FnZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRbbWVzc2FnZV0gPSB0cnVlO1xuICB9XG5cbiAgbWVzc2FnZSA9ICdbcmVhY3Qtcm91dGVyXSAnICsgbWVzc2FnZTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIF93YXJuaW5nMi5kZWZhdWx0LmFwcGx5KHVuZGVmaW5lZCwgW2ZhbHNlVG9XYXJuLCBtZXNzYWdlXS5jb25jYXQoYXJncykpO1xufVxuXG5mdW5jdGlvbiBfcmVzZXRXYXJuZWQoKSB7XG4gIHdhcm5lZCA9IHt9O1xufVxufSx7XCJ3YXJuaW5nXCI6NzN9XSw2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1c2VSb3V0ZXJIaXN0b3J5O1xuXG52YXIgX3VzZVF1ZXJpZXMgPSByZXF1aXJlKCdoaXN0b3J5L2xpYi91c2VRdWVyaWVzJyk7XG5cbnZhciBfdXNlUXVlcmllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VRdWVyaWVzKTtcblxudmFyIF91c2VCYXNlbmFtZSA9IHJlcXVpcmUoJ2hpc3RvcnkvbGliL3VzZUJhc2VuYW1lJyk7XG5cbnZhciBfdXNlQmFzZW5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlQmFzZW5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB1c2VSb3V0ZXJIaXN0b3J5KGNyZWF0ZUhpc3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGhpc3RvcnkgPSAoMCwgX3VzZVF1ZXJpZXMyLmRlZmF1bHQpKCgwLCBfdXNlQmFzZW5hbWUyLmRlZmF1bHQpKGNyZWF0ZUhpc3RvcnkpKShvcHRpb25zKTtcbiAgICBoaXN0b3J5Ll9fdjJfY29tcGF0aWJsZV9fID0gdHJ1ZTtcbiAgICByZXR1cm4gaGlzdG9yeTtcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7XCJoaXN0b3J5L2xpYi91c2VCYXNlbmFtZVwiOjI5LFwiaGlzdG9yeS9saWIvdXNlUXVlcmllc1wiOjMwfV0sNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF91c2VRdWVyaWVzID0gcmVxdWlyZSgnaGlzdG9yeS9saWIvdXNlUXVlcmllcycpO1xuXG52YXIgX3VzZVF1ZXJpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlUXVlcmllcyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX3JvdXRlcldhcm5pbmcgPSByZXF1aXJlKCcuL3JvdXRlcldhcm5pbmcnKTtcblxudmFyIF9yb3V0ZXJXYXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JvdXRlcldhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBjcmVhdGVIaXN0b3J5IGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gY3JlYXRlXG4gKiBoaXN0b3J5IG9iamVjdHMgdGhhdCBrbm93IGFib3V0IHJvdXRpbmcuXG4gKlxuICogRW5oYW5jZXMgaGlzdG9yeSBvYmplY3RzIHdpdGggdGhlIGZvbGxvd2luZyBtZXRob2RzOlxuICpcbiAqIC0gbGlzdGVuKChlcnJvciwgbmV4dFN0YXRlKSA9PiB7fSlcbiAqIC0gbGlzdGVuQmVmb3JlTGVhdmluZ1JvdXRlKHJvdXRlLCAobmV4dExvY2F0aW9uKSA9PiB7fSlcbiAqIC0gbWF0Y2gobG9jYXRpb24sIChlcnJvciwgcmVkaXJlY3RMb2NhdGlvbiwgbmV4dFN0YXRlKSA9PiB7fSlcbiAqIC0gaXNBY3RpdmUocGF0aG5hbWUsIHF1ZXJ5LCBpbmRleE9ubHk9ZmFsc2UpXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcyhjcmVhdGVIaXN0b3J5KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3JvdXRlcldhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnYHVzZVJvdXRlc2AgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXJgIGluc3RlYWQuJykgOiB2b2lkIDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG4gICAgdmFyIHJvdXRlcyA9IF9yZWYucm91dGVzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWydyb3V0ZXMnXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9ICgwLCBfdXNlUXVlcmllczIuZGVmYXVsdCkoY3JlYXRlSGlzdG9yeSkob3B0aW9ucyk7XG4gICAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoaGlzdG9yeSwgcm91dGVzKTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGhpc3RvcnksIHRyYW5zaXRpb25NYW5hZ2VyKTtcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdXNlUm91dGVzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbn0se1wiLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlclwiOjU5LFwiLi9yb3V0ZXJXYXJuaW5nXCI6NjgsXCJfcHJvY2Vzc1wiOjMzLFwiaGlzdG9yeS9saWIvdXNlUXVlcmllc1wiOjMwfV0sNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoUm91dGVyO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MgPSByZXF1aXJlKCdob2lzdC1ub24tcmVhY3Qtc3RhdGljcycpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvaXN0Tm9uUmVhY3RTdGF0aWNzKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKCcuL1Byb3BUeXBlcycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXREaXNwbGF5TmFtZShXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHJldHVybiBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn1cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihXcmFwcGVkQ29tcG9uZW50KSB7XG4gIHZhciBXaXRoUm91dGVyID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ1dpdGhSb3V0ZXInLFxuXG4gICAgY29udGV4dFR5cGVzOiB7IHJvdXRlcjogX1Byb3BUeXBlcy5yb3V0ZXJTaGFwZSB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7IHJvdXRlcjogdGhpcy5jb250ZXh0LnJvdXRlciB9KSk7XG4gICAgfVxuICB9KTtcblxuICBXaXRoUm91dGVyLmRpc3BsYXlOYW1lID0gJ3dpdGhSb3V0ZXIoJyArIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpICsgJyknO1xuICBXaXRoUm91dGVyLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuXG4gIHJldHVybiAoMCwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzMi5kZWZhdWx0KShXaXRoUm91dGVyLCBXcmFwcGVkQ29tcG9uZW50KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSx7XCIuL1Byb3BUeXBlc1wiOjQ0LFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjozMSxcInJlYWN0XCI6XCJyZWFjdFwifV0sNzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uIChjKSB7XG5cdFx0cmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0fSk7XG59O1xuXG59LHt9XSw3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxufSx7XCJfcHJvY2Vzc1wiOjMzfV19LHt9LFsxXSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
